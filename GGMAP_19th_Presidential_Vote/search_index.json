[["index.html", "Visualization of the 19th Presidential Vote with R 제19대 대통령선거 후보자별 득표 [시도별 : CTPRVN.shp]", " Visualization of the 19th Presidential Vote with R Dae Ho Kim 2020-12-08 제19대 대통령선거 후보자별 득표 [시도별 : CTPRVN.shp] 2017년 5월의 제19대 대통령 선거의 후보자별 득표수 시각화 지리정보 좌표계 변환 시도 데이터 세트와 지리정보 데이터 세트 생성 그리고 결합 시도별 후보자 득표수 데이터 생성 및 지리정보 데이터 세트와의 결합 득표수 시각화 data files SHP files "],["SHP-Conversion.html", "Chapter 1 지리정보의 좌표계 변환 사용할 패키지 불러오기 1.1 시도별 지리정보 파일 1.2 지리정보의 좌표계 변환", " Chapter 1 지리정보의 좌표계 변환 사용할 패키지 불러오기 library(ggmap) ## Loading required package: ggplot2 ## Google&#39;s Terms of Service: https://cloud.google.com/maps-platform/terms/. ## Please cite ggmap if you use it! See citation(&quot;ggmap&quot;) for details. library(ggplot2) library(raster) ## Loading required package: sp library(rgeos) ## rgeos version: 0.5-5, (SVN revision 640) ## GEOS runtime version: 3.8.0-CAPI-1.13.1 ## Linking to sp version: 1.4-4 ## Polygon checking: TRUE library(maptools) ## Checking rgeos availability: TRUE library(rgdal) ## rgdal: version: 1.5-18, (SVN revision 1082) ## Geospatial Data Abstraction Library extensions to R successfully loaded ## Loaded GDAL runtime: GDAL 3.0.4, released 2020/01/28 ## Path to GDAL shared files: C:/Program Files/R/R-4.0.3/library/rgdal/gdal ## GDAL binary built with GEOS: TRUE ## Loaded PROJ runtime: Rel. 6.3.1, February 10th, 2020, [PJ_VERSION: 631] ## Path to PROJ shared files: C:/Program Files/R/R-4.0.3/library/rgdal/proj ## Linking to sp version:1.4-4 ## To mute warnings of possible GDAL/OSR exportToProj4() degradation, ## use options(&quot;rgdal_show_exportToProj4_warnings&quot;=&quot;none&quot;) before loading rgdal. library(tidyverse) ## -- Attaching packages --------------------------------------- tidyverse 1.3.0 -- ##  tibble 3.0.4  dplyr 1.0.2 ##  tidyr 1.1.2  stringr 1.4.0 ##  readr 1.4.0  forcats 0.5.0 ##  purrr 0.3.4 ## -- Conflicts ------------------------------------------ tidyverse_conflicts() -- ## x tidyr::extract() masks raster::extract() ## x dplyr::filter() masks stats::filter() ## x dplyr::lag() masks stats::lag() ## x dplyr::select() masks raster::select() 1.1 시도별 지리정보 파일 1.1.1 시도 지리정보 파일 다운받기 행정구역 SHP 파일에서 시도(CTPRVN) / 시군구(SIG) / 읍명동(EMD) / 리 구분하여 최신의 파일을 다운받을 수 있다. 2017년 5월에 대선이 있었으므로, 2017년 3월의 업데이터 파일을 다운받는다. 1.1.2 시도 지리정보 파일 불러오기 rgdal 패키지의 readOGR() 함수를 이용하여, 시도 지리정보 파일인 “TL_SCCO_CTPRVN.shp”을 불러온다. shp_CTPRVN_grs &lt;- readOGR(&#39;shp/TL_SCCO_CTPRVN.shp&#39;) ## OGR data source with driver: ESRI Shapefile ## Source: &quot;C:\\Users\\김대호\\OneDrive - 목원대학교\\Kim_DaeHo(insoo_notebook)\\Lectures\\BigDataAnalysis\\BDA-2020\\강의용 PDF\\Ch07\\지역지도\\19-President-Vote\\시도-득표수분석(최종)\\shp\\TL_SCCO_CTPRVN.shp&quot;, layer: &quot;TL_SCCO_CTPRVN&quot; ## with 17 features ## It has 3 fields 1.1.3 지리정보 파일의 속성 확인 summary(shp_CTPRVN_grs) ## Object of class SpatialPolygonsDataFrame ## Coordinates: ## min max ## x 746110.3 1387950 ## y 1458754.0 2066200 ## Is projected: TRUE ## proj4string : ## [+proj=tmerc +lat_0=38 +lon_0=127.5 +k=0.9996 +x_0=1000000 +y_0=2000000 ## +ellps=GRS80 +units=m +no_defs] ## Data attributes: ## CTPRVN_CD CTP_ENG_NM CTP_KOR_NM ## Length:17 Length:17 Length:17 ## Class :character Class :character Class :character ## Mode :character Mode :character Mode :character 1.2 지리정보의 좌표계 변환 기본적으로 제공하는 (시도) 지리정보 파일은 GRS80 좌표계를 담고 있다. 이 좌표계를 WGS84 경도/위도 좌표계로 변환한다. 1.2.1 좌표계 변환 인자 설정 좌표계 변환을 위한 Proj4. 인자를 다음과 같이 설정한다. from_crs &lt;- CRS(&quot;+proj=tmerc +lat_0=38 +lon_0=127.5 +k=0.9996 +x_0=1000000 +y_0=2000000 +ellps=GRS80 +units=m&quot;) to_crs &lt;- CRS(&quot;+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs&quot;) 1.2.2 좌표계 변환 sp 패키지의 spTransform( ) 함수를 이용하여 좌표계 변경 인자 to_crs를 활용하여 경도/위도 좌표계로 변환하고 shp_CTPRVN에 대입한다. shp_CTPRVN &lt;- spTransform(shp_CTPRVN_grs, to_crs) 1.2.3 좌표계의 요약정보 확인 shp_CTRPVN은 S4 Class 이며, Slot으로 구성된다. summary() 함수를 이용하여 변수의 요약정보를 확인한다. summary(shp_CTPRVN) ## Object of class SpatialPolygonsDataFrame ## Coordinates: ## min max ## x 124.60971 131.87278 ## y 33.11371 38.59339 ## Is projected: FALSE ## proj4string : [+proj=longlat +datum=WGS84 +no_defs] ## Data attributes: ## CTPRVN_CD CTP_ENG_NM CTP_KOR_NM ## Length:17 Length:17 Length:17 ## Class :character Class :character Class :character ## Mode :character Mode :character Mode :character 1.2.4 변환된 좌표계의 슬롯 확인 이제 shp_CTPRVN의 슬롯을 확인한다. slotNames(shp_CTPRVN) ## [1] &quot;data&quot; &quot;polygons&quot; &quot;plotOrder&quot; &quot;bbox&quot; &quot;proj4string&quot; 1.2.5 슬롯의 속성 확인 data 슬롯의 속성을 확인한다. head(shp_CTPRVN@data) ## CTPRVN_CD CTP_ENG_NM CTP_KOR_NM ## 0 11 Seoul 서울특별시 ## 1 26 Busan 부산광역시 ## 2 27 Daegu 대구광역시 ## 3 28 Incheon 인천광역시 ## 4 29 Gwangju 광주광역시 ## 5 30 Daejeon 대전광역시 slotNames(shp_CTPRVN@data) ## [1] &quot;.Data&quot; &quot;names&quot; &quot;row.names&quot; &quot;.S3Class&quot; "],["create-CTPRVN-dataset.html", "Chapter 2 데이터 세트의 생성 사용할 패키지 불러오기 2.1 시도 데이터 세트 생성 2.2 시도 지리정보 데이터 세트 생성 2.3 ’시도 데이터 세트와 '시도 지리정보 데이터 세트의 결합", " Chapter 2 데이터 세트의 생성 사용할 패키지 불러오기 library(ggmap) library(ggplot2) library(raster) library(rgeos) library(maptools) library(rgdal) library(tidyverse) 2.1 시도 데이터 세트 생성 앞의 “지리정보”에는 시도에 대한 데이터가 data 슬롯에 포함되어 있다. 즉, shp_CTPRVN@data에 시도에 대한 데이터가 수록되어 있는데, 이를 data_CTPRVN 이라는 변수에 대입한다. data_CTPRVN &lt;- shp_CTPRVN@data str(data_CTPRVN) ## &#39;data.frame&#39;: 17 obs. of 3 variables: ## $ CTPRVN_CD : chr &quot;11&quot; &quot;26&quot; &quot;27&quot; &quot;28&quot; ... ## $ CTP_ENG_NM: chr &quot;Seoul&quot; &quot;Busan&quot; &quot;Daegu&quot; &quot;Incheon&quot; ... ## $ CTP_KOR_NM: chr &quot;서울특별시&quot; &quot;부산광역시&quot; &quot;대구광역시&quot; &quot;인천광역시&quot; ... head(data_CTPRVN) ## CTPRVN_CD CTP_ENG_NM CTP_KOR_NM ## 0 11 Seoul 서울특별시 ## 1 26 Busan 부산광역시 ## 2 27 Daegu 대구광역시 ## 3 28 Incheon 인천광역시 ## 4 29 Gwangju 광주광역시 ## 5 30 Daejeon 대전광역시 CTPRNVN_CD : 시도 코드(2자리) CTP_ENG_NM, CTP_KOR_NM : 시도 영문/한글명 2.2 시도 지리정보 데이터 세트 생성 shp_CTPRVN은 S4 클래스 구조인데, 이를 데이터 프레임 형태의 지리정보 데이터 세트(shp_result)로 변환한다. ggplot2 패키지의 fortify() 함수를 이용하여 shp_CTPRVN 변수를 데이터 프레임으로 변환한다. 이때 region = \"CTPRVN_CD\"를 인수로 이용한다. shp_result &lt;- fortify(shp_CTPRVN, region=&quot;CTPRVN_CD&quot;) ## SpP is invalid str(shp_result) ## &#39;data.frame&#39;: 798838 obs. of 7 variables: ## $ long : num 127 127 127 127 127 ... ## $ lat : num 37.6 37.6 37.6 37.6 37.6 ... ## $ order: int 1 2 3 4 5 6 7 8 9 10 ... ## $ hole : logi FALSE FALSE FALSE FALSE FALSE FALSE ... ## $ piece: Factor w/ 2228 levels &quot;1&quot;,&quot;2&quot;,&quot;3&quot;,&quot;4&quot;,..: 1 1 1 1 1 1 1 1 1 1 ... ## $ id : chr &quot;11&quot; &quot;11&quot; &quot;11&quot; &quot;11&quot; ... ## $ group: Factor w/ 4558 levels &quot;11.1&quot;,&quot;11.2&quot;,..: 1 1 1 1 1 1 1 1 1 1 ... head(shp_result) ## long lat order hole piece id group ## 1 127.1108 37.63841 1 FALSE 1 11 11.1 ## 2 127.1108 37.63841 2 FALSE 1 11 11.1 ## 3 127.1109 37.63826 3 FALSE 1 11 11.1 ## 4 127.1110 37.63821 4 FALSE 1 11 11.1 ## 5 127.1116 37.63803 5 FALSE 1 11 11.1 ## 6 127.1116 37.63799 6 FALSE 1 11 11.1 id : 시도 코드(2자리) 나머지 컬럼들 : 좌표계를 포함한 지리정보 2.3 ’시도 데이터 세트와 '시도 지리정보 데이터 세트의 결합 시도 데이터 세트에는 좌표계 정보가 포함되어 있지 않다. (시도 코드와 시도 한글/영문명 으로 구성) 반면에 시도 지리 정보 데이터 세트에는 좌표계 정보가 포함되어 있지만 시도명에 대한 데이터가 포함되어 있지 않다.(시도 코드와 좌표계 정보 포함) 이제 시도 지리정보 데이터 세트에 시도 데이터 세트에 있는 시도 영문/한글명 컬럼을 결합하기 위해, 왼쪽 테이블과 오른쪽 테이블 그리고 결합 key를 확인한다. 왼쪽 테이블 : shp_result (시도 지리정보 데이터 세트), 주키 : id 오른쪽 테이블 : data_CTPRVN, 주키 : CTPRVN_CD 왼쪽 테이브과 오른쪽 테이블을 결합하기 위한 key의 이름이 다름다. 이제 데이터 세트를 left_join() 함수를 이용하여 결합한다. (inner_join() 함수를 사용해도 같은 결과) result &lt;- shp_result %&gt;% left_join(data_CTPRVN, by = c(&quot;id&quot; = &quot;CTPRVN_CD&quot;)) str(result) ## &#39;data.frame&#39;: 798838 obs. of 9 variables: ## $ long : num 127 127 127 127 127 ... ## $ lat : num 37.6 37.6 37.6 37.6 37.6 ... ## $ order : int 1 2 3 4 5 6 7 8 9 10 ... ## $ hole : logi FALSE FALSE FALSE FALSE FALSE FALSE ... ## $ piece : Factor w/ 2228 levels &quot;1&quot;,&quot;2&quot;,&quot;3&quot;,&quot;4&quot;,..: 1 1 1 1 1 1 1 1 1 1 ... ## $ id : chr &quot;11&quot; &quot;11&quot; &quot;11&quot; &quot;11&quot; ... ## $ group : Factor w/ 4558 levels &quot;11.1&quot;,&quot;11.2&quot;,..: 1 1 1 1 1 1 1 1 1 1 ... ## $ CTP_ENG_NM: chr &quot;Seoul&quot; &quot;Seoul&quot; &quot;Seoul&quot; &quot;Seoul&quot; ... ## $ CTP_KOR_NM: chr &quot;서울특별시&quot; &quot;서울특별시&quot; &quot;서울특별시&quot; &quot;서울특별시&quot; ... head(result) ## long lat order hole piece id group CTP_ENG_NM CTP_KOR_NM ## 1 127.1108 37.63841 1 FALSE 1 11 11.1 Seoul 서울특별시 ## 2 127.1108 37.63841 2 FALSE 1 11 11.1 Seoul 서울특별시 ## 3 127.1109 37.63826 3 FALSE 1 11 11.1 Seoul 서울특별시 ## 4 127.1110 37.63821 4 FALSE 1 11 11.1 Seoul 서울특별시 ## 5 127.1116 37.63803 5 FALSE 1 11 11.1 Seoul 서울특별시 ## 6 127.1116 37.63799 6 FALSE 1 11 11.1 Seoul 서울특별시 "],["dataset-visualization.html", "Chapter 3 지도 시각화용 데이터 세트 생성 사용할 패키지 불러오기 3.1 득표수 데이터 파일 불러오기 3.2 시도별 후보자 득표수 데이터 세트 만들기 3.3 득표수 데이터 세트의 모양 변환 3.4 득표수 데이터 세트와 지리정보 데이터 세트 결합 3.5 후보자 이름 컬럼을 factor 형으로 변환 3.6 데이터 세트 저장하기", " Chapter 3 지도 시각화용 데이터 세트 생성 사용할 패키지 불러오기 library(ggmap) library(ggplot2) library(raster) library(rgeos) library(maptools) library(rgdal) library(tidyverse) 3.1 득표수 데이터 파일 불러오기 제19대 대통령선거 특표 데이터를 불러온다. data &lt;- read_csv(&quot;data/19-President_Total.csv&quot;, locale = locale(&quot;ko&quot;, encoding = &quot;euc-kr&quot;)) ## ## -- Column specification -------------------------------------------------------- ## cols( ## .default = col_double(), ## CTPRVN_NM = col_character(), ## SIG_NM = col_character(), ## EMD_NM = col_character(), ## VOTE_NM = col_character() ## ) ## i Use `spec()` for the full column specifications. str(data) ## tibble [22,214 x 22] (S3: spec_tbl_df/tbl_df/tbl/data.frame) ## $ CTPRVN_NM: chr [1:22214] &quot;전국&quot; &quot;서울특별시&quot; &quot;서울특별시&quot; &quot;서울특별시&quot; ... ## $ SIG_NM : chr [1:22214] NA &quot;합계&quot; &quot;종로구&quot; &quot;종로구&quot; ... ## $ EMD_NM : chr [1:22214] NA NA &quot;합계&quot; &quot;거소·선상투표&quot; ... ## $ VOTE_NM : chr [1:22214] NA NA NA NA ... ## $ N_People : num [1:22214] 42479710 8382999 133769 218 12803 ... ## $ N_Vote : num [1:22214] 32807908 6590646 102566 206 12803 ... ## $ Moon_J : num [1:22214] 13423800 2781345 42512 64 5842 ... ## $ Hong_J : num [1:22214] 7852849 1365285 22325 42 2025 ... ## $ Ahn_Ch : num [1:22214] 6998342 1492767 22313 65 2509 ... ## $ You_S : num [1:22214] 2208771 476973 7412 8 1156 ... ## $ Shim_S : num [1:22214] 2017458 425459 7113 15 1145 ... ## $ Cho_W : num [1:22214] 42949 9987 228 0 17 ... ## $ Oh : num [1:22214] 6040 789 5 1 0 0 0 0 0 0 ... ## $ Chang : num [1:22214] 21709 3554 78 3 4 ... ## $ Lee_J : num [1:22214] 9140 1938 31 1 2 ... ## $ Kim : num [1:22214] 27229 3416 63 0 15 ... ## $ Lee_K : num [1:22214] 11355 1277 26 0 6 ... ## $ Yoon_H : num [1:22214] 18543 2177 47 0 9 ... ## $ Kim_M : num [1:22214] 33990 3950 49 2 6 ... ## $ Sum : num [1:22214] 32672175 6568917 102202 201 12736 ... ## $ Invalid : num [1:22214] 135733 21729 364 5 67 ... ## $ blank : num [1:22214] 9671802 1792353 31203 12 0 ... ## - attr(*, &quot;spec&quot;)= ## .. cols( ## .. CTPRVN_NM = col_character(), ## .. SIG_NM = col_character(), ## .. EMD_NM = col_character(), ## .. VOTE_NM = col_character(), ## .. N_People = col_double(), ## .. N_Vote = col_double(), ## .. Moon_J = col_double(), ## .. Hong_J = col_double(), ## .. Ahn_Ch = col_double(), ## .. You_S = col_double(), ## .. Shim_S = col_double(), ## .. Cho_W = col_double(), ## .. Oh = col_double(), ## .. Chang = col_double(), ## .. Lee_J = col_double(), ## .. Kim = col_double(), ## .. Lee_K = col_double(), ## .. Yoon_H = col_double(), ## .. Kim_M = col_double(), ## .. Sum = col_double(), ## .. Invalid = col_double(), ## .. blank = col_double() ## .. ) 3.2 시도별 후보자 득표수 데이터 세트 만들기 행의 선택 : 불러온 데이터의 SIG_NM 컬럼 값이 “합계” 행들이 시도별 후보자 득표수 합계를 보여주고 있다. 컬럼 선택 : 시도명 컬럼(CTPRVN_NM), 후보자 득표수 컬럼 컬럼 생성 : 기타 후보자(etc) 득표수 컬럼 vote_CTPRVN &lt;- data %&gt;% filter(SIG_NM == &quot;합계&quot;) %&gt;% mutate(etc = Sum - (Moon_J + Hong_J + Ahn_Ch + You_S + Shim_S)) %&gt;% dplyr::select(CTPRVN_NM, Moon_J, Hong_J, Ahn_Ch, You_S, Shim_S, etc) str(vote_CTPRVN) ## tibble [17 x 7] (S3: tbl_df/tbl/data.frame) ## $ CTPRVN_NM: chr [1:17] &quot;서울특별시&quot; &quot;부산광역시&quot; &quot;대구광역시&quot; &quot;인천광역시&quot; ... ## $ Moon_J : num [1:17] 2781345 872127 342620 747090 583847 ... ## $ Hong_J : num [1:17] 1365285 720484 714205 379191 14882 ... ## $ Ahn_Ch : num [1:17] 1492767 378907 235757 428888 287222 ... ## $ You_S : num [1:17] 476973 162480 198459 118691 20862 ... ## $ Shim_S : num [1:17] 425459 109329 74440 129925 43719 ... ## $ etc : num [1:17] 27088 9382 8895 9178 4300 ... 3.3 득표수 데이터 세트의 모양 변환 득표수 데이터 세트를 보면, 후보자별 득표수 데이터가 후보자별 컬럼에 저장되어 있다. 즉, wide 형태로 되어 있다. 데이터 세트의 분석력을 높이기 위해 이를 long 형태로 변환하는 것이 좋다. vote_CTPRVN 데이터 세트를 long 형태로 변환한다. vote_CTPRVN_long &lt;- vote_CTPRVN %&gt;% pivot_longer(names_to = &quot;name&quot;, values_to = &quot;n_vote&quot;, -1) str(vote_CTPRVN_long) ## tibble [102 x 3] (S3: tbl_df/tbl/data.frame) ## $ CTPRVN_NM: chr [1:102] &quot;서울특별시&quot; &quot;서울특별시&quot; &quot;서울특별시&quot; &quot;서울특별시&quot; ... ## $ name : chr [1:102] &quot;Moon_J&quot; &quot;Hong_J&quot; &quot;Ahn_Ch&quot; &quot;You_S&quot; ... ## $ n_vote : num [1:102] 2781345 1365285 1492767 476973 425459 ... 이제 17개 이던 행의 갯수가 102개로 늘어 났다. (6명 후보 * 17개 시도 = 102개 행) 3.4 득표수 데이터 세트와 지리정보 데이터 세트 결합 왼쪽 테이블 : vote_CTPRVN, 주키 : CTPRVN_NM 오른쪽 테이블 : result, 주키 : CTP_KOR_NM join 에 사용될 주키의 이름이 다르다. 두 데이터 세트를 결합하여 vote에 대입한다. vote &lt;- vote_CTPRVN_long %&gt;% left_join(result, by = c(&quot;CTPRVN_NM&quot; = &quot;CTP_KOR_NM&quot;)) str(vote) ## tibble [4,793,028 x 11] (S3: tbl_df/tbl/data.frame) ## $ CTPRVN_NM : chr [1:4793028] &quot;서울특별시&quot; &quot;서울특별시&quot; &quot;서울특별시&quot; &quot;서울특별시&quot; ... ## $ name : chr [1:4793028] &quot;Moon_J&quot; &quot;Moon_J&quot; &quot;Moon_J&quot; &quot;Moon_J&quot; ... ## $ n_vote : num [1:4793028] 2781345 2781345 2781345 2781345 2781345 ... ## $ long : num [1:4793028] 127 127 127 127 127 ... ## $ lat : num [1:4793028] 37.6 37.6 37.6 37.6 37.6 ... ## $ order : int [1:4793028] 1 2 3 4 5 6 7 8 9 10 ... ## $ hole : logi [1:4793028] FALSE FALSE FALSE FALSE FALSE FALSE ... ## $ piece : Factor w/ 2228 levels &quot;1&quot;,&quot;2&quot;,&quot;3&quot;,&quot;4&quot;,..: 1 1 1 1 1 1 1 1 1 1 ... ## $ id : chr [1:4793028] &quot;11&quot; &quot;11&quot; &quot;11&quot; &quot;11&quot; ... ## $ group : Factor w/ 4558 levels &quot;11.1&quot;,&quot;11.2&quot;,..: 1 1 1 1 1 1 1 1 1 1 ... ## $ CTP_ENG_NM: chr [1:4793028] &quot;Seoul&quot; &quot;Seoul&quot; &quot;Seoul&quot; &quot;Seoul&quot; ... 3.5 후보자 이름 컬럼을 factor 형으로 변환 vote의 name 컬럼을 factor 형으로 변환한다. 그 순서는 후보자 번호 순으로 한다. vote$name &lt;- factor(vote$name, levels = c(&quot;Moon_J&quot;, &quot;Hong_J&quot;, &quot;Ahn_Ch&quot;, &quot;You_S&quot;, &quot;Shim_S&quot;, &quot;etc&quot;)) str(vote) ## tibble [4,793,028 x 11] (S3: tbl_df/tbl/data.frame) ## $ CTPRVN_NM : chr [1:4793028] &quot;서울특별시&quot; &quot;서울특별시&quot; &quot;서울특별시&quot; &quot;서울특별시&quot; ... ## $ name : Factor w/ 6 levels &quot;Moon_J&quot;,&quot;Hong_J&quot;,..: 1 1 1 1 1 1 1 1 1 1 ... ## $ n_vote : num [1:4793028] 2781345 2781345 2781345 2781345 2781345 ... ## $ long : num [1:4793028] 127 127 127 127 127 ... ## $ lat : num [1:4793028] 37.6 37.6 37.6 37.6 37.6 ... ## $ order : int [1:4793028] 1 2 3 4 5 6 7 8 9 10 ... ## $ hole : logi [1:4793028] FALSE FALSE FALSE FALSE FALSE FALSE ... ## $ piece : Factor w/ 2228 levels &quot;1&quot;,&quot;2&quot;,&quot;3&quot;,&quot;4&quot;,..: 1 1 1 1 1 1 1 1 1 1 ... ## $ id : chr [1:4793028] &quot;11&quot; &quot;11&quot; &quot;11&quot; &quot;11&quot; ... ## $ group : Factor w/ 4558 levels &quot;11.1&quot;,&quot;11.2&quot;,..: 1 1 1 1 1 1 1 1 1 1 ... ## $ CTP_ENG_NM: chr [1:4793028] &quot;Seoul&quot; &quot;Seoul&quot; &quot;Seoul&quot; &quot;Seoul&quot; ... 3.6 데이터 세트 저장하기 이제 득표수 데이터에 지리정보가 결합된 데이터 세트 M을 02-vote_CTPRVN_last.rds 파일로 저장한다. write_rds(vote, &quot;data/03-vote_CTPRVN_last.rds&quot;) "],["visualization.html", "Chapter 4 득표수 데이터 시각화 : 지도 그리기 사용할 패키지 불러오기 4.1 전체 후보자 득표수 시각화 4.2 후보별 득표수 시각화 4.3 viridis 패키지 활용", " Chapter 4 득표수 데이터 시각화 : 지도 그리기 사용할 패키지 불러오기 library(ggmap) library(ggplot2) library(raster) library(rgeos) library(maptools) library(rgdal) library(tidyverse) 4.1 전체 후보자 득표수 시각화 vote 데이터 세트를 이용하여 후보자별 득표 지도를 한 화면에 표시한다. 이때 facet_wrap(vars(name))을 이용한다. ggplot() + geom_polygon(data = vote, aes(x = long, y = lat, group = group, fill = round(n_vote/100000)), # 득표수 color = &quot;gray&quot;) + # 구 경계 테두리 선 색깔 scale_fill_gradient(low = &quot;white&quot;, high = &quot;blue&quot;, space = &quot;Lab&quot;, guide = &quot;colourbar&quot;) + labs(fill = &quot;득표수&quot;) + theme_void() + theme(legend.position = c(0.95, .25)) + facet_wrap(vars(name)) # 후보자별 구분 4.2 후보별 득표수 시각화 4.2.1 문재인 후보 득표수 문재인 후보 득표수 데이터 세트 생성 Vote_Moon &lt;- vote %&gt;% filter(name == &quot;Moon_J&quot;) 문재인 후보 득표수 지도 그리기 ggplot() + geom_polygon(data = Vote_Moon, aes(x = long, y = lat, group = group, fill = round(n_vote/100000)), # 득표수 color = &quot;gray&quot;) + # 경계선 색깔 scale_fill_gradient(low = &quot;white&quot;, high = &quot;blue&quot;, space = &quot;Lab&quot;, guide = &quot;colourbar&quot;) + labs(fill = &quot;득표수 (10만)&quot;) + theme_void() + theme(legend.position = c(.85, .25)) ggplot() + geom_polygon(data=Vote_Moon, aes(x=long, y=lat, group=group, fill = round(n_vote/100000))) + labs(fill = &quot;득표수 (10만)&quot;) + scale_fill_gradient(low=&#39;white&#39;, high=&#39;#004ea2&#39;) 4.2.2 홍준표 후보 득표수 홍준표 후보 득표수 데이터 세트 생성 Vote_Hong &lt;- vote %&gt;% filter(name == &quot;Hong_J&quot;) 홍준표 후보 득표수 지도 그리기 ggplot() + geom_polygon(data = Vote_Hong, aes(x = long, y = lat, group = group, fill = round(n_vote/100000)), color = &quot;gray&quot;) + # 구 경계 테두리 선 색깔 scale_fill_gradient(low = &quot;white&quot;, high = &quot;#004ea2&quot;, space = &quot;Lab&quot;, guide = &quot;colourbar&quot;) + labs(fill = &quot;득표수 (10만)&quot;) + theme_void() + theme(legend.position = c(.85, .25)) ggplot() + geom_polygon(data=Vote_Hong, aes(x=long, y=lat, group=group, fill = round(n_vote/100000))) + labs(fill = &quot;득표수 (10만)&quot;) + scale_fill_gradient(low=&#39;white&#39;, high=&#39;#004ea2&#39;) 4.3 viridis 패키지 활용 4.3.1 패키지 불러오기 # install.packages(&quot;viridis) library(viridis) ## Loading required package: viridisLite 4.3.2 전체 후보자 ggplot() + geom_polygon(data = vote, aes(x = long, y = lat, group = group, fill = round(n_vote/100000)), # 득표수 color = &quot;gray&quot;) + facet_wrap(vars(name)) + # 후보자별 구분 labs(fill = &quot;득표수 (10만)&quot;) + scale_fill_viridis(direction = -1) 4.3.3 문재인 후보 ggplot() + geom_polygon(data = Vote_Moon, aes(x = long, y = lat, group = group, fill = round(n_vote/100000)), # 득표수 color = &quot;gray&quot;) + labs(fill = &quot;득표수 (10만)&quot;) + scale_fill_viridis(direction = -1) 4.3.4 홍준표 후보 ggplot() + geom_polygon(data = Vote_Hong, aes(x = long, y = lat, group = group, fill = round(n_vote/100000)), # 득표수 color = &quot;gray&quot;) + labs(fill = &quot;득표수 (10만)&quot;) + scale_fill_viridis(direction = -1) "]]
