[["index.html", "Data Visualization with R 서문", " Data Visualization with R Dae Ho Kim 2021-2-12, (updated: 2021-05-14) 서문 R Studio v 1.4는 새로운 시각적인 Markdown 편집 모드를 제공합니다. 자세한 내용은 R Studio Visual R Markdown 사이트를 참고하기 바랍니다. 이 사이트에서 R Studio Preview Release의 데스크 톱 버전을 다운로드 받을 수 있습니다. Creative Commons License The online version of this book is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License. "],["데이터-시각화.html", "0.1 데이터 시각화", " 0.1 데이터 시각화 0.1.1 강의 소개 0.1.2 강의 일정 주 내용 비고 1 강의소개, 강의일정, 강의평가 방법 등Part 1 : 1 R 왜 그래프/시각화인가?Part 1 : 2 R 그래프 패키지 소개 LIVE 강의 2 R Markdown 문서 작성 (1) LIVE 강의 3 [Part 2] 제1장 높은 수준의 그래프 함수 LIVE 강의 4 [Part 1] R Markdown 문서 작성 (2) LIVE 강의 5 [Part 2] 제2장 그래프 모수 LIVE 강의 6 [Part 2] 제3장 그래프 영역제4장 낮은 수준의 그래프 함수 (1) LIVE 강의 7 {Part 2] 제4장 낮은 수준의 그래프 함수 (2) LIVE 강의 8 중간고사 9 [Part 3] 제1장 일변량 연속형 그래프 LIVE 강의 10 [Part 3] 제2장 일변량 범주형 그래프 LIVE 강의 11 [Part 3] 제3장 다변량 범주형 그래프 LIVE 강의 12 [Part 3] 제4장 다변량 연속형 그래프 (1) LIVE 강의 13 [Part 3] 제4장 다변량 연속형 그래프 (2) LIVE 강의 14 [Part 3] 제4장 다변량 연속형 그래프 (3) LIVE 강의 15 기말고사 0.1.3 강의평가 방법 중간 고사 : 40% 기말 고사 : 40% 출석 점수 : 15% (결석 1회 : -1점, 지각 1회 : -0.5점) 자기주도학습 점수: 5% "],["r-왜-그래프시각화인가-why-graphsvisualization.html", "1 R 왜 그래프/시각화인가? (Why Graphs/Visualization?)", " 1 R 왜 그래프/시각화인가? (Why Graphs/Visualization?) 데이터 분석을 시작할 때 가장 처음 하는 일이 탐색적 데이터 분석(EDA, Exploratory Data Analysis) 입니다. 탐색적 데이터 분석을 할 때 데이터 형태와 구조를 파악하고, 많은 요약/기술 통계치도 뽑아보고, 그래프도 그려보면서 데이터의 형태와 특성, 분포 등을 파악하곤 합니다. 즉, 데이터 분석의 시작은 그래프라고 해도 관언이 아니겠습니다. R의 장점 중에 하나가 바로 출판물에 사용해도 좋을 만큼 미적으로도 아름다우면서도 어떤 모양, 조건으로도 그래프를 그려서 인사이트를 뽑아내기에 유용한 다양한 그래프/시각화를 지원한다는 점입니다. R의 강력한 그래프/시각화 기능 때문에 R을 이용한다고 하는 사용자도 있을 정도니깐요. "],["왜-그래프시각화가-중요할까요.html", "1.1 왜 그래프/시각화가 중요할까요?", " 1.1 왜 그래프/시각화가 중요할까요? 그래프/시각화는 숫자나 표보다 직관적으로 이해하기가 쉽습니다.** 그래프/시각화가 이해하기 쉬우므로 의사소통하기에도 쉽고 효과적입니다. 마치 몇 페이지의 호소문이나 사설보다 한 장의 역사 사진이 사람들에게 울림이 더 큰 경우가 있듯이요. 자칫 통계치만을 뽑아보고 의사결정했을 때 자칫 오류를 범할 수 있는데요, 이때 그래프/시각화를 통해 데이터의 분포, 형태나 변수간의 관계에 대해서 중요한 통찰을 얻을 수 있습니다. "],["그래프-분석의-예.html", "1.2 그래프 분석의 예", " 1.2 그래프 분석의 예 영국의 통계학자 Francis Anscombe 가 “Graphs in Statistical Analysis”(1973년)라는 논문 (링크를 클릭하면 pdf 다운로드 가능)에서 왜 통계분석을 할 때 반드시 통계치 뿐 만 아니라 그래프 분석을 병행해야 하는지를 보여주는 데이터 예를 듭니다. (x1, y1), (x2, y2), (x3, y3), (x4, y4) 변수들로 구성된 4개 그룹이 있는데요, x1~x4, y1~y4 끼리 평균, 표준편차가 같고, (x1, y1), (x2, y2), (x3, y3), (x4, y4) 변수들 간의 상관계수와 회귀모형이 같습니다. 이정도면 같은 모집단에서 뽑은 같은 성격/특징/형태를 보이는 4개의 표본이라고 지레짐작하기 쉬운데요, 그래프를 그려보면 4개의 표본이 날라도 너무 달라서 깜짝 놀라게 됩니다. He later became interested in statistical computing, and stressed that *“a computer should make both calculations and graphs”*, and illustrated the importance of graphing data with four data sets now known as Anscombe’s quartet * source: https://en.wikipedia.org/wiki/Frank_Anscombe R에 base패키지인 datasets 패키지에 ’anscombe’라는 데이터 프레임이 기본 탑재되어 있는 데이터 세트이어서 쉽게 불러다가 예시를 들어보겠습니다. str()함수로 데이터 구조를 보니 8개 변수에 11개 관측치로 구성되어 있는 데이터 프레임이고, x1, x2, x3, x4, y1, y2, y3, y4 모두 숫자형(numeric) 변수들이군요. ## Anscombe&#39;s Quartet of ‘Identical’ Simple Linear Regressions # Four x-y datasets which have the same traditional statistical properties # (mean, variance, correlation, regression line, etc.), # yet are quite different. # 데이터 구조 str(anscombe) ## &#39;data.frame&#39;: 11 obs. of 8 variables: ## $ x1: num 10 8 13 9 11 14 6 4 12 7 ... ## $ x2: num 10 8 13 9 11 14 6 4 12 7 ... ## $ x3: num 10 8 13 9 11 14 6 4 12 7 ... ## $ x4: num 8 8 8 8 8 8 8 19 8 8 ... ## $ y1: num 8.04 6.95 7.58 8.81 8.33 ... ## $ y2: num 9.14 8.14 8.74 8.77 9.26 8.1 6.13 3.1 9.13 7.26 ... ## $ y3: num 7.46 6.77 12.74 7.11 7.81 ... ## $ y4: num 6.58 5.76 7.71 8.84 8.47 7.04 5.25 12.5 5.56 7.91 ... 관측치가 11개 밖에 안되므로 모두 불러와 보면 아래와 같습니다. 이처럼 숫자만 봐서는 데이터 분포, 특성, 변수간 관계가 어떠한 지 한눈에 안들어오고 이해가 잘 안되지요? # 데이터 View View(anscombe) 이럴 때 보통 기술 통계치을 보곤 하지요. 중심화 경향을 나타내는 평균과 퍼짐 정도를 나타내는 표준편차를 살펴보겠습니다. x1~x4 의 평균과 표준편차가 같고, y1~y4의 평균과 표준편차가 같게 나왔습니다. # 변수별 평균, 표준편차 options(digits = 2) # 소수점 자리 설정 sapply(anscombe, mean) ## x1 x2 x3 x4 y1 y2 y3 y4 ## 9.0 9.0 9.0 9.0 7.5 7.5 7.5 7.5 sapply(anscombe, sd) ## x1 x2 x3 x4 y1 y2 y3 y4 ## 3.3 3.3 3.3 3.3 2.0 2.0 2.0 2.0 이번에는 (x1, y1), (x2, y2), (x3, y3), (x4, y4)변수들 간의 상관계수를 살펴보겠습니다. 4개 집단 모두 상관계수가 0.82로 동일하게 나왔습니다. # x, y 상관계수 (x, y correlation) attach(anscombe) cor(x1, y1) ## [1] 0.82 cor(x2, y2) ## [1] 0.82 cor(x3, y3) ## [1] 0.82 cor(x4, y4) ## [1] 0.82 detach(anscombe) 다음으로 4개의 각 집단별로 종속변수 y, 독립변수 x 로 해서 lm() 함수를 이용하여 단순 회귀모형을 적합시켜보겠습니다. 결과는 4개 집단 모두 y = 3.0 + 0.5*x 로 나왔습니다. (y절편 3.0, 변수 x의 계수 0.5) # Simple Linear Regrassions by 4 groups ` attach(anscombe) # The following objects are masked from anscombe (pos = 3): # x1, x2, x3, x4, y1, y2, y3, y4 ` lm(y1 ~ x1) ## ## Call: ## lm(formula = y1 ~ x1) ## ## Coefficients: ## (Intercept) x1 ## 3.0 0.5 lm(y2 ~ x2) ## ## Call: ## lm(formula = y2 ~ x2) ## ## Coefficients: ## (Intercept) x2 ## 3.0 0.5 lm(y3 ~ x3) ## ## Call: ## lm(formula = y3 ~ x3) ## ## Coefficients: ## (Intercept) x3 ## 3.0 0.5 lm(y4 ~ x4) ## ## Call: ## lm(formula = y4 ~ x4) ## ## Coefficients: ## (Intercept) x4 ## 3.0 0.5 위에 살펴본 바를 종합해 보면, 4개 집단의 x변수들의 평균, 표준편차가 같고, y변수들의 평균, 표준편차가 같습니다. 4개 집단의 x변수와 y변수들 간의 상관계수가 동일합니다. 4개 집단의 x독립변수와 y종속변수간 단순회귀모형 적합결과 x변수 계수와 y절편 값이 같은 동일 모델로 적합되었습니다. 이쯤되면 4개 집단의 x, y 변수 데이트들이 동일한 모집단에서 랜덤하게 추출된 동일한 형태/분포/특성을 지닌 데이터라고 믿어도 되지않겠습니까? 그런데, 그게 아닙니다. 아래의 4개 그룹별 x변수, y변수 산포도를 살펴보시지요. # Scatter Plot &amp; Simple Linear Regression Line par(mfrow = c(2,2)) # 2 x 2 layout attach(anscombe) ## The following objects are masked from anscombe (pos = 3): ## ## x1, x2, x3, x4, y1, y2, y3, y4 # The following objects are masked from anscombe (pos = 3): x1, x2, x3, x4, y1, y2, y3, y4 plot(x1, y1); abline(lm(y1~x1), col = &quot;blue&quot;, lty = 3) plot(x2, y2); abline(lm(y2~x2), col = &quot;blue&quot;, lty = 3) plot(x3, y3); abline(lm(y3~x3), col = &quot;blue&quot;, lty = 3) plot(x4, y4); abline(lm(y4~x4), col = &quot;blue&quot;, lty = 3) Figure 1.1: anscombe 데이터 세트의 산포도 비교 detach(anscombe) 그래프를 그려서 눈으로 보니 4개 집단이 다르지요? 통계치들은 이 4개의 집단이 같다고 말하고 있지만, 그래프는 이 4개 집단이 다르다고 말하고 있습니다. 이래서 서양 표현에 “One Look Is Worth A Thousand Words” 말이 있는 거지요. "],["한스-로즐링의-dynamic-visualization.html", "1.3 한스 로즐링의 Dynamic Visualization", " 1.3 한스 로즐링의 Dynamic Visualization 시각화가 왜 중요한지, 왜 인사이트를 뽑아내는데, 효과적인지, 왜 그동안 몰랐던 사실을 발견하는데 큰 역할을 하는지에 대한 사례를 하나 더 들자면, TED에서 유명인사가 된 한스 로즐링(Hans Rosling)의 Dynamic Visualization을 들고 싶습니다. Youtube에서 “TED &amp; Hans Rosling” 이라는 키워드로 검색을 해보면 많은 동영상이 검색이 될거예요. 그중에 하나를 아래에 링크를 걸어놓습니다. 연도별로 그래프가 움직이면서 변화하는데요, 시간이라는 차원을 그래프에 녹여낸 아주 기가 막힌 시각화 방법이 되겠습니다. 거기다가 한스 로즐링의 열정적인 설명까지 곁들여져서 한편의 인상적인 통계학 공연이 완성이 됩니다. ^^ 마음 편하게 한번 감상해 보시지요. (아래 동영상 말고도 한스 로즐링거의 동영상이 많이 있습니다) 이밖에도 구글 지도에 매쉬업을 해서 시각화를 한다든지, 소셜 네트워크 분석을 한다든지, 워드 클라우드 분석을 한다든지, 타이타닉 생존자에 대한 모자이크 그림 분석을 한다든지, 회귀분석을 하기 전 변수들 간 산포도 행렬 그래프 분석을 한다든지, 정규성 가정 검증을 위해 Q-Q plot을 그려본다든지, 분포 형태를 파악하기 위해 히스토그램이나 박스그림을 그려본다든지, 등, 등, 등 … 그래프/시각화가 얼마나 중요한지, 왜 필요한지를 알 수 있는 사례, 예시는 무수히 많습니다. 앞으로 하나씩 차근차근 포스팅을 해나가도록 하겠습니다. 여기서 이 과정이 추구하는 최종적인 결론은 “반드시 그래프/시각화를 병행하라!” 가 됩니다. "],["r-그래프-패키지-소개-graphics-lattice-ggplot2.html", "2 R 그래프 패키지 소개 (Graphics, Lattice, ggplot2)", " 2 R 그래프 패키지 소개 (Graphics, Lattice, ggplot2) R에는 다양한 그래프 패키지들이 있는데요, 그 중에서도 가장 많이 사용되는 패키지 3개를 들자면 Base Graphics package(Base package로서 별도 설치 필요 없음), Lattice package(별도 설치/호출 필요), ggplot2 package(별도 설치/호출 필요) 를 꼽을 수 있습니다. 시중에 나와 있는 많은 수의 R 관련 책에서는 Base Graphics package를 가지고 R 그래프 소개를 많이 하고 있는 편이구요, R 그래프/시각화 전문 책에서는 ggplot2에 무게 중심을 두고 쓰여진 책이 많은 편인데요, 제2부에서 Base Graphics 패키지가가 제공하는 각종 그래픽 함수들에 대하여 살펴 보겠습니다. 그리고 제3부에서는 ggplot2를 중심으로 ’R 그래프/시각화’를 학습해 보려고 합니다. Lattice 패키지에 대하여는 기회가 있을 때 참고용으로 간략히 소개하도록 하겠습니다. [ R 그래프 패키지 ] Figure 2.1: R 그래프 패키지 "],["주요-그래프용-패키지.html", "2.1 주요 그래프용 패키지", " 2.1 주요 그래프용 패키지 일단 Base Graphics, Lattice, ggplot2 패키지들에 대해 간략히 장단점을 짚어보고 (표 2.1 참고), 패키지들의 설치 방법에 대하여 간략히 소개하겠습니다. Table 2.1: 그래픽 패키지의 개발자와 장/단점. package author 장점 단점 Base Graphics R Core Team and contributors worldwide - 별도 설치/호출 필요 없음- 쉽고 편함- 사람이 생각하는 방식처럼 순차적으로 그래프를 쌓아감 - 한번 실행하면 취소 못함- 미리 계획 필요 (예: 세로 축 scale) Lattice Deepayan Sarkar - 전체 데이터를 보고 세로축, 마진, 여백 자동 계산 편리- 여러개 그래프를 동시에 하나의 화면에 그릴때 편리 - 순차적으로 그래프 쌓아가는 것 안됨- 직관적이지 못함 ggplot2 Hadley Wickham - Base Graphics 와 Lattice의 장점만 골라놨음- 그래프 문법에 따라 체계적, 통계적 조건 등 부여하여 고급 그래프 생성 가능 - 처음 배우기가 상대적으로 어려움 (단, 일단 문법이 익으면 그때부터는 생산성 더 높음) 위 표 2.1 에서 언급했듯이 ggplot2가 Base Graphics의 interactive하게 하나씩 생각하고, 그려보고, 눈으로 확인하고, 그래프 위에 하나 더 쌓아서 그려보고…하는 직관적인 방식의 장점과, Lattice의 여러 개의 집단 전체 데이터의 범위를 보고 축/마진/여백 등을 자동 설정해주는 등의 편리함의 장점을 따다가 ‘그래프 문법(Grammer of Graphics)’이라는 체계적인 방식으로 만들어진 패키지입니다. 이 ggplot2 패키지는 tidyverse 패키지의 일원으로서 상당히 다양한 분야에서 널리 이용되고 있는 패키지이기도 합니다. 그래프의 문법(Grammer of Graphics)라고 말씀드렸는데요, 그래프를 그리는 데에도 “동사(Verb),” “명사(Noun),” “형용사(Adjective)”라는 체계를 갖추어 문법을 만들었다고 보면 되겠습니다. ggplot2 패키지의 구성요소에 대하여 간략히 소개하면 다음의 그림 2.2 과 같습니다. Figure 2.2: ggplot2 구성요소 "],["패키지의-설치.html", "2.2 패키지의 설치", " 2.2 패키지의 설치 base Graphics 패키지는 R을 설치할 때 자동으로 설치되는 기본 패키지이 입니다. 반면에 lattice 패키지와 ggplot2 패키지는 별도로 다음과 같이 install.packgaes() 함수를 이용하여 패키지를 여러분의 컴퓨터에 다운받아 설치한 다음, 사용하고자 하는 스크립트에서 해당 패키지를 사용하고자 할 경우에 library() 함수를 이용하여 패키지를 불러와야 합니다. lattice와 ggplot2패키지 설치 및 패키지 호출은 아래와 같이 하면 됩니다. ## lattice 패키지 설치/호출 # install.packages(&quot;lattice&quot;) library(lattice) ## ggplot2 패키지 설치/호출 # install.packages(&quot;ggplot2&quot;) library(ggplot2) 참고자료 https://rfriend.tistory.com/65?category=605866 https://rfriend.tistory.com/66?category=605866 "],["base-graphics의-주요-함수.html", "3 Base Graphics의 주요 함수", " 3 Base Graphics의 주요 함수 hist() boxplot() stem() barplot() dotchart() pie() plot() 각 함수에 대한 사용방법은 ? 함수명 또는 ?? 함수명으로 확인할 수 있다. (예, ? hist, ?? stem) R의 plotting system에는 크게 (1) Base Graphics, (2) Lattice, (3) ggplot2 의 3가지가 있습니다. 이전 장에서 ggplot2 plotting system을 활용한 그래프 그리기를 간단히 소개하였다면, 이제부터는 쉽고 빠르게, 대화형으로 직관적으로 그래프를 단계적으로 그려나갈 수 있는 Base Graphics plotting system에 대해서 알아보겠습니다. Base Graphics system 은 그래프의 기본 뼈대에 해당하는 (1) 높은 수준의 그래프 함수 (High Level Graphics facilities), 여기에 살을 하나, 둘씩 차근 차근 더해가는 (2) 낮은 수준의 그래프 함수 (Low Level Graphics facilities), 색깔이나 모양, 선 형태, 마진 등의 다양한 그래프 특성에 해당하는 옵션을 설정하는 (3) 그래픽 모수 (Graphic Parameters) 를 조합하여 단계적으로 (step by step) 그래프를 대화형으로 그려나가게 됩니다. Figure 3.1: Base Graphics system 아래에 산포도(scatter plot)를 가지고 위에서 소개한 용어들이 의미하는 바를 예를 들어 설명해보도록 하겠습니다. library(MASS) attach(Cars93) ## The following object is masked _by_ .GlobalEnv: ## ## Cylinders # 1. high level graphics facility : plot() # graphics parameters : type, pch, col, etc. plot(MPG.highway ~ Weight, type = &quot;p&quot;, pch = 19, col = &quot;black&quot;) # 2. low level graphics facility : abline(), title(), text() # 3. graphics parameters : labels, cex, pos, col, etc. abline(lm(MPG.highway ~ Weight)) text(Weight, MPG.highway, labels = abbreviate(Manufacturer, minlength = 5), cex = 0.6, pos = 2, col = &quot;blue&quot;) Figure 3.2: base Graphics의 그래프 예 detach(Cars93) 위 그래프의 R함수에서 높은 수준의 그래프 함수, 낮은 수준의 그래프 함수, 그래프 모수에 해당하는 부분을 각 각 표기하면 아래와 같습니다. 높은 수준의 그래프 함수 plot()으로 먼저 뼈대를 잡아놓고, 낮은 수준의 그래프 함수 abline()로 차의 무게(Weight)와 고속도로연비(MPG.highway) 간 회귀선을 적합시킨 선을 추가하고 text()로 차 제조사 이름(Manufacturer)을 명기하였습니다. 이때 그래프 모수(parameters)로 그래프의 형태(type), 점의 형태(pch), 색깔(col), 레이블(labels), default 대비 확대 배수(cex), 다른 축과 교차되는 좌표(pos) 등을 옵션으로 설정하게 됩니다. Figure 3.3: R 스크립트의 그래프 구성 요소 주요한 높은 수준의 그래프 함수 (High Level Graphics facilities) 들을 표로 정리해보면 아래의 표 3.1와 같습니다. Table 3.1: 높은 수준의 그래프 함수 그래프 높은 수준의 그래프 함수 Histogram hist() Box-and-Whiskers Plot boxplot() Stem and Leaf Plot stem() Bar Plot barplot() Cleveland Dot Plot dotchart() Pie Plot pie() Scatter Plot plot() Scatter Plot Matrix plot() \" scatterplotMatrix() Line Plot plot(x, y, type = ‘l’) Hige Density Needle Plot plot(x, y, type = ‘h’) Both Dot and Line Plot plot(x, y, type = ‘b’) Overlapped Dot and Line Plot plot(x, y, type = ‘o’) Step Plot plot(x, y, type = ‘s’) Empty Plot plot(x, y, type = ‘n’) "],["높은-수준의-그래프-함수.html", "4 높은 수준의 그래프 함수", " 4 높은 수준의 그래프 함수 그래프 모수의 값들을 기본 값으로 하여 간단하게 그래프를 예로 들어보겠습니다. 그런데, 그래프를 그리기 전에 먼저 그래프로 표현하고자 하는 변수의 갯수와 그 변수의 데이터 유형(Data Type)을 잘 확인해야 합니니다. 이러한 변수의 개수와 데이터 유형에 따라 사용할 수 있는 그래프의 형태가 달라질 수 있습니다 (그림 4.1 참고). 변수의 갯수 1개 : 1변량 2개 이상 : 다변량 변수의 데이터 유형 범주형(factor) : 명목 척도(Cannonical Scale)의 데이터를 담고 있는 변수인 경우. 예, 성별(남, 여), 학년(1학년,2학년, 3학년, 4학년) 또는 서열 척도(Ordinal Scale) 연속형(numeric) : 등간 척도(Interval Scale), 비율 척도(ratio scale) 등의 정수형, 실수형 변수 Figure 4.1: 변수의 갯수와 데이터 유형별 그래프 종류 위의 그림 4.1 에서 보듯이, 변수의 갯수와 변수의 데이터 타입에 따라 적용하여 시각화할 수 있는 그래프의 형태가 달라짐을 알 수 있습니다. "],["데이터-세트-cars93.html", "4.1 데이터 세트 : Cars93", " 4.1 데이터 세트 : Cars93 데이터의 시각화를 위한 전체적인 예제 데이터로 MASS 패키지에 수록되어 있는 Cars93 데이터 세트를 사용합니다. 항상 데이터의 분석 또는 시각화에 앞서 데이터의 구조를 확인하는 것이 첫 번째 작업입니다. 다음은 Cars93 데이터 세트의 구조를 확인하는 스크립트입니다. library(MASS) str(Cars93) ## &#39;data.frame&#39;: 93 obs. of 27 variables: ## $ Manufacturer : Factor w/ 32 levels &quot;Acura&quot;,&quot;Audi&quot;,..: 1 1 2 2 3 4 4 4 4 5 ... ## $ Model : Factor w/ 93 levels &quot;100&quot;,&quot;190E&quot;,&quot;240&quot;,..: 49 56 9 1 6 24 54 74 73 35 ... ## $ Type : Factor w/ 6 levels &quot;Compact&quot;,&quot;Large&quot;,..: 4 3 1 3 3 3 2 2 3 2 ... ## $ Min.Price : num 12.9 29.2 25.9 30.8 23.7 14.2 19.9 22.6 26.3 33 ... ## $ Price : num 15.9 33.9 29.1 37.7 30 15.7 20.8 23.7 26.3 34.7 ... ## $ Max.Price : num 18.8 38.7 32.3 44.6 36.2 17.3 21.7 24.9 26.3 36.3 ... ## $ MPG.city : int 25 18 20 19 22 22 19 16 19 16 ... ## $ MPG.highway : int 31 25 26 26 30 31 28 25 27 25 ... ## $ AirBags : Factor w/ 3 levels &quot;Driver &amp; Passenger&quot;,..: 3 1 2 1 2 2 2 2 2 2 ... ## $ DriveTrain : Factor w/ 3 levels &quot;4WD&quot;,&quot;Front&quot;,..: 2 2 2 2 3 2 2 3 2 2 ... ## $ Cylinders : Factor w/ 6 levels &quot;3&quot;,&quot;4&quot;,&quot;5&quot;,&quot;6&quot;,..: 2 4 4 4 2 2 4 4 4 5 ... ## $ EngineSize : num 1.8 3.2 2.8 2.8 3.5 2.2 3.8 5.7 3.8 4.9 ... ## $ Horsepower : int 140 200 172 172 208 110 170 180 170 200 ... ## $ RPM : int 6300 5500 5500 5500 5700 5200 4800 4000 4800 4100 ... ## $ Rev.per.mile : int 2890 2335 2280 2535 2545 2565 1570 1320 1690 1510 ... ## $ Man.trans.avail : Factor w/ 2 levels &quot;No&quot;,&quot;Yes&quot;: 2 2 2 2 2 1 1 1 1 1 ... ## $ Fuel.tank.capacity: num 13.2 18 16.9 21.1 21.1 16.4 18 23 18.8 18 ... ## $ Passengers : int 5 5 5 6 4 6 6 6 5 6 ... ## $ Length : int 177 195 180 193 186 189 200 216 198 206 ... ## $ Wheelbase : int 102 115 102 106 109 105 111 116 108 114 ... ## $ Width : int 68 71 67 70 69 69 74 78 73 73 ... ## $ Turn.circle : int 37 38 37 37 39 41 42 45 41 43 ... ## $ Rear.seat.room : num 26.5 30 28 31 27 28 30.5 30.5 26.5 35 ... ## $ Luggage.room : int 11 15 14 17 13 16 17 21 14 18 ... ## $ Weight : int 2705 3560 3375 3405 3640 2880 3470 4105 3495 3620 ... ## $ Origin : Factor w/ 2 levels &quot;USA&quot;,&quot;non-USA&quot;: 2 2 2 2 2 1 1 1 1 1 ... ## $ Make : Factor w/ 93 levels &quot;Acura Integra&quot;,..: 1 2 4 3 5 6 7 9 8 10 ... $ 다음에 변수명, 데이터 타입, 그리고 데이터 예를 보여주고 있습니다. (자세한 사항은 ? Cars93으로 출력되는 도움말을 확인합니다. 이 도움말에는 Cars93의 각 변수에 대한 설명 즉 메타 데이터를 제공합니다.) Card93의 데이터들은 다음의 표 4.1 와 같습니다. Table 4.1: Cars93 데이터 세트 Manufacturer Model Type Min.Price Price Max.Price MPG.city MPG.highway AirBags Acura Integra Small 13 16 19 25 31 None Acura Legend Midsize 29 34 39 18 25 Driver &amp; Passenger Audi 90 Compact 26 29 32 20 26 Driver only Audi 100 Midsize 31 38 45 19 26 Driver &amp; Passenger BMW 535i Midsize 24 30 36 22 30 Driver only Buick Century Midsize 14 16 17 22 31 Driver only Cars93 데이터 세트는 27개의 변수와 93개의 관측치 데이터로 구성됩니다. "],["일변량-연속형-데이터-그래프.html", "4.2 일변량 연속형 데이터 그래프", " 4.2 일변량 연속형 데이터 그래프 연속형 변수 1개를 그래프로 표시해 보겠습니다다. 그래프로 그릴 변수는 Cars93$MPG.highway 컬럼 한 개(일변량)로, 이 변수는 int 형의 연속형 변수임을 알 수 있습니다. 이 절에서의 일변량 연속형 데이터에 대하여 다음의 그래프를 그려 보기로 한다. 히스토그램 박스 플롯 줄기 잎 그래프 4.2.1 히스토그램 히스토그램은 이 변수의 최소값(min) ~ 최대값(max) 사이를 적당한 구간(bin 또는 class라고 함)으로 나누고, 각 구간에 속하는 데이터의 갯수를 그래프로 표시한 것입니다. library(MASS) # histogram : hist() hist(Cars93$MPG.highway, main = &quot;histogram : hist()&quot;) Figure 4.2: 일변량 연속형 데이터 그래프 : 히스토그램 히스토그램에서는 X축을 구성하는 구간을 결정하는 것이 매우 중요합니다. : breaks = 인수로 지정. 기본값은 Sturges 공식으로 구해진 구간을 사용합니다. X축의 구간은 hist() 함수의 breaks = 모수에서 지정할 수 있습니다. 이 breaks 모수의 값은 seq() 함수를 이용하여 설정할 수 있습니다. 이 때 seq() 함수의 length.out의 값으로 (구간의 수 + 1)의 값을 대입해 줍니다. # histogram : hist() hist(Cars93$MPG.highway, main = &quot;histogram : hist()&quot;, breaks = seq(20, 50, length.out = 11)) # 20 ~ 50 까지의 숫자로 10개 구간으로 히스토그램을 그립니다. Figure 4.3: 일변량 연속형 데이터 그래프 : 히스토그램의 구간 조절 xlab, ylab 등의 모수를 이용하여 x축과 y축의 제목을 변경할 수 있으며, ylim의 모수를 이용하여 y축의 값의 범위를 조절할 수 있습니다. 그리고 main 모수에 그래프의 제목을 지정할 수 있습니다. # histogram : hist() y &lt;- hist(Cars93$MPG.highway, xlab = &quot;고속 도로 연비&quot;, # x축의 제목을 설정합니다. ylab = &quot;빈도 수&quot;, # y축의 제목을 설정합니다. main = &quot;histogram : hist()&quot;) # 그래프의 제목을 설정합니다. Figure 4.4: 일변량 연속형 데이터 그래프 : 히스토그램 - 축 제목과 그래프 제목 히스토그램의 막대의 색을 col 모수에 지정할 수 있으며, 또한 ylim 으로 y축의 값의 범위를 지정할 수 있습니다. # histogram : hist() hist(Cars93$MPG.highway, main = &quot;histogram : hist()&quot;, col = topo.colors(6), # 막대의 색을 그라디에이션으로 지정합니다. ylim = c(0, 50)) # y축의 값의 범위를 지정합니다. Figure 4.5: 일변량 연속형 데이터 그래프 : 히스토그램 - 색/Y축 범위 지정 cm.color(6), heat.colors(6), rainbow(6), terrain.colors(6) 등의 그라디에이션 색상을 표현할 수도 있습니다. 한편 Y축을 빈도 수가 아닌 상대 빈도수(상대 도수)로 표시하기 위해서는 freq = FALSE로 설정해 줍니다. # histogram : hist() hist(Cars93$MPG.highway, main = &quot;histogram : hist()&quot;, col = topo.colors(6), freq = FALSE) # Y축의 값이 비율로 표시가 됩니다. Figure 4.6: 일변량 연속형 데이터 그래프 : 히스토그램 - 상대 도수 지금 작성한 상대 도수 분포도를 이용하여 확률분포도를 나타내는 커브를 lines(density()) 함수를 이용하여 중첩하여 표시할 수 있습니다. # histogram : hist() hist(Cars93$MPG.highway, main = &quot;histogram : hist()&quot;, col = topo.colors(6), freq = FALSE) # 밀도함수를 표시하기 위해 이 모수를 설정합니다. lines(density(Cars93$MPG.highway)) # 히스토그램 위에 밀도함수를 표시합니다. Figure 4.7: 일변량 연속형 데이터 그래프 : 히스토그램 - 밀도함수 표시 자세한 사용방법은 ? hist로 확인할 수 있습니다. Go Top 4.2.2 박스 플롯 박스 플롯(Box-and-Whiskers Plot)을 사용하는 이유는 많은 데이터를 눈으로 확인하기 어려울 때 그림을 이용해 데이터 집합의 범위와 중앙값을 빠르게 확인할 수 있는 목적으로 사용합니다. 또한 통계적으로 이상치(outlier)가 있는지도 확인이 가능합니다. 박스 플롯은 수치적 자료를 표현하는 그래프입니다. 이 그래프는 자료에서 얻은 다섯 수치 요약(five number summary)을 가지고 그립니다. 다섯 수치 요약은 아래와 같습니다. 최솟값 : 제 1사분위에서 1.5 IQR1을 뺀 위치입니다. min(x) 제1사분위(Q1) : 25%의 위치를 의미합니다. 제2사분위(Q2) : 50%의 위치로 중앙값(median)을 의미합니다. 제3사분위(Q3) : 75%의 위치를 의미합니다. 최댓값 : 제3사분위에서 1.5 IQR을 더한 위치입니다. max(x) 최솟값과 최댓값을 넘어가는 위치에 있는 값을 이상치(Outlier)라고 부릅니다. # box-and-whisker plot : boxplot() boxplot(Cars93$MPG.highway, main = &quot;box-and-whisker plot : boxplot()&quot;) Figure 4.8: 일변량 연속형 데이터 그래프 : 박스 플롯 박스 플롯의 경우에도 xlab, ylab 등을 이용하여 축의 이름을 설정할 수 있습니다. main 모수에 그래프의 제목을 설정할 수 있습니다. 또한 color의 모수에 색깔을 지정할 수도 있습니다. # box-and-whisker plot : boxplot() boxplot(Cars93$MPG.highway, xlab = &quot;고속 도로 연비&quot;, ylab = &quot;빈도 수&quot;, col = &quot;blue&quot;, main = &quot;box-and-whisker plot : boxplot()&quot;) Figure 4.9: 일변량 연속형 데이터 그래프 : 박스 플롯 - 축 제목과 색 시정 notch = TRUE 옵션을 설정해서 V 자형 박스 플롯을 그릴 수 있습니다. # box-and-whisker plot : boxplot() boxplot(Cars93$MPG.highway, xlab = &quot;고속 도로 연비&quot;, ylab = &quot;빈도 수&quot;, col = &quot;blue&quot;, notch = TRUE, # V 자형을 박수를 표시해 줍니다. main = &quot;box-and-whisker plot : boxplot()&quot;) Figure 4.10: 일변량 연속형 데이터 그래프 : V 자형 박스 플롯 horizontal=TRUE 옵션을 설정해서 수평 박스 플롯을 그릴 수 있습니다. # box-and-whisker plot : boxplot() boxplot(Cars93$MPG.highway, xlab = &quot;고속 도로 연비&quot;, ylab = &quot;빈도 수&quot;, col = &quot;blue&quot;, notch = TRUE, horizontal = TRUE, # 박스 플롯을 수평으로 그려줍니다. main = &quot;box-and-whisker plot : boxplot()&quot;) Figure 4.11: 일변량 연속형 데이터 그래프 : 수평 박스 플롯 한편, 범주형 변수인 자동차 유형(Type) 별로 박스 플롯을 그릴 수도 있습니다. # box-and-whisker plot : boxplot() boxplot(Cars93$MPG.highway ~ Cars93$Type, # x축: Type 변수, y축 : MPG.highway 변수 xlab = &quot;고속 도로 연비&quot;, ylab = &quot;빈도 수&quot;, col = rainbow(6), # Type 변수의 수준 갯수 만큼 색을 표시합니다. main = &quot;box-and-whisker plot : boxplot()&quot;) Figure 4.12: 박스 플롯 - 범주형 변수와의 결합 자세한 사용방법은 ? boxplot으로 확인할 수 있습니다. Go Top 4.2.3 줄기 잎 그래프 줄기 잎 그림(Stem-and-leaf plot 또는 stem-and-leaf display)이란 통계학에서 통계적 자료를 표 형태와 그래프 형태의 혼합된 방법으로 나타내는 것을 말합니다. 표에서의 줄기(Stem)는 자료들의 공통되는 부분을 모아놓게 되며, 잎(leaf)은 줄기 부분의 나머지 부분을 모아둡니다. 도수(Frequency 또는 Count는 한 줄기에 속하는 자료의 개수를 의미합니다. library(MASS) # stem and leaf plot : stem() stem(Cars93$MPG.highway) ## ## The decimal point is 1 digit(s) to the right of the | ## ## 2 | 00112233334444 ## 2 | 55555555666666666667777778888888888999999 ## 3 | 000000000111111123333333444 ## 3 | 6667778 ## 4 | 13 ## 4 | 6 ## 5 | 0 위의 그림에서 최소값이 20, 최대값이 50임을 알 수 있습니다. 줄기 잎 그래프도 줄기의 갯수는 scale 모수를 이용하여 조절할 수 있습니다. 예를 들어 scale = 0.5로 하면 줄기의 갯수가 반으로 줄어듭니다. scale = 2로 하면 줄기의 갯수가 2배로 늘어납니다. # stem and leaf plot : stem() stem(Cars93$MPG.highway, scale = 0.5) # 줄기의 갯수를 반으로 줄입니다. ## ## The decimal point is 1 digit(s) to the right of the | ## ## 2 | 0011223333444455555555666666666667777778888888888999999 ## 3 | 0000000001111111233333334446667778 ## 4 | 136 ## 5 | 0 stem(Cars93$MPG.highway, scale = 2) # 줄기의 갯수를 두 배로 늘립니다. ## ## The decimal point is at the | ## ## 20 | 0000 ## 22 | 000000 ## 24 | 000000000000 ## 26 | 00000000000000000 ## 28 | 0000000000000000 ## 30 | 0000000000000000 ## 32 | 00000000 ## 34 | 000 ## 36 | 000000 ## 38 | 0 ## 40 | 0 ## 42 | 0 ## 44 | ## 46 | 0 ## 48 | ## 50 | 0 width 모수를 이용하여 잎의 폭을 조절할 수도 있습니다. # stem and leaf plot : stem() stem(Cars93$MPG.highway, width = 20) ## ## The decimal point is 1 digit(s) to the right of the | ## ## 2 | 00112233 ## 2 | 55555555+21 ## 3 | 00000000+7 ## 3 | 6667778 ## 4 | 13 ## 4 | 6 ## 5 | 0 stem(Cars93$MPG.highway, width = 40) ## ## The decimal point is 1 digit(s) to the right of the | ## ## 2 | 00112233334444 ## 2 | 5555555566666666666777777888+1 ## 3 | 000000000111111123333333444 ## 3 | 6667778 ## 4 | 13 ## 4 | 6 ## 5 | 0 stem(Cars93$MPG.highway, width = 60) ## ## The decimal point is 1 digit(s) to the right of the | ## ## 2 | 00112233334444 ## 2 | 55555555666666666667777778888888888999999 ## 3 | 000000000111111123333333444 ## 3 | 6667778 ## 4 | 13 ## 4 | 6 ## 5 | 0 자세한 사항은 ? stem으로 확인할 수 있습니다. Go Top "],["일변량-범주형-데이타-그래프.html", "4.3 일변량 범주형 데이타 그래프", " 4.3 일변량 범주형 데이타 그래프 범주형의 변수 1개에 대한 그래프를 그려 보겠습니다. 사용하는 변수는 Cars93$Cylinders 컬럼 한 개(일변량)로, 이 변수는 6개의 수준을 갖는 Factor 형 변수 즉, 범주형 변수임을 알 수 있습니다. 이 절에서의 일변량 범주형 데이터에 대하여 다음의 그래프를 그려 보기로 한다. 막대 그래프 클리브랜드 점 그래프 파이 차트 특히 여기에서 사용되는 함수들의 첫 번째 인수는 모두 table() 함수를 이용한 도수분포표가 된다는 것을 주의하기 바랍니다. 4.3.1 막대 그래프 막대 그래프(bar graph)는 바 차트(bar chart), 바 그래프(bar graph) 등으로도 불리며, barplot() 함수를 이용하여 막대 그래프를 그릴 수 있습니다. 막대 그래프는 명목형 변수 X를 전체 데이터의 값에 비례하여 높이와 갯수를 나타내는 직사각형의 막대로 표현하는 차트나 그래프를 말합니다. 막대는 수직 또는 수평으로 그릴 수 있습니다. barplot() 함수의 첫 번째 인수는 명목형 변수의 도수분포표입니다. 변수의 도수분포표는 table() 함수로 구할 수 있습니다. library(MASS) ##-------- plot for one variable, categorical data # bar plot : barplot() table_cyl &lt;- table(Cars93$Cylinders) # Cylinder 컬럼의 도수분포료 barplot(table_cyl, main = &quot;bar plot : barplot()&quot;) Figure 4.13: 일변량 범주형 데이터 그래프 : 막대 그래프 자세한 사용방법은 ? barplot으로 확인할 수 있습니다. [참고 : 바차트] Go Top 4.3.2 클리브랜드 점 그래프 클리브랜드 점 그래프(Cleveland dot plot)는 Cleveland 라는 사람이 제안한 형식의 그래프로 Base Graphics 패키지의 dotchart() 함수를 이용하여 그릴 수 있습니다. 이 그래프는 x축을 연속형 변수로, 그리고 y축을 명목형 변수로 표현한다. 그런데, 이 그래프에서 주요 변수는 Y축을 이루는 명목형 변수입니다. 앞에서 살펴본 막대 그래프의 X축과 Y축을 바꿔 놓고, 그림을 막대가 아닌 점으로 표현한 것이 클리브랜드 점 그래프입니다. Y축의 변수를 reorder() 함수 또는 sort() 함수를 이용하여 발생도수의 오름차순/내림차순으로 정렬할 수 있습니다. library(MASS) # cleveland dot plot : dotchart() # frequency table table_cyl &lt;- table(Cars93$Cylinders) # names for label Cylinders &lt;- names(table_cyl) dotchart(as.numeric(table_cyl), labels = Cylinders, main = &quot;cleveland dot plot&quot;) Figure 4.14: 일변량 범주형 데이터 그래프 : 클리브랜드 점 그래프 as.numeric(table_cyl)은 도수분포표의 발생 도수만을 벡터로 추출합니다. [참고사항] Cars93$Cylinders 컬럼의 도수분포표를 sort() 함수를 이용하여 발생 도수를 오름차순으로 정렬하고, 이를 인수로 하여 클리브랜드 점 그래프를 그려 보겠습니다. library(MASS) # cleveland dot plot : dotchart() # frequency table table_cyl_inc &lt;- sort(table(Cars93$Cylinders)) # 발생 도수의 오름차순 정렬 # names for label Cylinders &lt;- names(table_cyl_inc) dotchart(as.numeric(table_cyl_inc), labels = Cylinders, main = &quot;cleveland dot plot&quot;) Figure 4.15: 일변량 범주형 데이터 그래프 : 클리브랜드 점 그래프 (Sort) Y축은 순서가 중요하지 않은 범주형 데이터이기 때문에 X축의 발생 도수로 정렬하는 것도 의미가 있습니다. 자세한 사용방법은 ? dotchart로 확인할 수 있습니다. Go Top 4.3.3 파이 차트 파이 차트는 도수분포표를 비율로 나타낼 때 사용합니다. 전체를 100%라고 했을 때, 각각이 차지하는 비율을 한 눈에 볼 수 있게 시각화하는 것입니다. 역시 이 파이 차트를 그릴 떄도 기본적으로 범주형 변수를 인수로 하여 table() 함수로 구한 도수분포표가 됩니다. library(MASS) # pie chart : pie() table_cyl &lt;- table(Cars93$Cylinders) # frequency table Cylinders &lt;- names(table_cyl) # names for label pie(table_cyl, labels = Cylinders, main = &quot;pie chart&quot;) Figure 4.16: 일변량 범주형 데이터 그래프 : 파이 차트 자세한 사용방법은 ? pie로 확인할 수 있습니다. [참고 : 파이차트] Go Top "],["이변량-연속형-데이터-그래프.html", "4.4 이변량 연속형 데이터 그래프", " 4.4 이변량 연속형 데이터 그래프 연속형 변수 2개를 그래프로 표시해 보겠습니다. 사용하는 변수는 Cars93$Weight 컬럼과 Cars93$MPG.highway 컬럼 등 2(이변량)개로, 이 두 변수 모두 int 형의 연속형 변수임을 알 수 있습니다. 이 절에서의 이변량 연속형 데이터에 대하여 다음의 그래프를 그려 보기로 한다. 산포도 산포도 행렬 4.4.1 산포도 산포도(scatter plot) 또는 산점도라고도 합니다. 산포도는 x축과 y축으로 이루어진 그래프에 두 변수의 값을 점으로 나타낸 그래프입니다. 산포도를 이용하면 두 변수의 관계를 파악하는데 용이합니다. library(MASS) ##----- plot for 2 variables, continuous data # scatter plot : plot(x, y) with(Cars93, plot(Weight, MPG.highway, main = &quot;scatter plot : plot(x, y)&quot;)) Figure 4.17: 이변량 연속형 데이터 그래프 : 산포도 [참고 : X-Y 플로팅] Go Top 4.4.2 산포도 행렬 산포도 행렬은 3개 이상의 변수들간의 관계를 행렬 형태의 그래프로 시각화하는 것입니다. 아래의 예는 Cars93 데이터 세트 중 4개의 변수 간의 산포도를 행렬 형태로 보여주고 있습니다. Base Graphics 패키지의 plot() 함수와 car 패키지의 scatterplotMatrix() 함수의 사용을 예로 들어 보겠습니다. 먼저 Base Graphics 패키지의 plot() 함수를 이용한 4개 변수 간의 산포도 행렬을 작성하면 다음과 같습니다. library(MASS) # scatter plot matrix : plot(dataframe) Cars93_subset &lt;- Cars93[,c(&quot;Weight&quot;, &quot;Horsepower&quot;, &quot;MPG.highway&quot;, &quot;MPG.city&quot;)] plot(Cars93_subset, main = &quot;scatter plot matrix : plot(dataframe)&quot;) Figure 4.18: 다변량 연속형 데이터 그래프 : 산포도 행렬 또한 car 패키지의 scatterplotMatrix() 함수를 이용하면 다음과 같습니다. # scatter plot matrix : scatterplotMatrix(dataframe) # install.packages(&quot;car&quot;) library(car) ## Loading required package: carData scatterplotMatrix(Cars93_subset, main = &quot;scatter plot matrix : scatterplotMatrx(dataframe)&quot;) Figure 4.19: 다변량 연속형 데이터 그래프 : 산포도 행렬 자세한 사항은 ? scatterplotMatrix로 확인할 수 있습니다. Go Top 4.4.2.1 그래프 위의 데이터 모양 변경 그런데 plot() 함수는 기본적으로 데이터를 점(type = \"p\")으로 표현합니다. 다음 장에서 이들 모수에 대하여 자세히 살펴 볼 것입니다. 여기서는 여러 모수 중에서 type = 모수 부분를 변경하면서 그래프로 시각화해 보면 다음과 같습니다. library(MASS) ##-------- # plot by various type : l, h, b, o, s, n # order by Weight Cars93_1 &lt;- Cars93[order(Cars93$Weight),] # dividing window frame # plots by type attach(Cars93_1) ## The following object is masked _by_ .GlobalEnv: ## ## Cylinders types &lt;- c(&quot;p&quot;, &quot;l&quot;, &quot;b&quot;, &quot;c&quot;, &quot;o&quot;, &quot;h&quot;, &quot;s&quot;, &quot;S&quot;, &quot;n&quot;) # 다양한 type 옵션들 titles &lt;- c(&quot;type = &#39;p&#39;&quot;, &quot;type = &#39;l&#39;&quot;, &quot;type = &#39;b&#39;&quot;, &quot;type = &#39;c&#39;&quot;, &quot;type = &#39;o&#39;&quot;, &quot;type = &#39;h&#39;&quot;, &quot;type = &#39;s&#39;&quot;, &quot;type = &#39;S&#39;&quot;, &quot;type = &#39;n&#39; : Empty Graph&quot;) plot(MPG.highway ~ Weight, main = &quot;Default Type&quot;) # type을 지정하지 않은 경우의 기본 모양 Figure 4.20: 이변량 연속형 데이터 그래프 : 산포도 - 모양 변경 par(mfrow = c(3, 3)) for (i in 1:9) { plot(MPG.highway ~ Weight, type = types[i], main = titles[i]) } Figure 4.21: 이변량 연속형 데이터 그래프 : 산포도 - 모양 변경 detach(Cars93_1) par(mfrow = c(1, 1)) 이러한 높은 수준의 그래프 함수를 이용하여 바탕이 되는 그래프를 시각화해 줍니다. 그리고 높은 수준의 그래프 함수들은 공통의 모수와 고유한 모수를 이용하여 표현 형식을 설정할 수 있습니다. 또한 낮은 수준의 그래프 함수를 이용하여 그래프 위에 좀 더 다양한 정보를 표시할 수 있습니다. Go Top "],["이변량-범주형-데이터-그래프.html", "4.5 이변량 범주형 데이터 그래프", " 4.5 이변량 범주형 데이터 그래프 범주형 변수 2개를 그래프로 표시해 보겠습니다. 사용하는 변수는 Cars93$Origin 컬럼과 Cars93$AirBags 컬럼 등 2개(이변량)로, 이 두 변수 모두 factor 형의 범주형 변수임을 알 수 있습니다. 이 절에서의 이변량 범주형 데이터에 대하여 다음의 그래프를 그려 보기로 한다. 모자이크 그래프 4.5.1 모자이크 그래프 모자이크 플랏(mosaic plot)은 2원, 3원 교차표를 시각화한 그래프입니다. 모자이크 플랏에는 사각형들이 그래프에 나열되고 각 사각형의 넓이는 각 범주에 속한 데이터의 수 또는 상대적인 크기를 의미합니다. 따라서 x축과 y축의 제목을 보고 데이터를 추론할 수 있습니다. 4.5.1.1 Base Graphics 패키지 R의 Base Graphics 패키지에 모자이크 플랏을 그리는 함수는 mosaicplot() 함수입니다. 첫 번쨰 인수인 formula =는 범주형 변수들의 분할표를 구하는 변수의 목록입니다. 두 번째 인수인 data =는 데이터 세트를 지정해야 합니다. 이 두 개의 인수는 기본적으로 지정이 되어야 합니다. 사용할 data =는 MASS 패키지가 제공하는 Cars93으로 다음은 자동차 생산국을 나타내는 Origin과 생산국가별 에어백의 설치(AirBags)와 관련한 모자이크 그래프를 보여 주고 있습니다. library(MASS) mosaicplot(formula = ~ Origin + AirBags, data = Cars93, color = c(&quot;yellow&quot;, &quot;green&quot;, &quot;red&quot;), cex = 0.8) Figure 4.22: 이변량 연속형 데이터 그래프 : 모자이크 그래프 formula = ~ Origin + AirBags : X 축에는 ~ Origin에 의해 Origin 변수가 그리고 Y 축에는 + AirBags의 AirBags가 그래프에 표시됩니다. color = : Y 축에 표시되는 사각형의 색깔을 지정합니다. cex = : X 축과 Y 축의 데이터 글자의 크기를 지정합니다. Cars93의 Origin 변수와 AirBags 변수의 분할표(Cross Tables)는 table() 함수로 구할 수 있습니다. 그리고 분할표의 상대적 비율은 prop.table() 함수로 구할 수 있습니다. 두 범주형 변수 간의 분할표를 구해 보겠습니다. library(MASS) # Crosstabs of Orgin and AirBags tab &lt;- table(Cars93$Origin, Cars93$AirBags); tab # 분할표 생성 ## ## Driver &amp; Passenger Driver only None ## USA 9 23 16 ## non-USA 7 20 18 tab1 &lt;- proportions(tab, margin = 1) ; tab1 # 비율분할표 생성 (1 = 행 단위, 2 = 열 단위) ## ## Driver &amp; Passenger Driver only None ## USA 0.19 0.48 0.33 ## non-USA 0.16 0.44 0.40 table() : Origin과 AirBags 두 범주형 변수의 분할표를 구합니다. prop.table() 또는 proportions() : 분할표 tab을 인수로 해서 상대적 비율을 구합니다. 이때, 두 번째 인수 margin =이 1이면 행 단위로, 2면 열단위의 비율을 구합니다. 추가적으로 base datasets에서 제공하고 있는 Titanic 데이터 세트를 모자이크 그래프로 표시해 보겠습니다. Titanic 데이터 세트는 2,201 승객을 4개의 범주형 변수(Class, Sex, Age, Survived 등)로 분할하여 정리해 놓은 4차원 배열형태의 분할표입니다. (? Titanic으로 데이터 세트에 대한 내용을 확인해 보기 바랍니다.) mosaicplot(Titanic, # 데이터 입력 main = &quot;Survival on the Titanic&quot;, # 제목 설정 color = c(&quot;red&quot;,&quot;green&quot;), # 색 지정 off = 1) # 블럭들 사이의 간격 지정 Figure 4.23: 이변량 연속형 데이터 그래프 : 모자이크 그래프 - Titanic Go Top 4.5.1.2 vcd 패키지 한편 vcd 패키지가 제공하는 mosaic() 함수를 이용해서도 모자이크 그래프를 그릴 수 있으며, 또한 labelling = labelling_values 인수를 지정해서 사각형에 데이터 레이블을 표시할 수 있습니다. library(vcd) ## Loading required package: grid library(MASS) data(&quot;Titanic&quot;) mosaic(Titanic, labeling = labeling_values) Figure 4.24: 모자이크 그래프 - 데이터 레이블링 1 좀 더 깔끔하게 데이터 레이블링을 해 보겠습니다. library(vcd) tab &lt;- ifelse(Titanic &lt; 6, NA, Titanic) # 데이터 수정 : 6보다 작으면 `NA`처리 mosaic(Titanic, pop = FALSE) # 모자이크 그래프 그리기 labeling_cells(text = tab, margin = 0)(Titanic) # 데이터 레이블 표시하기 Figure 4.25: 모자이크 그래프 - 데이터 레이블링 2 상대적 비율의 모자이크 그래프를 그려 보겠습니다. mosaic(Titanic, pop = FALSE) labs &lt;- round(prop.table(Titanic), 2) # 상대적 비율로 데이터 레이블링 labeling_cells(text = labs, margin = 0, cex = 0.6)(Titanic) # 상대적 비율 표시 Figure 4.26: 모자이크 그래프 - 데이터 레이블링 3 Go Top "],["그래프-모수.html", "5 그래프 모수", " 5 그래프 모수 이전 장에서는 높은 수준의 그래프 함수 (high level graphic functions)와 관련한 내용을 살펴 보았습니다. 이번 장에서는 다음의 내용을 중심으로 살펴보도록 하겠습니다. 그래프 모수를 설정하는 2가지 방법 그래프 모수 : 기호(symbol), 선(line) 그래프 모수 : 색깔(color) "],["그래프-모수를-설정하는-2가지-방법.html", "5.1 그래프 모수를 설정하는 2가지 방법", " 5.1 그래프 모수를 설정하는 2가지 방법 이전 절에서 Base Graphics plotting system에서 그래프의 기본 골격을 생성하는 높은 수준의 그래프 함수 (High Level Graphics Function)에 대해서 알아보았습니다. 이번 절에서는 그래프의 기호, 선, 색깔, 마진, 영역 분할 등 그래프의 세부적인 옵션들을 설정하는 방법으로 ‘그래프 모수 (Graphical Parameters)’ 에 대해서 소개하겠습니다. 그래프 모수에는 72 가지가 있는데요, 전부 다루기에는 무리가 있어서 활용 빈도가 높다고 생각하는 항목들만을 선별해서 소개하겠습니다. R의 콘솔 창에 ‘? par’ 라고 입력하면 graphical parameter setting과 관련한 도움말을 확인할 수 있습니다. Figure 5.1: 그래프 모수 그래프 모수를 설정하는 방법에는 2가지가 있습니다. 첫 번째 방법은 par() 함수를 이용해서 이후에 생성하는 그래프 전체에 일괄적으로 동일하게 모수를 적용하여 글로벌 환경(global environment) 으로 설정하는 방법입니다 . 동일한 모수 설정치로 다수의 그래프를 그려야 하는 상황이라면 편리하게 사용할 수 있는 방법입니다. 일부 그래프 모수는 이 첫 번째 방법으로만 설정할 수 있습니다. (예: 영역분할 mfrow 등) 두 번째 방법은 그래프를 그릴 때마다 로컬 환경으로 매번 함수 내에서 그래프 모수를 일일이 지정해 주는 방법입니다. 그래프를 한 두개 그리고 말거나, 다수의 그래프를 그려야 하는데 모수 설정치가 매번 다르다면 두 번째 방법을 사용하는게 편하겠습니다. Figure 5.2: 그래프 모수를 설정하는 2가지 방법 5.1.1 글로벌 환경 설정 아래에 첫 번째 방법으로 par() 함수를 이용해서 그래프를 위한 글로벌 환경을 설정하는 방법에 대하여 살펴보겠습니다. 이 방법에서의 그래프 작성 절차는 다음과 같습니다. par() 함수의 모수에 글로벌 환경을 설정합니다. 높은 수준의 그래프 함수를 이용하여 그래프를 작성합니다. 5.1.1.1 데이터 세트 MASS 패키지에 내장되어 있는 Cars93 데이터프레임의 차무게(Weight)와 마력(Horsepower)과 고속도로연비(MPG.highway) 간의 관계를 알아보기 위해 산포도를 작성해 보겠습니다. library(MASS) str(Cars93) 5.1.1.2 par() 함수 도움말 보기 par() 함수에 대한 도움말은 다음과 같이 확인할 수 있습니다. par() 함수는 다양한 옵션들을 제공함을 알 수 있습니다. ##----------------------- ## Graphical Parameters # help on par() function ? par ## starting httpd help server ... done 5.1.1.3 글로벌 환경의 설정 par() 함수를 사용해서 글로벌 환경(global environment)을 설정한 다음에 다시 원래의 상태로 돌아올 필요가 있습니다. 이러한 상황에 대비하여 par(no.readonly = TRUE) 를 par_origin 이라는 객체에 할당해서 저장해 둡니다. 그런 다음, par() 함수를 이용하여 글로벌 환경 설정으로 위한 모수를 설정합니다. 이 예에서는 다음과 같이 2가지 모수를 글로벌 환경으로 설정하겠습니다. pch = 15 : “점”의 모양. (0 ~ 18 사이의 숫자) color = “blue” : “색”을 파란색으로 설정합니다 : 이러한 글로벌 환경에서 높은 수준의 그래프를 작성해 보겠습니다. 이를 위해 plot() 함수를 이용하겠으며, plot() 함수에 대해서도 다음과 같은 모수를 설정하겠습니다. 이러한 모수의 설정은 다음의 절에서 좀 더 자세히 살펴 보겠습니다. 첫 번째 모수로 변수를 지정합니다 : 그림 1 : MPG.highway ~ Weight 그림 2 : MPG.highway ~ Horsepower 두 번째 모수로 type 을 설정합니다 : type = p 세 번째 모수로 데이터 세트를 지정합니다 : Cars93 library(MASS) # method 1 : par() # 초기 설정의 저장 par_origin &lt;- par(no.readonly = TRUE) par(mfrow = c(1,2)) # 그래프 모수 설정 par(pch = 15, col = &quot;blue&quot;) plot(MPG.highway ~ Weight, type = &quot;p&quot;, Cars93) # X축 : Weight, Y축 : MPG.highway plot(MPG.highway ~ Horsepower, type = &quot;p&quot;, Cars93) # X축 : Horsepower, Y축 : MPG.highway Figure 5.3: 그래프 모수의 설정 : 글로벌 환경 설정 5.1.1.4 글로벌 환경의 해제 그래프를 그리고 나서 par(par_origin)을 이용하면 원래 기본값의 그래프 모수로 되돌아 오게 됩니다. # 초기 설정 환원 par(par_origin) plot(MPG.highway ~ Weight, type = &quot;p&quot;, Cars93) Figure 5.4: 그래프 모수의 설정 : 글로벌 환경 해제 Go Top 5.1.1.5 현재 그래프 모수 확인 (checking current graphical parameter settings) : par() 참고로, par() 함수를 쓰면 현재의 그래프 모수를 확인해볼 수 있습니다. 갯수를 세어보니 총 72 개의 그래프 모수가 있네요. # to see current graphical parameter settings par() 5.1.2 로컬 환경 설정 두 번째로 개별 그래프마다 그래프 모수를 설정하는 방법에 대하여 예를 들어서 살펴 보겠습니다. 이 방법은 높은 수준의 그래프 함수를 이용하여 그래프를 그려야 하는 상황에서, 각 그래프 함수의 모수를 이용하여 로컬 환경(local environment)을 설정하는 방법입니다. 이번 절에서 이러한 로컬 환경의 모수를 설정하는 방법에 대하여 다음의 내용을 중심으로 살펴 보겠습니다. 기호 모양 pch, 크기 cex 선 유형 lty, 선 두께 lwd 현재 그래프 모수 확인 (checking current graphical parameter settings) : par() 색 지정 방법 5.1.2.1 로컬 환경 설정 예 예를 들어, plot() 함수의 모수에 직접 ‘플롯의 종류’(type =), ‘기호의 모양’(pch =), 그리고, ‘색깔’(col =) 등을 지정해 보겠습니다. library(MASS) par(mfrow = c(1,2)) ## method 2 : 로컬 환경 설정 plot(MPG.highway ~ Horsepower, type = &quot;p&quot;, # 플롯의 종류 : p (점) pch = 15, # 점의 기호 모양 col = &quot;blue&quot;, # 점의 색 data = Cars93) # 데이터 세트 plot(MPG.highway ~ Weight, type = &quot;p&quot;, # 플롯의 종류 : p (점) pch = 21, # 점의 기호 모양 col = &quot;black&quot;, # 점의 색 data = Cars93) # 데이터 세트 Figure 5.5: 그래프 모수의 설정 : 로컬 환경 설정 예 "],["그래프모수-기호.html", "5.2 기호", " 5.2 기호 지난 절에서 R 그래프 모수 (Graphical Parameters)를 설정하는 2가지 방법에 대해서 소개하였습니다. 이번 절에서는 기호와 관련한 설정에 대하여 하나씩 살펴 보겠습니다. 그래프 모수가 70여 가지가 되므로 모두를 설명하기에는 무리가 있으며, 자주 사용하는 것들 위주로 선별해서 소개합니다. ? par 로 도움말을 찾아보시면 모든 그래프 모수에 대한 도움말을 검색할 수 있습니다. 특히, type = 모수는 다음과 같은 플롯의 종류를 선택할 수 있게 해 줍니다. Table 5.1: plot() 함수의 type 모수의 값 옵션 플롯의 형태 p 점 l 선 b 점과 선을 동시에 c “b”의 선 부분 (점은 생략) o 점과 선을 중첩해서 그림(overplotted) h 히스토그램과 같이 수직선 그리기 s 계단 모양으로 연결한 그래프 S 또 다른 계단 모양 그래프 n 플롯팅을 하지 않음 참고로 type = 모수에 대한 그래프의 형태는 다음의 그림 5.6 과 같습니다. par(mfrow = c(3,3)) plot(Cars93$MPG.highway, type = &quot;p&quot;, main = &quot;type = \\&quot;p\\&quot;&quot;) plot(Cars93$MPG.highway, type = &quot;l&quot;, main = &quot;type = \\&quot;l\\&quot;&quot;) plot(Cars93$MPG.highway, type = &quot;b&quot;, main = &quot;type = \\&quot;b\\&quot;&quot;) plot(Cars93$MPG.highway, type = &quot;c&quot;, main = &quot;type = \\&quot;c\\&quot;&quot;) plot(Cars93$MPG.highway, type = &quot;o&quot;, main = &quot;type = \\&quot;o\\&quot;&quot;) plot(Cars93$MPG.highway, type = &quot;h&quot;, main = &quot;type = \\&quot;h\\&quot;&quot;) plot(Cars93$MPG.highway, type = &quot;s&quot;, main = &quot;type = \\&quot;s\\&quot;&quot;) plot(Cars93$MPG.highway, type = &quot;S&quot;, main = &quot;type = \\&quot;S\\&quot;&quot;) plot(Cars93$MPG.highway, type = &quot;n&quot;, main = &quot;type = \\&quot;n\\&quot;&quot;) Figure 5.6: plot() 함수의 type 모수 par(mfrow = c()) ## named list() 이 중에서 우리는 type = \"p\"와 type = \"l\"을 중심으로 살펴 보겠습니다. 5.2.1 기호 모양 그래픽 모수 pch는 다양한 모양의 기호 또는 상징을 선택할 수 있게 합니다. 디폴트는 pch = 1 로서 “속이 빈 원 모양”이며, 아래의 pch 그래픽 모수는 0부터 25까지의 식별 숫자로 원하는 모양을 선택할 수 있습니다. Figure 5.7: 기호 모양 MASS 패키지 내 Cars93 데이터프레임의 차 무게(Weight)와 고속도로연비(MPG.highway) 변수를 가지고 산포도 그래프를 아래와 같이 그려보았습니다. pch = 1 ~ pch = 6 까지 6개만 예로 들어보았습니다. ## 기호 모양 : pch = library(MASS) par(mfrow = c(3,2)) plot(MPG.highway ~ Weight, data = Cars93, pch = 1, main = &quot;pch = 1&quot;) plot(MPG.highway ~ Weight, data = Cars93, pch = 2, main = &quot;pch = 2&quot;) plot(MPG.highway ~ Weight, data = Cars93, pch = 3, main = &quot;pch = 3&quot;) plot(MPG.highway ~ Weight, data = Cars93, pch = 4, main = &quot;pch = 4&quot;) plot(MPG.highway ~ Weight, data = Cars93, pch = 5, main = &quot;pch = 5&quot;) plot(MPG.highway ~ Weight, data = Cars93, pch = 6, main = &quot;pch = 6&quot;) Figure 5.8: 그래프 모수의 설정 : 기호 모양 : pch par(mfrow = c(1,1)) Go Top 5.2.2 기호 직접 입력 pch = 1 처럼 숫자를 입력하는 방법 말고도 pch = '$', pch = '%', pch = '*' 그리고 pch = 'ㅍ' 처럼 기호를 직접 입력할 수도 있습니다. ## specifying character directly par(mfrow = c(2,2)) plot(MPG.highway ~ Weight, data = Cars93, pch = &#39;$&#39;, main = &quot;pch = &#39;$&#39; &quot;) plot(MPG.highway ~ Weight, data = Cars93, pch = &#39;%&#39;, main = &quot;pch = &#39;%&#39; &quot;) plot(MPG.highway ~ Weight, data = Cars93, pch = &#39;*&#39;, main = &quot;pch = &#39;*&#39; &quot;) plot(MPG.highway ~ Weight, data = Cars93, pch = &#39;ㅍ&#39;, main = &quot;pch = &#39;ㅍ&#39; &quot;) Figure 5.9: 그래프 모수의 설정 : 기호 모양 : 직접 지정 Go Top 5.2.3 기호 크기 cex는 기호의 크기를 지정할 때 사용합니다. cex = 1 이 디폴트 크기이며, cex 다음에 입력하는 숫자는 디폴트 크기 대비 상대적인 크기를 나타냅니다. ## 기호 크기 : cex par(mfrow = c(2, 3)) # plot display by 2 row and 3 column plot(MPG.highway ~ Weight, data = Cars93, pch = 19, cex = 0.5, main = &quot;cex = 0.5&quot;) plot(MPG.highway ~ Weight, data = Cars93, pch = 19, cex = 1, main = &quot;cex = 1 (default)&quot;) plot(MPG.highway ~ Weight, data = Cars93, pch = 19, cex = 1.5, main = &quot;cex = 1.5&quot;) plot(MPG.highway ~ Weight, data = Cars93, pch = 19, cex = 2, main = &quot;cex = 2&quot;) plot(MPG.highway ~ Weight, data = Cars93, pch = 19, cex = 3, main = &quot;cex = 3&quot;) plot(MPG.highway ~ Weight, data = Cars93, pch = 19, cex = 4, main = &quot;cex = 4&quot;) Figure 5.10: 그래프 모수의 설정 : 기호 크기 : cex Go Top "],["그래프모수-선.html", "5.3 선", " 5.3 선 이 절에서는 플롯의 종류로서 type = \"l\"로 표시되는 선(line)과 관련한 모수 설정에 대해서 하나씩 예를 들어보면서 자세히 설명해보겠습니다. 5.3.1 선 유형 R 그래프 모수에서 제공하는 선 유형에는 아래과 같이 7 가지가 있습니다. Figure 5.11: 선 유형 ## line types : lty # 차의 무게로 정렬 Cars93_order &lt;- Cars93[order(Cars93$Weight),] # 2행 3열로 플롯의 레이아웃 설정 par(mfrow = c(2, 3)) plot(MPG.highway ~ Weight, data = Cars93_order, type = &quot;l&quot;, lty = 1, main = &quot;lty = 1&quot;) plot(MPG.highway ~ Weight, data = Cars93_order, type = &quot;l&quot;, lty = 2, main = &quot;lty = 2&quot;) plot(MPG.highway ~ Weight, data = Cars93_order, type = &quot;l&quot;, lty = 3, main = &quot;lty = 3&quot;) plot(MPG.highway ~ Weight, data = Cars93_order, type = &quot;l&quot;, lty = 4, main = &quot;lty = 4&quot;) plot(MPG.highway ~ Weight, data = Cars93_order, type = &quot;l&quot;, lty = 5, main = &quot;lty = 5&quot;) plot(MPG.highway ~ Weight, data = Cars93_order, type = &quot;l&quot;, lty = 6, main = &quot;lty = 6&quot;) Figure 5.12: 그래프 모수의 설정 : 선 유형 : lty Go Top 5.3.2 선 두께 선 두께를 조절하는 그래프 모수는 lwd 입니다. lwd = 1 이 디폴트 값이며, 이 숫자를 기준으로 숫자만큼 선 두께가 배수가 됩니다. 아래에 lwd = 0.5, 1, 2, 3, 4, 5 별로 선 두께가 어떻게 변화하는지 예를 들어보았습니다. ## line width : lwd # 창의 무게로 정렬 Cars93_order &lt;- Cars93[order(Cars93$Weight),] par(mfrow = c(2, 3)) plot(MPG.highway ~ Weight, data = Cars93_order, type = &quot;l&quot;, lwd = 0.5, main = &quot;lwd = 0.5&quot;) plot(MPG.highway ~ Weight, data = Cars93_order, type = &quot;l&quot;, lwd = 1, main = &quot;lwd = 1 (default)&quot;) plot(MPG.highway ~ Weight, data = Cars93_order, type = &quot;l&quot;, lwd = 2, main = &quot;lwd = 2&quot;) plot(MPG.highway ~ Weight, data = Cars93_order, type = &quot;l&quot;, lwd = 3, main = &quot;lwd = 3&quot;) plot(MPG.highway ~ Weight, data = Cars93_order, type = &quot;l&quot;, lwd = 4, main = &quot;lwd = 4&quot;) plot(MPG.highway ~ Weight, data = Cars93_order, type = &quot;l&quot;, lwd = 5, main = &quot;lwd = 5&quot;) Figure 5.13: 그래프 모수의 설정 : 선 두께 : lty Go Top "],["그래프모수-색-지정.html", "5.4 색 지정", " 5.4 색 지정 지난 절에서는 R 그래프 모수(Graphical Parameters)를 설정하는 2가지 방법, 그리고 기호 모양과 크기, 선의 유형(Line Type, lty)과 선의 두께(Line Width, lwd) 등의 옵션에 대해서 알아보았습니다. 이번 절서는 그래프 모수 중에서 색(color)을 설정하는 방법에 대해서 알아보겠습니다. Table 5.2: 색 관련 모수와 기능 설명 모수 기능 설명 col 기호, 선, 문자 등의 색깔을 디폴트로 지정 col.axis 축의 색 지정 col.lab x축과 y축의 레이블 색 지정 col.main 제목 색 지정 col.sub 부제목의 색 지정 fg 그래프 전경 색 지정 bg 그래프 배경 색 지정 아마도 대부분은 col 모수를 주로 사용하고 나머지 색상 관련 모수는 거의 사용하지 않을 듯 합니다만, R에서는 사용자가 원하면 거의 모든 부분의 색상을 원하는대로 설정할 수 있는 극강의 자유도를 제공합니다. R이 그래픽의 절대강자인 이유가 이처럼 다양한 모수를 제공해주는데 있습니다. 초보자라면 그냥 디폴트 옵션 사용하시면 되구요, 그래프에 욕심이 있는 분이라면 R의 색상 모수에 대해서 차근차근 공부해두시면 유용할 것입니다. 하나씩 차례대로 살펴보도록 하겠습니다. 5.4.1 기호, 선, 문자 등의 디폴트 색 지정 R에서 지원하는 색의 종류에는 657개가 있습니다. colors() 함수를 사용하면 657개 전체 색 리스트를 볼 수 있습니다. ##------------------------------- ## Graphical parameters : color ##------------------------------- length(colors()) ## [1] 657 colors() 위처럼 text로 색깔 이름만 있으면 알기 어려울 수도 있는데요, Earl F. Glynn 가 657개 색을 각 숫자별로 그리드에 색을 보기에 좋도록 정리를 해놓았습니다. [ Color Chart by Earl F. Glynn, Stowers Institute for Medical Research, 24 May 2005 ] Figure 5.14: Earl F. Glynn의 색상 표 * 출처 : http://research.stowers-institute.org/efg/R/Color/Chart/index.htm R에서 색을 지정하는 방법에는 (1) 색 식별 숫자 (index), (2) 색 이름 (color name), (3) 16진수 (hexadecimal), (4) RGB 색상표 등을 이용하는 4가지 방법이 있습니다. Table 5.3: 색을 지정하는 방법의 비교 식별 숫자 색 이름 16진수 RGB Triple 4 (26번) blue #0000FF 0 0 255 NA (62번) comflowerblue #6495ED 100 149 237 NA (73번) darkblue #00008B 0 0 139 5.4.1.1 식별 숫자의 이용 먼저 (1) 숫자(index)로 지정하는 방법은 편하긴 한데요, 선택할 수 있는 색은 아래와 같이 8가지가 있어서 매우 제한적입니다. Table 5.4: 색의 식별 숫자 식별 숫자 색 0 흰색 (white) 1 검정색 (black) 2 빨강색 (red) 3 초록색 (green) 4 파랑색 (blue) 5 청록색 (turquoise) 6 자홍색 (magenta) 7 노란색 (yellow) 8 회색 (gray) 다음의 예는 원을 8 등분 또는 16 등분하여 각 조각의 색을 지정하기 위해 col = 모수를 사용하고, 조각의 색을 식별 숫자로 지정하는 파이 차트의 예를 보여 주고 있습니다. # color by index 1~8 par(mfrow=c(1,2)) pie(rep(1, 8), col = 1:8) # 1 ~ 8 번까지 지정합니다. pie(rep(1, 16), col = 1:16) # 9 ~ 16 번까지의 색은 1 ~ 8 번의 색으로 지정됩니다. Figure 5.15: 색 지정 : 색 식별 번호 5.4.1.2 색 이름, 16진법, RGB 색상표 이용 반면, (2) 이름(color name), (3) 16진법 표기 (hexadecimal), (4) RGB 색상표 (RGB triple) 은 매우 다양한 색상을 선택할 수 있는 장점이 있습니다. 아래는 Earl F. Glynn가 작성한 색상표에서 일부를 화면캡쳐한 내용인데요, 모든 색상표는 아래의 출처에 있는 pdf url에 있습니다. Figure 5.16: Earl F. Glynn가 작성한 색상표 * 참고자료 : https://rstudio-pubs-static.s3.amazonaws.com/3486_79191ad32cf74955b4502b8530aad627.html 파란색(blue)에 대해서 위의 4가지 방법, 즉 (1) 숫자 (index), (2) 색 이름 (color name), (3) 16진수 (hexadecimal), (4) RGB 색상표를 사용해서 R 함수 예를 들어보겠습니다. 파란색(blue)으로 모두 똑같은 결과가 나았습니다. library(MASS) ## &#39;파란색&#39; 설정 예 par(mfrow = c(2,2)) # method 1 : 색인번호 plot(MPG.highway ~ Weight, Cars93, cex = 2, pch = 19, col = 4, main = &quot;col = 4 (index)&quot;) # method 2 : 색 이름 plot(MPG.highway ~ Weight, Cars93, cex = 2, pch = 19, col = &quot;blue&quot;, main = &quot;col = blue (name)&quot;) # method 3 : 16진수 코드 plot(MPG.highway ~ Weight, Cars93, cex = 2, pch = 19, col = &quot;#0000FF&quot;, main = &quot;col = #0000FF (hexadecimal)&quot;) # method 4 : 3자리로 이루어진 RGB 코드 rgb_1 &lt;- rgb(0, 0, 255, maxColorValue=255) plot(MPG.highway ~ Weight, Cars93, cex = 2, pch = 19, col = rgb_1, main = &quot;col = RGB(0, 0, 255)(RGB triple)&quot;) Figure 5.17: 색 지정 : 색 이름 5.4.1.3 팔레트 색상 R에서는 색상 관련해서 서로 보완(complementing)되거나 대조를 이루는(contrasting) 색상들을 미리 파레트 형식으로 정의(defined palettes of colors)해 놓은 것이 있습니다. rainbow(n), heat.colors(n), terrain.colors(n), topo.colors(n), cm.colors(n) 등이 있습니다. example(rainbow) 함수를 이용해서 이들 색상표 palettes 를 살펴 볼 수 있습니다. 계속 Enter 치면 다음 화면으로 넘어갑니다. [ 색상 파레트 (defined palattes of colors) ] ## example of rainbow palette&#39;s colors example(rainbow) Go Top 5.4.2 축의 척도 색 지정 x축과 y축의 척도 표기 색상을 지정할 때 col.axis 모수 옵션을 사용합니다. 아래에 x축과 y축 척도 표기 색상으로 파랑색, 빨강색, 노랑색, 회색으로 바꿔가면서 그래프를 그려보았습니다. ## 축의 척도 색 지정 : col.axis par(mfrow = c(2,2)) plot(MPG.highway ~ Weight, Cars93, cex = 1, pch = 21, col.axis = &quot;blue&quot;, main = &quot;col.axis = blue&quot;) plot(MPG.highway ~ Weight, Cars93, cex = 1, pch = 21, col.axis = &quot;red&quot;, main = &quot;col.axis = red&quot;) plot(MPG.highway ~ Weight, Cars93, cex = 1, pch = 21, col.axis = &quot;yellow&quot;, main = &quot;col.axis = yellow&quot;) plot(MPG.highway ~ Weight, Cars93, cex = 1, pch = 21, col.axis = &quot;gray&quot;, main = &quot;col.axis = gray&quot;) Figure 5.18: 색 지정 : 축의 척도 색 Go Top 5.4.3 x축과 y축의 제목 색 지정 이번에는 x축과 y의 Lable 색을 지정하는 방법으로 col.lab 모수 옵션을 사용하면 됩니다. 파랑색, 빨강색, 노랑색, 회색으로 x축과 y축의 Lable 색을 설정하는 예를 들어보겠습니다. ## x축과 y축의 제목 색 : col.lab par(mfrow = c(2,2)) plot(MPG.highway ~ Weight, Cars93, cex = 1, pch = 21, col.lab = &quot;blue&quot;, main = &quot;col.lab = blue&quot;) plot(MPG.highway ~ Weight, Cars93, cex = 1, pch = 21, col.lab = &quot;red&quot;, main = &quot;col.lab = red&quot;) plot(MPG.highway ~ Weight, Cars93, cex = 1, pch = 21, col.lab = &quot;yellow&quot;, main = &quot;col.lab = yellow&quot;) plot(MPG.highway ~ Weight, Cars93, cex = 1, pch = 21, col.lab = &quot;gray&quot;, main = &quot;col.lab = gray&quot;) Figure 5.19: 색 지정 : x축과 y축의 제목 색 Go Top 5.4.4 제목 색 지정 ## 제목 색 지정 : col.main par(mfrow = c(2, 2)) plot(MPG.highway ~ Weight, Cars93, cex = 1, pch = 21, col.main = &quot;blue&quot;, main = &quot;col.main = blue&quot;) plot(MPG.highway ~ Weight, Cars93, cex = 1, pch = 21, col.main = &quot;red&quot;, main = &quot;col.main = red&quot;) plot(MPG.highway ~ Weight, Cars93, cex = 1, pch = 21, col.main = &quot;yellow&quot;, main = &quot;col.main = yellow&quot;) plot(MPG.highway ~ Weight, Cars93, cex = 1, pch = 21, col.main = &quot;gray&quot;, main = &quot;col.main = gray&quot;) Figure 5.20: 색 지정 : 제목 Go Top 5.4.5 부제목 색 지정 ## 부제목 색 지정 : col.sub par(mfrow = c(2, 2)) plot(MPG.highway ~ Weight, Cars93, cex = 1, pch = 21, col.sub = &quot;blue&quot;, sub = &quot;col.sub = blue&quot;) plot(MPG.highway ~ Weight, Cars93, cex = 1, pch = 21, col.sub = &quot;red&quot;, sub = &quot;col.sub = red&quot;) plot(MPG.highway ~ Weight, Cars93, cex = 1, pch = 21, col.sub = &quot;yellow&quot;, sub = &quot;col.sub = yellow&quot;) plot(MPG.highway ~ Weight, Cars93, cex = 1, pch = 21, col.sub = &quot;gray&quot;, sub = &quot;col.sub = gray&quot;) Figure 5.21: 색 지정 : 부제목 색 Go Top 5.4.6 그래프 전경 색 지정 ## 그래프 전경 색 지정 : fg par(mfrow = c(2, 2)) plot(MPG.highway ~ Weight, Cars93, cex = 1, pch = 21, fg = &quot;blue&quot;, main = &quot;fg (foreground) = blue&quot;) plot(MPG.highway ~ Weight, Cars93, cex = 1, pch = 21, fg = &quot;red&quot;, main = &quot;fg (foreground) = red&quot;) plot(MPG.highway ~ Weight, Cars93, cex = 1, pch = 21, fg = &quot;yellow&quot;, main = &quot;fg (foreground) = yellow&quot;) plot(MPG.highway ~ Weight, Cars93, cex = 1, pch = 21, fg = &quot;gray&quot;, main = &quot;fg(foreground) = gray&quot;) Figure 5.22: 색 지정 : 전경색 Go Top 5.4.7 그래프 배경 색 지정 bg는 그래프 기호의 배경색을 채울 때 사용합니다. 아래에 기호 모양 21번 (원)에 파랑색, 빨강색, 노랑색, 회색을 채워보았습니다. ## 그래프 배경 색 지정 : bg par(mfrow = c(2, 2)) plot(MPG.highway ~ Weight, Cars93, cex = 2, pch = 21, bg = &quot;blue&quot;, main = &quot;bg (background) = blue&quot;) plot(MPG.highway ~ Weight, Cars93, cex = 2, pch = 21, bg = &quot;red&quot;, main = &quot;bg (background) = red&quot;) plot(MPG.highway ~ Weight, Cars93, cex = 2, pch = 21, bg = &quot;yellow&quot;, main = &quot;bg (background) = yellow&quot;) plot(MPG.highway ~ Weight, Cars93, cex = 2, pch = 21, bg = &quot;gray&quot;, main = &quot;bg (background) = gray&quot;) Figure 5.23: 색 지정 : 배경색 Go Top bg (background color)는 속이 비어있는 pch 21번부터 25번 까지만 사용가능하며, 그 외에는 적용이 안됩니다. 아래에 pch =1 일 때 bg 옵션이 적용이 안된 것을 확인할 수 있습니다. ## bg (background color) only works with pch from 21 to 25 par(mfrow=c(3,2)) plot(MPG.highway ~ Weight, Cars93, cex = 2, pch = 1, bg = &quot;blue&quot;, main = &quot;pch = 1, bg is not working&quot;) plot(MPG.highway ~ Weight, Cars93, cex = 2, pch = 21, bg = &quot;blue&quot;, main = &quot;pch = 21, bg is working&quot;) plot(MPG.highway ~ Weight, Cars93, cex = 2, pch = 22, bg = &quot;blue&quot;, main = &quot;pch = 22, bg is working&quot;) plot(MPG.highway ~ Weight, Cars93, cex = 2, pch = 23, bg = &quot;blue&quot;, main = &quot;pch = 23, bg is working&quot;) plot(MPG.highway ~ Weight, Cars93, cex = 2, pch = 24, bg = &quot;blue&quot;, main = &quot;pch = 24, bg is working&quot;) plot(MPG.highway ~ Weight, Cars93, cex = 2, pch = 25, bg = &quot;blue&quot;, main = &quot;pch = 25, bg is working&quot;) Figure 5.24: 색 지정 : 배경색 미적용 다음 절에서는 그래프 영역과 내/외부 마진 모수 설정하는 방법에 대해서 알아보도록 하겠습니다. Go Top "],["그래프-영역.html", "6 그래프 영역", " 6 그래프 영역 그래프 영역은 크게 (1) 플롯 영역 (plot area), (2) 내부 마진 영역 (inner margin area), (3) 외부 마진 영역(outer margin area) 로 구분할 수 있습니다. 아래 그림 6.1 은 각 영역의 위치를 보여 주고 있습니다. Figure 6.1: 그래프 영역의 구성 "],["플롯-영역-plot-area-내부-마진-영역-inner-margin-area.html", "6.1 플롯 영역 (plot area), 내부 마진 영역 (inner margin area)", " 6.1 플롯 영역 (plot area), 내부 마진 영역 (inner margin area) 플롯 영역 (plot area)은 점이든 선이든 기호가 그려지는 영역입니다. 내부 마진 영역 (inner margin area)는 플롯 영역을 감싸고 있는 4개 모서리 부분의 마진입니다. 하단 부분이 1번, 왼쪽 부분이 2번, 상단부분이 3번, 오른쪽 부분이 4번이며, 순서대로 내부 마진 영역의 디폴트 값은 c(5.1, 4.1, 4.1, 2.1) 입니다. 하단은 x축 레이블, 왼쪽은 y축 레이블, 상단은 제목이 들어가는 영역입니다. 그래서 기본 값의 마진 숫자가 큰 반면에, 오른쪽은 보통은 레이블이 없으므로 디폴트 마진 값이 타 영역의 반밖에 되지 않습니다. ##------------------------------------------- ## 그래프 영역과 내부/외부 마진 ##------------------------------------------- library(MASS) # to use Cars93 dataframe # 플롯 영역과 내부 마진 영역의 기본값으로 설정되어 있는대로 그래프를 작성합니다. # 기본 값 내부 마진 영역 : c(5.1, 4.1, 4.1, 2.1) plot(MPG.highway ~ Weight, Cars93, type=&quot;p&quot;, xlab = &quot;Inner Margin Area 1&quot;, ylab = &quot;Inner Margin Area 2&quot;, main = &quot;Inner Margin Area 3&quot;) # 저수준 함수들을 이용하여 영역을 표시해 줍니다. mtext(&quot;내부 마진 영역 4&quot;, side = 4, col = &quot;blue&quot;) text(3000, 35, cex = 3, labels = &quot;플롯 영역&quot;, pos = 3, col = &quot;blue&quot;) Figure 6.2: 4 개의 내부 마진 영역 Go Top "],["외부-마진-영역-outer-margin-area.html", "6.2 외부 마진 영역 (outer margin area)", " 6.2 외부 마진 영역 (outer margin area) 외부 마진 영역은 내부 마진 영역의 바깥 쪽을 둘러싸는 마진 영역입니다. 내부 마진 영역과 위치 순서는 똑같이 하단 부분이 1번, 왼쪽 부분이 2번, 상단 부분이 3번, 오른쪽 부분이 4번입니다. 1번, 2번, 3번, 4번 별로 디폴트 마진 값은 c(0, 0, 0, 0) 입니다. 즉 위의 예의 경우 외부 마진(outer margin) 을 별도로 지정해주지 않았으므로 디폴트 값이 적용되어 외부 마진(outer margin)은 모두 ‘0’ 으로 없는 셈입니다. 외부 마진 영역은 위의 예처럼 1개짜리 그래프에서는 별 쓸모가 없습니다만 (그냥 내부 마진 영역으로 cover 되기 때문입니다), 그래프 영역을 분할해서 2개 이상의 그래프를 하나의 그래프에 결합할 경우 유용하게 사용할 수 있습니다. 개별 그래프에서는 내부 마진 영역에 제목, x축 레이블, y축 레이블을 적고, 2개 이상의 개별 그래프들을 모두 포괄하는 대제목 (mega title)을 적고자 할 때 외부 마진 영역에 적으면 딱 좋습니다. 아래에 1개의 행, 2개의 열로 영역을 분할(mfrow = )한 경우 외부 마진 영역 설정(oma = ), 내부 마진 영역 설정(mar = ) 함수의 예를 들어보겠습니다. 외부 마진 부분은 파란색으로 알아보기 쉽게 위치 표시를 했습니다. 참고로, op &lt;- par(no.readonly = TRUE)로 디폴트 par 값을 미리 할당해 두면, 나중에 par값 조정 다 끝나고 원래의 디폴트 값으로 되돌아오고자 할 때 par(op)를 실행시키면 되므로 매우 편리합니다. library(MASS) ## 내부 마진 영역과 외부 마진 영역 # par의 기본 설정 값을 저장합니다. op &lt;- par(no.readonly = TRUE) # par() 함수 옵션을 변경합니다. par(mfrow = c(1,2), # 1행 2열로 프레임을 분할합니다. mar = c(4, 3, 3, 1), # 내부 마진을 설정합니다. oma = c(0.5, 0.5, 2, 0.5)) # 외부 마진을 설정합니다. # 플롯 영역, 내부 마진 영역, 외부 마진 영역 plot(MPG.highway ~ Weight, Cars93, type=&quot;p&quot;, xlab = &quot;Inner Margin Area&quot;, main = &quot;Inner Margin Area&quot;) plot(MPG.highway ~ Horsepower, Cars93, type=&quot;p&quot;, xlab = &quot;Inner Margin Area&quot;, main = &quot;Inner Margin Area&quot;) # 저수준 함수로 텍스트를 표시합니다. mtext(&quot;Outer Margin Area&quot;, outer = TRUE, cex = 2, col = &quot;blue&quot;) # outer = TRUE : 외부 마진 영역 Figure 6.3: 외부 마진 영역 # par를 초기 설정값으로 환원합니다. par(op) Go Top "],["영역-분할결합-방법-1.html", "6.3 영역 분할/결합 방법 1", " 6.3 영역 분할/결합 방법 1 2개 이상의 다수의 그래프를 결합하는 방법에는 par() 함수와 layout() 함수의 2가지 방법이 있습니다. 먼저 par() 방법을 살펴보면, par(mfrow = ), par(mfcol = ) 의 2가지 모수 설정 방법이 있습니다. mfrow와 mfcol 은 아래의 말을 줄여 쓴 말입니다. mfrow : 행 우선의 복수 플롯의 수 mfcol : 열 우선의 복수 플롯의 수 par(mfrow = c(4, 2)) 은 복수의 플롯 작성할 때 프레임을 4행 2열로 분할하여 한 프레임에 표시하라는 의미입니다. 그래프가 그려지는 순서를 화살표로 표시를 해두었는데요, 상단 왼쪽에서 시작해서 오른쪽으로 지그재그로 하단으로 내려가면서 그래프가 순차적으로 그려집니다. library(MASS) # par의 기본 설정 값을 저장합니다. op &lt;- par(no.readonly = TRUE) ##-- par(mfrow = ): 행 우선의 복수 플롯의 수 par(mfrow = c(4, 2), # 4행 2열로 프레임을 분할합니다 mar = c(4, 3, 3, 1), # 내부 마진을 설정합니다. oma = c(0.5, 0.5, 2, 0.5)) # 외부 마진을 설정합니다. plot(MPG.highway ~ Weight, Cars93, type=&quot;p&quot;, main = &quot;plot 1&quot;) plot(MPG.highway ~ Weight, Cars93, type=&quot;p&quot;, main = &quot;plot 2&quot;) plot(MPG.highway ~ Weight, Cars93, type=&quot;p&quot;, main = &quot;plot 3&quot;) plot(MPG.highway ~ Weight, Cars93, type=&quot;p&quot;, main = &quot;plot 4&quot;) plot(MPG.highway ~ Weight, Cars93, type=&quot;p&quot;, main = &quot;plot 5&quot;) plot(MPG.highway ~ Weight, Cars93, type=&quot;p&quot;, main = &quot;plot 6&quot;) plot(MPG.highway ~ Weight, Cars93, type=&quot;p&quot;, main = &quot;plot 7&quot;) plot(MPG.highway ~ Weight, Cars93, type=&quot;p&quot;, main = &quot;plot 8&quot;) mtext(&quot;par(mfrow = c(4, 2)&quot;, outer = TRUE, cex = 2, col = &quot;blue&quot;) Figure 6.4: par(mfrow = ): 행 우선의 복수 플롯의 수 # par를 초기 설정값으로 환원합니다. par(op) 한편, par(mfcol = c(4, 2)) 은 프레임을 4행 2열로 분할하되, 플롯은 열 우선 순서로 표시가 되는 것입니다. 다음의 예에서 플롯이 그려지는 순서를 잘 살펴보기 바랍니다. library(MASS) # par의 기본 설정 값을 저장합니다. op &lt;- par(no.readonly = TRUE) ##-- par(mfcol = ) : 열 우선의 복수 플롯의 수 par(mfcol = c(4, 2), # 프레임을 4행 2열로 분할합니다. mar = c(4, 3, 3, 1), # 내부 마진을 설정합니다. oma = c(0.5, 0.5, 2, 0.5)) # 외부 마진을 설정합니다. plot(MPG.highway ~ Weight, Cars93, type=&quot;p&quot;, main = &quot;plot 1&quot;) plot(MPG.highway ~ Weight, Cars93, type=&quot;p&quot;, main = &quot;plot 2&quot;) plot(MPG.highway ~ Weight, Cars93, type=&quot;p&quot;, main = &quot;plot 3&quot;) plot(MPG.highway ~ Weight, Cars93, type=&quot;p&quot;, main = &quot;plot 4&quot;) plot(MPG.highway ~ Weight, Cars93, type=&quot;p&quot;, main = &quot;plot 5&quot;) plot(MPG.highway ~ Weight, Cars93, type=&quot;p&quot;, main = &quot;plot 6&quot;) plot(MPG.highway ~ Weight, Cars93, type=&quot;p&quot;, main = &quot;plot 7&quot;) plot(MPG.highway ~ Weight, Cars93, type=&quot;p&quot;, main = &quot;plot 8&quot;) mtext(&quot;par(mfcol = c(4, 2)&quot;, outer = TRUE, cex = 2, col = &quot;blue&quot;) Figure 6.5: par(mfcol = ) : 열 우선의 복수 플롯의 수 # par를 초기 설정값으로 환원합니다. par(op) Go Top "],["영역-분할결합-방법-2-layout.html", "6.4 영역 분할/결합 방법 2 : layout()", " 6.4 영역 분할/결합 방법 2 : layout() layout() 함수를 사용하면 행렬 형태로 분할하려는 그래프 영역의 순서(sequence)와 열의 폭과 행의 높이(widths of column, heights of row), 영역 나누기/합치기(divide/combine)를 자유롭게 조절할 수 있습니다. layout() 함수는 par(mfrow = )나 par(mfcol = ) 함수와는 병행해서 사용할 수 없으므로 그래프 분석을 시작하기 전에 무슨 함수를 사용할 것인지 결정을 하고 하나를 선택해야만 합니다. layout.show(n)은 현재의 레이 아웃에 대한 외곽선을 n 만큼의 그래프 갯수만큼 볼 수 있게 해주는 함수입니다. 아래에 layout()과 layout.show(n) 함수 예를 하나 들어보겠습니다. matrix() 인수 안의 숫자가 그래프가 그려지는 순서입니다. byrow=TRUE 로 설정했으므로 행 우선 순서로 4개의 그래프를 그릴 수 있는 영역에 플롯이 채워지게 됩니다. byrow= FALSE 로 지정하면 열 우선 순서로 그래프가 생성됩니다. library(MASS) ##----------------------------------- ## layout ##----------------------------------- # par의 기본 설정 값을 저장합니다. op &lt;- par(no.readonly = TRUE) # 프레임을 2행 2열로 분할합니다. # 행 우선 순서로 1, 2, 3, 4가 왼쪽으로 오른쪽 하단으로 할당됩니다. layout(matrix(c(1, 2, 3, 4), 2, 2, byrow = TRUE)) plot(MPG.highway ~ Weight, Cars93, type=&quot;p&quot;, main = &quot;plot 1&quot;) plot(MPG.highway ~ Weight, Cars93, type=&quot;p&quot;, main = &quot;plot 2&quot;) plot(MPG.highway ~ Weight, Cars93, type=&quot;p&quot;, main = &quot;plot 3&quot;) plot(MPG.highway ~ Weight, Cars93, type=&quot;p&quot;, main = &quot;plot 4&quot;) Figure 6.6: 프레임을 2행 2열로 분할 # show the current layout layout.show(4) Figure 6.7: 프레임을 2행 2열로 분할 layout() 함수를 활용하면 그래프 영역을 합칠 수도 있습니다. 이러한 기능은 par(mfrow = )나 par(mfcol = ) 와 비교해서 매우 유용한 기능 중의 하나입니다. 2행 2열로 나눈 영역에서 1행 1열에만 그래프 영역 1개를 남겨놓고, 2행의 1열과 2행의 2열을합쳐보겠습니다. 숫자 ’0’은 비어있는 그래프 영역이 되며, 동일한 숫자를 행렬(matrix) 안에 나란히 입력하면 그 영역을 합쳐지게 됩니다. 아래 예에서는 1행2열에 ‘0’이 입력되었으므로 비어 있고, 2행1열과 2행 2열에는’2’가 입력되어 있으므로, 2행은 1개의 그래프 영역으로 표시가 되게 됩니다. library(MASS) ## 2행 2열 영역으로 분할합니다. ## 1행 1열의 요소로 그림 1을 할당합니다. ## 그림 2은 2행 전체에 할당합니다. layout(matrix(c(1, 0, 2, 2), 2, 2, byrow = TRUE)) plot(MPG.highway ~ Weight, Cars93, type=&quot;p&quot;, main = &quot;plot 1&quot;) plot(MPG.highway ~ Weight, Cars93, type=&quot;p&quot;, main = &quot;plot 2&quot;) Figure 6.8: 2행 2열 프레임 : 1행 2열로 공란 ## show the current layout layout.show(2) Figure 6.9: 2행 2열 프레임 : 1행 2열로 공란 이해를 돕기위해서 이번에는 1행 1열과 1행 2열을 하나로 합치고, 2행 1열은 비워놓고 2행2열만 남겨놓는 layout을 만들어보는 예제를 아래에 들어보겠습니다. ## 2행 2열 영역으로 분할합니다. ## 그림 1을 1행 전체에 할당합니다. ## 그림 2은 2행의 2열에 할당합니다. layout(matrix(c(1, 1, 0, 2), 2, 2, byrow = TRUE)) plot(MPG.highway ~ Weight, Cars93, type=&quot;p&quot;, main = &quot;plot 1&quot;) plot(MPG.highway ~ Weight, Cars93, type=&quot;p&quot;, main = &quot;plot 2&quot;) Figure 6.10: 2행 2열 프레임 : 1행 전체 그림 ## show the current layout layout.show(2) Figure 6.11: 2행 2열 프레임 : 1행 전체 그림 이번에는 10cm x 10cm 정사각형 모양의 그래프 영역을 생성해 보겠습니다. 폭은 widths = lcm() 으로, 높이는 heights = lcm() 으로 설정을 해주면 됩니다. ## 10 cm x 10 cm 넓이의 그래프를 작성합니다. layout.1 &lt;- layout(matrix(1), # 요소가 1개인 행렬입니다. widths = lcm(10), # 폭이 10cm heights = lcm(10)) # 높이가 10cm plot(MPG.highway ~ Weight, Cars93, type=&quot;p&quot;, main = &quot;plot 1&quot;) Figure 6.12: 정사각형 모향의 레이아웃의 플롯 layout.show(layout.1) Figure 6.13: 정사각형 모향의 레이아웃의 플롯 이번에는 그래프 생성 순서(sequence)의 위, 아래를 바꾸어 보고, 그래프의 넓이(widths)와 높이(heights)를 서로 다르게 하는 그래프 영역을 만들어보겠습니다. 가운데에 산점도를 그려놓고 상단과 우측에 작은 크기의 히스토그램이나 박스플롯을 병행해서 그릴 때 유용하게 사용할 수 있습니다. 참고로, respect = TRUE 는 가로 넓이와 세로 높이의 비율을 고려해서 그래프 영역을 설정하라는 옵션입니다. # 다음의 행렬에 있는 요소가 표시되는 그림의 번호입니다. l &lt;- matrix(c(2, 0, 1, 3), 2, 2,byrow = TRUE); l ## [,1] [,2] ## [1,] 2 0 ## [2,] 1 3 layout.2 &lt;- layout(matrix(c(2, 0, 1, 3), 2, 2,byrow = TRUE), # 그림의 위치를 지정합니다. widths = lcm(c(6, 4)), # 두 열의 넓이가 각각 6Cm와 4Cm로 설정됩니다. heights = lcm(c(4, 6)), # 두 행의 높이가 각각 4Cm와 6Cm로 설정됩니다. respect = TRUE) # 가로의 넓이와 세로의 높이의 비율을 고려합니다. plot(MPG.highway ~ Weight, Cars93, type=&quot;p&quot;, main = &quot;plot 1&quot;) plot(MPG.highway ~ Weight, Cars93, type=&quot;p&quot;, main = &quot;plot 2&quot;) plot(MPG.highway ~ Weight, Cars93, type=&quot;p&quot;, main = &quot;plot 3&quot;) Figure 6.14: 행렬의 요소를 그림의 번호로 지정 layout.show(layout.2) Figure 6.15: 행렬의 요소를 그림의 번호로 지정 # Reset par to the default values at startup par(op) Go Top 참고자료 https://rfriend.tistory.com/148?category=605866 https://rfriend.tistory.com/149?category=605866 https://rfriend.tistory.com/150?category=605866 https://rfriend.tistory.com/151?category=605866 "],["낮은-수준의-그래프-함수.html", "7 낮은 수준의 그래프 함수", " 7 낮은 수준의 그래프 함수 높은 수준의 그래프 함수로 그래프의 골격을 만들수 있고, 그래픽 모수로 기호 모양이나 색, 크기 등을 설정할 수 있는데요, 이것 만으로는 원하는 그래프를 만드는데 부족함이 있습니다. 가령 그래프 제목을 추가하고 싶거나, 선이나 점을 추가하고 싶거나, 문자나 범례를 추가하고 싶다거나, XY축을 변경하고 싶을 때가 있는데요, 이때 추가적인 정보를 입력하기 위해 사용하는 것이 ’낮은 수준의 그래프 함수 (Low level graphic functions)’가 되겠습니다. 높은 수준의 그래프 함수로 만약 plot(x, y, type = “n”) 으로 하면 그래프 창만 열리고 플롯 영역 안에는 빈 공간만 있게 됩니다. 여기에 낮은 수준의 그래프 함수로 그래프 기호, 선, 점, 범례 등을 추가해 나갈 수 있습니다. Figure 7.1: 낮은 수준의 그래프 함수 "],["제목과-xy축-레이블-추가하기.html", "7.1 제목과 XY축 레이블 추가하기", " 7.1 제목과 XY축 레이블 추가하기 7.1.1 title() 함수의 사용법 먼저 그래프 제목(main/sub title)과 XY축 레이블(XY axis label)을 추가하는 방법으로 title() 함수의 사용 방법에 대하여 알아 보겠습니다. title() 함수에 사용하는 옵션으로는 주 제목 main, 부 제목 sub, X축 레이블 xlab, Y축 레이블 ylab 등이 있습니다. title(main = &quot;main title to the top of plot in a large font&quot;, sub = &quot;sub-title sub at the bottom in a smaller font&quot;, xlab = &quot;x axis label&quot;, ylab = &quot;y axis label&quot;) 높은 수준의 그래프 함수, 즉 hist(), boxplot(), barplot(), plot() 등의 함수 안에서도 주 제목, 부 제목, X축 레이블, Y축 레이블을 직접 지정할 수도 있습니다. 7.1.2 높은 수준의 함수 이용 다음의 예는 높은 수준의 그래프 함수로 이를 표시한 예입니다. ##---------------------------------------------- ## 제목, 부제목, X축과 Y축의 레이블 추가하기 ##---------------------------------------------- library(MASS) par(mfrow = c(1, 1)) # 방법 (1) : 높은 수준의 함수 plot() 함수의 예 plot(MPG.highway ~ Weight, Cars93, main = &quot;제목 : Weight와 MPG.highway의 산점도&quot;, sub = &quot;부제목 : 높은 수준의 그래픽 함수&quot;, xlab = &quot;x 레이블 : Weight&quot;, ylab = &quot;y 레이블 : MPG.highway&quot;) Figure 7.2: 제목과 XY축 레이블 추가 7.1.3 낮은 수준의 그래프 함수 이용 위의 그래프와 똑같은 그래프를 낮은 수준의 그래프 함수를 사용해서 그려보겠습니다. 먼저 고급 수준의 함수 plot() 함수를 이용하여 플롯을 합니다. plot() 함수의 인수로 “ann = FALSE” 옵션을 추가해서 기본 플롯만 그립니다. 그런 다음, 위의 기본 플롯에 낮은 수준의 그래프 함수(Low level graphic function) title() 함수를 사용해서 제목, 부제목, x 레이블, 그리고 y 레이블 등의 부가정보를 추가해 보겠습니다. library(MASS) # 방법 (2) : 낮은 수준의 함수 title() 함수의 사용 예 # 1) 고급 수준의 함수 plot() 함수를 이용하여 기본 플롯을 작성합니다. # X와 Y 레이블의 삭제 : ann = FALSE plot(MPG.highway ~ Weight, Cars93, ann = FALSE) Figure 7.3: 높은 수준의 함수 이용 : 제목과 XY축 레이블 제거 # 2) 낮은 수준의 함수 title() 함수를 이용해 제목, 부제목, x 레이블, 그리고 y 레이블 등의 부가정보를 추가합니다 plot(MPG.highway ~ Weight, Cars93, ann = FALSE) title(main = &quot;플롯의 상단부에 큰 폰트로 표시되는 제목&quot;, sub = &quot;바닥에 작은 폰트로 표시되는 부제목&quot;, xlab = &quot;x 축 레이블&quot;, ylab = &quot;y 축 레이블&quot;) Figure 7.4: 제목과 XY축 레이블 추가 : 낮은 수준의 함수 title() 함수의 사용 높은 수준의 그래프 함수에서도 주 제목, 부 제목, XY축 Label 등을 설정할 수 있는데 왜 굳이 낮은 수준의 그래프 함수 title() 을 가지고 추가 정보를 입력하는지 의아할 수도 있겠습니다. 높은 수준의 그래프 함수 중에 부가정보를 입력할 수 없는 그래프 함수도 있으며, R의 장점 중에 하나가 대화형으로 그래프의 부가 정보를 추가하는 것을 직접 확인할 수 있습니다. 따라서 매우 직관적으로 탐색적 데이터 분석을 할 수 있다는 점입니다. 7.1.4 낮은 수준 함수를 이용한 글자 크기 변경 참고로, 지난 절에서 소개한 그래프 모수 (graphics parameters) 중에서 글자의 크기를 설정하는 “cex.main =,” “cex.sub =,” “cex.lab =” 옵션을 사용해서 주 제목, 부 제목, XY축 레이블의 글자 크기를 변경해보겠습니다. library(MASS) # 제목, 부제목, xy 레이블의 글자 크기를 수정하기 # X와 Y 레이블의 삭제 : ann = FALSE plot(MPG.highway ~ Weight, Cars93, ann = FALSE) # 제목, 부제목, x 레이블, 그리고 y 레이블 등의 부가정보를 추가하면서, 글자 크기도 수정합니다. title(main = &quot;cex가 2.2인 제목&quot;, sub = &quot;cex가 1.5인 부제목&quot;, xlab = &quot;cex가 1인 x 레이블&quot;, ylab = &quot;cex가 1인 y 레이블&quot;, cex.main = 2.2, # 제목의 글자 크기 cex.sub = 1.5, # 부제목의 글자 크기 cex.lab = 1) # x와 y 레이블 글자 크기 Figure 7.5: 제목, 부제목, xy 레이블의 글자 크기를 수정 : 낮은 수준의 함수 title() 함수의 사용 7.1.5 낮은 수준 함수를 이용한 글자 색 변경 col.main =, col.sub =, col.lab = 등의 모수를 이용하여 글자의 색도 지정할 수 있겠지요… library(MASS) # 제목, 부제목, xy 레이블의 글자 크기를 수정하기 # X와 Y 레이블의 삭제 : ann = FALSE plot(MPG.highway ~ Weight, Cars93, ann = FALSE) # 제목, 부제목, x 레이블, 그리고 y 레이블 등의 부가정보를 추가하면서, 글자 크기도 수정합니다. title(main = &quot;cex가 2.2인 제목&quot;, sub = &quot;cex가 1.5인 부제목&quot;, xlab = &quot;cex가 1인 x 레이블&quot;, ylab = &quot;cex가 1인 y 레이블&quot;, cex.main = 2.2, cex.sub = 1.5, cex.lab = 1, col.main = &quot;red&quot;, col.sub = &quot;red&quot;, col.lab = &quot;blue&quot;) Figure 7.6: 제목, 부제목, xy 레이블의 글자 색 지정 : 낮은 수준의 함수 title() 함수의 사용 "],["xy축-형태-변환-axisside-.html", "7.2 XY축 형태 변환 : axis(side, ...)", " 7.2 XY축 형태 변환 : axis(side, ...) 이번 절에서는 낮은 수준의 그래프 함수 두번째로 XY축의 형태를 변환시켜 주는 axis(side, ...) 함수 에 대해서 학습하겠습니다. XY축의 형태를 변경하는 axis() 함수의 기본 사용법은 다음과 같습니다. axis(side, at = NULL, labels = TRUE, tick = TRUE, line = NA, pos = NA, outer = FALSE, font = NA, lty = &quot;solid&quot;, lwd = 1, lwd.ticks = lwd, col = NULL, col.ticks = NULL, hadj = NA, padj = NA, ...) 위의 axis() 함수의 모수 중에서 사용빈도가 높은 주요 모수를 중심으로 기능을 설명하는 예를 들어보겠습니다. Table 7.1: axis() 함수의 옵션 설정 모수 설명 side 그래프의 어느 쪽에 축을 그릴지 지정하는 정수. 1 = 아래쪽 (below side) 2 = 왼쪽 (left side) 3= 위쪽 (above side) 4 = 오른쪽 (right side) at 축의 눈금이 그려질 곳의 위치를 지정하는 점들 labels 축 눈금에 레이블 데이터를 입력하는 숫자형 벡터, 혹은 문자형 벡터 tick 축의 눈금과 축의 선을 그릴지를 설정하는 논리형 값 pos 해당 축이 다른 축과 교차하는 좌표 lty 축과 눈금의 선의 유형 lwd 축의 눈금의 선의 두께 col 축과 눈금 선의 색깔 tck 눈금의 방향과 길이 설정- 양수 : 그래프 안쪽으로 눈금 생성- 음수 : 그래프 바깥쪽으로 눈금 생성 hadj 수평 레이블에 대한 수정 padj 수직 레이블에 대한 수정 7.2.1 X축과 Y축의 제거 X축과 Y축을 변경하기 전에 먼저 “axes = FALSE” 옵션을 사용해서 X축과 Y축을 제거해야 합니다. X축만 선별적으로 제거하려면 xaxt = \"n\", Y축만 선별적으로 제거하려면 yaxt = \"n\" 옵션을 사용하면 되겠습니다. 아래에 각각의 예를 들어보았습니다. library(MASS) ##--------------------------------------------- ## 높은 수준의 함수 모수 : main, axes, xaxt, yaxt ##--------------------------------------------- # 기본 par 설정값을 저장합니다. op &lt;- par(no.readonly = TRUE) # par() 함수의 옵션을 변경합니다. par(mfrow=c(2, 2)) # 프레임을 2행 2열로 분할합니다. # X와 Y축을 플롯합니다. plot(MPG.highway ~ Weight, Cars93, main = &quot;plot with X and Y axis&quot;) # X와 Y축을 제거합니다. : axes = FALSE plot(MPG.highway ~ Weight, Cars93, axes = FALSE, main = &quot;axes = FALSE&quot;) # X 축만 제거합니다 : xaxt = &quot;n&quot; plot(MPG.highway ~ Weight, Cars93, xaxt = &quot;n&quot;, main = &quot;xaxt = n&quot;) # Y 축만 제거합니다 : yaxt = &quot;n&quot; plot(MPG.highway ~ Weight, Cars93, yaxt = &quot;n&quot;, main = &quot;yaxt = n&quot;) Figure 7.7: X축과 Y축의 제거 : 높은 수준의 함수 모수 이용 # 원래의 par 기본 값을 불러옵니다. par(op) 7.2.2 X축과 Y축의 눈금 간격 변경 X축과 Y축의 범위를 알아보기 위해 summary() 함수로 기술통계량을 알아보겠습니다. library(MASS) # x축과 y축의 통계 요약 정보를 확인합니다. summary(Cars93$Weight) # X 축 ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 1695 2620 3040 3073 3525 4105 summary(Cars93$MPG.highway) # Y 축 ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 20 26 28 29 31 50 X축으로 Weight (차의 무게)를, Y축으로는 MPG.highway(고속도로 연비)로 하는 산점도를 그렸을 때, X축은 1600~4200까지의 범위로 100씩 증가하는 눈금을, Y축은 18~52까지의 범위로 2씩 증가하는 눈금으로 그려보겠습니다. ##--------------------------------------------- ## 낮은 수준의 그래픽 함수 : axis(side, ...) ##--------------------------------------------- # X 축의 범위 (1600 ~ 4200, by 100) # Y 축의 범위 (18 ~ 52, by 2) # 1) X축과 Y축이 없는 산점도를 그립니다. plot(MPG.highway ~ Weight, Cars93, axes = FALSE, xlim = c(1600, 4200), ylim = c(18, 52), main = &quot;Weight와 MPG.highway의 산점도&quot;) x &lt;- seq(1600, 4200, by = 100) # x 축의 눈금 설정 y &lt;- seq(18, 52, by = 2) # y 축의 눈금 설정 # 2) X축의 눈금을 그립니다. axis(side = 1, # bottom side at = x, labels = TRUE, pos = 18, # X 축의 시작점 좌표. tck = 0.02) # 0.02 길이로 수직 방향의 틱 마크 표시 # 3) Y축의 눈금을 그립니다. axis(side = 2, # left side + at = y, labels = TRUE, pos = 1600, # Y 축의 시작점 좌표 tck = -0.02) # 0.02 길이로 수평 방향의 틱 마크 표시 Figure 7.8: X축과 Y축 : 낮은 수준의 함수 axis 함수의 사용 "],["점-추가.html", "7.3 점 추가", " 7.3 점 추가 7.3.1 points() 함수의 사용법 이번 절에서는 낮은 수준의 그래프 함수 네번째로 points(x, y) 함수를 이용하여 점을 추가하는 방법에 대하여 학습하겠습니다. points() 함수의 일반적인 사용법은 다음과 같습니다. points(x, y = NULL, type = &quot;p&quot;, ...) Table 7.2: points() 함수의 일반적 사용법 구분 기능 설명 x,y x, y 좌표 벡터 (coordinate vectors of points to plot) type = \"p\" 그래프 유형 = “점 그래프” ... 기호 모양(pch), 색깔(col), 크기(cex) 등의 그래프 모수 (parameters) 사용 MASS 패키지에 내장되어 있는 Cars93 데이터프레임의 차량 무게(Weight), 고속도로 연비 (MPG.highway), 차종 (Type) 변수를 사용해서 점을 추가하는 그래프를 실습해보겠습니다. 높은 수준의 그래프 함수 중에서 plot(x, y, type = 'p') 로 하면 점 그래프 (points plot)을 그릴 수 있습니다. 7.3.2 점을 추가하는 방법 plot(x, y, type = 'p')로 산점도를 그리고, 그 위에 points(x, y) 함수로 점을 추가하는 예를 살펴 보겠습니다. 정확히 두 개 그래프가 일치합니다. library(MASS) ##----------------------------------------- ## 점 추가 : point(x, y) ##----------------------------------------- # 고수준 함수 plot()을 이용하여 산점도 그리기 attach(Cars93) ## The following object is masked _by_ .GlobalEnv: ## ## Cylinders plot(Weight, MPG.highway, type = &#39;p&#39;) # 점 플롯입니다. Figure 7.9: 점의 추가 : 높은 수준의 함수 사용 다음은 낮은 수준의 함수인 points() 함수를 이용하여 점을 추가하는 예를 보여주고 있습니다. # 플롯 위에 낮은 수준의 함수 point() 를 이용하여 점을 추가합니다. plot(Weight, MPG.highway, type = &#39;n&#39;) # 빈 플롯입니다. points(Weight, MPG.highway) # 위의 플롯과 정확히 똑 같습니다. Figure 7.10: 점의 추가 : 낮은 수준의 함수 points() 함수의 사용 detach(Cars93) 그러면 왜 굳이 points() 라는 낮은 수준의 함수를 가지고 점을 추가하려고 하는 것인지 의문이 들것입니다. 그 이유는 points() 함수를 가지고 필요에 따라서 순차적으로 점을 추가할 수 있고, 조건을 부여하고 그래프 모수 중에 색깔이나 기호 모양 등을 다르게 해서 탐색적 분석을 진행하는데 유용하기 때문입니다. 물론 plot(x, y, type = 'p')로 원하는 그래프를 그릴 수 있다면 points()함수를 사용할 필요는 없겠지요. 아래에 points()의 몇 가지 사용 형태를 보시고 필요한 상황에 맞게 골라 쓰면 되겠습니다. 아래에는 차종(Type)별로 기호 모양과 색깔을 달리하면서 무게(Weight)와 고속도로 연비(MPG.highway) 산점도를 그려보겠습니다. 2차원의 x, y 공간에 차종(Type)이라는 제3의 차원을 추가해서 볼 수 있는 매우 유용한 방법입니다. Base Graphics 에서는 조건의 갯수만큼 손이 참 많이 가는 단점이 있습니다 (참고로, ggplot2 plotting system을 사용하면 조건에 따른 색이나 기호를 달리하도록 지정하는게 한 줄이면 끝나고, 범례(legend)도 알아서 추가해주므로 편합니다). 7.3.3 점의 속성 추가 library(MASS) attach(Cars93) ## The following object is masked _by_ .GlobalEnv: ## ## Cylinders # 현재의 빈 플롯에 pch, col, cex 모수를 설정한 점을 추가합니다. plot(Weight, MPG.highway, type = &#39;n&#39;) # 빈 플롯입니다. points(Weight, MPG.highway, pch = 15, col = &quot;blue&quot;, cex = 1.5) Figure 7.11: 점의 속성 추가 : 낮은 수준의 함수 points() 함수의 사용 detach(Cars93) 산점도의 점들을 조건에 따라 상이한 문자의 점으로 추가할 수도 있습니다. library(MASS) attach(Cars93) ## The following object is masked _by_ .GlobalEnv: ## ## Cylinders # 조건에 따라 상이한 문자의 점을 추가합니다. plot(Weight, MPG.highway, type = &#39;n&#39;) # 빈 플롯을 그립니다. table(Cars93$Type) ## ## Compact Large Midsize Small Sporty Van ## 16 11 22 21 14 9 # Type = Compact 인 경우 points(Weight[Type == &quot;Compact&quot;], MPG.highway[Type == &quot;Compact&quot;], pch = 0) # Type = Large 인 경우 points(Weight[Type == &quot;Large&quot;], MPG.highway[Type == &quot;Large&quot;], pch = 1) # Type = Midsize 인 경우 points(Weight[Type == &quot;Midsize&quot;], MPG.highway[Type == &quot;Midsize&quot;], pch = 17, col = &quot;yellow&quot;) # Type = Small 인 경우 points(Weight[Type == &quot;Small&quot;], MPG.highway[Type == &quot;Small&quot;], pch = 3) # Type = Sporty 인 경우 points(Weight[Type == &quot;Sporty&quot;], MPG.highway[Type == &quot;Sporty&quot;], pch = 9) # Type = Van 인 경우 points(Weight[Type == &quot;Van&quot;], MPG.highway[Type == &quot;Van&quot;], pch = 15, col = &quot;blue&quot;) title(&quot;자동차 종류에 따라 상이한 문자의 점 추가&quot;) # 상단부 오른쪽에 범례를 추가합니다. legend(&quot;topright&quot;, # 범례의 표시 위치입니다. c(&quot;Compact&quot;, &quot;Large&quot;, &quot;Midsize&quot;, &quot;Small&quot;, &quot;Sporty&quot;, &quot;Van&quot;), # 범례로 출력될 문자열입니다. col = c(&quot;black&quot;, &quot;black&quot;, &quot;yellow&quot;, &quot;black&quot;, &quot;black&quot;, &quot;blue&quot;), # 범례의 색깔입니다 pch = c(0, 1, 17, 3, 9, 15) # 표시될 기호 문자입니다. ) Figure 7.12: 조건에 따른 상이한 속성의 점 추가 : 낮은 수준의 함수 points() 함수의 사용 detach(Cars93) "],["직선의-연결과-추가.html", "7.4 직선의 연결과 추가", " 7.4 직선의 연결과 추가 이번 절에서는 낮은 수준의 그래프 함수 세 번째로 lines(x, y), abline(a, b), abline(h=y), abline(v=x) 등의 함수를 이용한 직선 연결 및 추가에 대해서 소개하겠습니다. MASS 패키지에 들어있는 Cars93 데이터프레임의 Weight (차의 무게)와 MPG.highway (고속도로 연비) 두 개의 변수를 가지고 산포도를 그린 후에, lines() 함수로 선형 회귀식을 추가해보고, abline() 함수로 x축과 y축의 평균으로 수직선과 수평선을 추가하여 보겠습니다. lines()함수의 일반적인 사용법은 다음과 같습니다. lines(x, y = NULL, type = &quot;l&quot;, ...) Table 7.3: lines() 함수의 기능 설명 구분 기능 설명 x, y x, y 좌표 벡터 (coordinate vectors of points to join) type = \"l\" 선(line) 그래프라는 뜻임 (character indicating the type of plotting) ... 선 유형 (lty), 선 색깔 (col), 선 두께(lwd) 등의 그래프 모수 입력 (Further graphical parameters) abline() 함수의 사용법은 다음과 같습니다. abline(a = NULL, b = NULL, h = NULL, v = NULL, reg = NULL, coef = NULL, untf = FALSE, ...) Table 7.4: ablines() 함수의 기능 설명 구분 기능 설명 a, b 절편과 기울기, 단일 값 h y값을 지나는 수평선 v x값을 지나는 수직선 reg 회귀직선 추가 coef 절편과 기울기로 이루어진 벡터 untf 변환 안된 값을 쓸지를 묻는 옵션. 만약 y값을 로그변환한 경우 untf = TRUE 라고 설정하면 로그변환 전의 원래값 기준으로 좌표에 그래프가 그려짐 * 출처 : http://sites.stat.psu.edu/~dhunter/R/html/graphics/html/abline.html 7.4.1 선형 회귀선의 추가 먼저 회귀모형을 구하는 lm() 함수를 사용해서 y = MPG.highway (고속도로 연비), x = Weight (차의 무게) 변수 간의 선형 회귀모형을 만들면 아래와 같습니다. library(MASS) ##------------------------------------ ## 플롯에 선을 추가합니다. ##------------------------------------ # 회귀 모형을 적용합니다. str(Cars93) ## &#39;data.frame&#39;: 93 obs. of 27 variables: ## $ Manufacturer : Factor w/ 32 levels &quot;Acura&quot;,&quot;Audi&quot;,..: 1 1 2 2 3 4 4 4 4 5 ... ## $ Model : Factor w/ 93 levels &quot;100&quot;,&quot;190E&quot;,&quot;240&quot;,..: 49 56 9 1 6 24 54 74 73 35 ... ## $ Type : Factor w/ 6 levels &quot;Compact&quot;,&quot;Large&quot;,..: 4 3 1 3 3 3 2 2 3 2 ... ## $ Min.Price : num 12.9 29.2 25.9 30.8 23.7 14.2 19.9 22.6 26.3 33 ... ## $ Price : num 15.9 33.9 29.1 37.7 30 15.7 20.8 23.7 26.3 34.7 ... ## $ Max.Price : num 18.8 38.7 32.3 44.6 36.2 17.3 21.7 24.9 26.3 36.3 ... ## $ MPG.city : int 25 18 20 19 22 22 19 16 19 16 ... ## $ MPG.highway : int 31 25 26 26 30 31 28 25 27 25 ... ## $ AirBags : Factor w/ 3 levels &quot;Driver &amp; Passenger&quot;,..: 3 1 2 1 2 2 2 2 2 2 ... ## $ DriveTrain : Factor w/ 3 levels &quot;4WD&quot;,&quot;Front&quot;,..: 2 2 2 2 3 2 2 3 2 2 ... ## $ Cylinders : Factor w/ 6 levels &quot;3&quot;,&quot;4&quot;,&quot;5&quot;,&quot;6&quot;,..: 2 4 4 4 2 2 4 4 4 5 ... ## $ EngineSize : num 1.8 3.2 2.8 2.8 3.5 2.2 3.8 5.7 3.8 4.9 ... ## $ Horsepower : int 140 200 172 172 208 110 170 180 170 200 ... ## $ RPM : int 6300 5500 5500 5500 5700 5200 4800 4000 4800 4100 ... ## $ Rev.per.mile : int 2890 2335 2280 2535 2545 2565 1570 1320 1690 1510 ... ## $ Man.trans.avail : Factor w/ 2 levels &quot;No&quot;,&quot;Yes&quot;: 2 2 2 2 2 1 1 1 1 1 ... ## $ Fuel.tank.capacity: num 13.2 18 16.9 21.1 21.1 16.4 18 23 18.8 18 ... ## $ Passengers : int 5 5 5 6 4 6 6 6 5 6 ... ## $ Length : int 177 195 180 193 186 189 200 216 198 206 ... ## $ Wheelbase : int 102 115 102 106 109 105 111 116 108 114 ... ## $ Width : int 68 71 67 70 69 69 74 78 73 73 ... ## $ Turn.circle : int 37 38 37 37 39 41 42 45 41 43 ... ## $ Rear.seat.room : num 26.5 30 28 31 27 28 30.5 30.5 26.5 35 ... ## $ Luggage.room : int 11 15 14 17 13 16 17 21 14 18 ... ## $ Weight : int 2705 3560 3375 3405 3640 2880 3470 4105 3495 3620 ... ## $ Origin : Factor w/ 2 levels &quot;USA&quot;,&quot;non-USA&quot;: 2 2 2 2 2 1 1 1 1 1 ... ## $ Make : Factor w/ 93 levels &quot;Acura Integra&quot;,..: 1 2 4 3 5 6 7 9 8 10 ... # fitting regression model fit.1 &lt;- lm(MPG.highway ~ Weight, data = Cars93) 다음으로, Weight (무게)와 MPG.highway (고속도로 연비)의 두 변수 산포도를 그리고, 위에서 만든 선형 회귀선을 추가해보겠습니다. 플롯에 선을 추가하는 데에는 세 가지 방법이 있습니다. lines() 함수를 사용하는 방법, abline(reg = ) 함수를 사용하는 방법, abline(a = coef[1], b = coef[2])를 사용하는 방법 등입니다. 참고로, 이렇게 추가되는 선에 대하여 그래프 모수(parameters)로서 색깔 지정은 col, 선 유형 지정은 lty, 선 두께 지정은 lwd 를 사용하면 됩니다. library(MASS) ## 현재의 플롯에 선을 추가하는 방법입니다. # (1) lines() 함수의 이용 with(Cars93, plot(MPG.highway ~ Weight)) # Weight와 MPG.highway의 산점도를 그립니다. lines(Cars93$Weight, fit.1$fitted.values, col = &quot;blue&quot;) # 산점도 위에 선을 추가합니다. title(&quot;회귀선의 추가 : lines()&quot;) Figure 7.13: 선의 추가 : 낮은 수준의 함수 lines(), abline() 함수의 사용 # (2) abline(reg = regression_model) 함수의 이용 with(Cars93, plot(MPG.highway ~ Weight)) abline(reg = fit.1, col = &quot;red&quot;, lwd = 3) title(&quot;회귀선의 추가 : abline(reg = )&quot;) Figure 7.14: 선의 추가 : 낮은 수준의 함수 lines(), abline() 함수의 사용 # (3) abline(a = fit.1$coef[1], b = fit.1$coef[2]) 함수의 이용 with(Cars93, plot(MPG.highway ~ Weight)) abline(a = fit.1$coef[1], b = fit.1$coef[2], col = &quot;black&quot;, lwd = 3) title(&quot;회귀선의 추가 : abline(a = coef[1], b = coef[2])&quot;) Figure 7.15: 선의 추가 : 낮은 수준의 함수 lines(), abline() 함수의 사용 fit.1$coef # 회귀 모형의 계수(기울기와 절편)입니다. ## (Intercept) Weight ## 51.6014 -0.0073 fit.1$coef[1] # 절편입니다. ## (Intercept) ## 52 fit.1$coef[2] # 기울기입니다. ## Weight ## -0.0073 7.4.2 비모수 회귀선의 추가 이번에는 loess.smooth() 함수로 비모수 회귀곡선을 적합시키고, lines() 함수로 평탄화된 회귀선(smoothed regression line)을 현재 그래프에 추가해보는 방법을 알아보겠습니다. library(MASS) ## 현재의 플롯에 평탄화된 회귀선을 추가합니다.: lines(), loess.smooth() # (1) 비모수 회귀선 적합화 fit.2 &lt;- loess.smooth(x = Cars93$Weight, y = Cars93$MPG.highway) names(fit.2) ## [1] &quot;x&quot; &quot;y&quot; fit.2$x ## [1] 1695 1744 1793 1843 1892 1941 1990 2039 2088 2138 2187 2236 2285 2334 2384 ## [16] 2433 2482 2531 2580 2629 2679 2728 2777 2826 2875 2925 2974 3023 3072 3121 ## [31] 3171 3220 3269 3318 3367 3416 3466 3515 3564 3613 3662 3712 3761 3810 3859 ## [46] 3908 3957 4007 4056 4105 # (2) 평탄화된 회귄서의 추가 with(Cars93, plot(MPG.highway ~ Weight)) lines(fit.2$x, fit.2$y, col = &quot;blue&quot;, lwd = 3) title(&quot;평탄화된 회귀선의 추가: lines(), loess.smooth()&quot;) Figure 7.16: 선형 회귀선의 추가 : 낮은 수준의 함수 lines(), abline() 함수의 사용 7.4.3 수평선과 수직선의 추가 abline()함수를 이용하여 플롯에 x축과 y축의 평균을 나타내는 수평선과 수직선을 추가해 보겠습니다. abline(v = ) : 수직선(vertical)을 추가합니다. v = 에 수직선을 표시할 X축의 값을 입력해 줍니다. abline(h = ) : 수평선(horizontal)을 추가합니다. h = 에 수평선을 표시할 y축의 값을 입력해 줍니다. library(MASS) ## 수평선과 수직선을 추가하기 : abline() with(Cars93, plot(MPG.highway ~ Weight)) # (1) 수직선의 추가 abline(v = mean(Cars93$Weight), col = &quot;black&quot;, lty = 3, lwd = 2) # (2) 수평선의 추가 abline(h = mean(Cars93$MPG.highway), col = &quot;blue&quot;, lty = 3, lwd = 2) title(&quot;수평선과 수직선 추가 : abline()&quot;) Figure 7.17: 수평/수직선의 추가 : 낮은 수준의 함수 abline() 함수의 사용 "],["문자열-추가.html", "7.5 문자열 추가", " 7.5 문자열 추가 이번 절에서는 낮은 수준의 그래프 함수 네번째로 text(x, y, labels, ...), mtext() 함수를 이용하여 문자열을 추가하는 방법에 대해서 학습하겠습니다. 그래프에 문자를 추가할 때 text() 함수와 mtext() 함수를 사용합니다. 차이점은 text()가 그래프 내에 문자열을 추가할 때 사용하는 반면, mtext()는 외부 마진 영역(1 하단, 2 좌측, 3 상단, 4 우측)에 문자를 추가할 때 사용한다는 것입니다. text() 함수와 mtext() 함수의 일반적인 사용법은 표 7.5 와 같습니다. Table 7.5: text() 함수와 mtext() 함수의 일반적 사용법 함수 (function) 사용법 (usage) text() text(x, y, labels = , pos = , ... ) mtext() mtext(\"text to place\", side = , line = , adj, outer = , ... ) 또한 text() 함수와 mtext() 함수의 모수는 표 7.6 과 같습니다. Table 7.6: text() 함수와 mtext() 함수의 옵션 기능 설명 함수 옵션 기능 설명 text() x, y 문자를 추가할 위치의 x, y좌표. 단, x, y 좌표 대신에 locator(1) 을 입력하면 커서로 지적하는 곳에 문자를 추가함 labels = 추가할 문자 pos = 1 = 하단부2 = 왼쪽3 = 상단부(기본값)4 = 오른쪽 좌표를 기준으로 문자를 입력할 상대적인 위치 ... 폰트, 색깔, 크기 등의 그래프 모수 지정 mtext() 추가할 문자 side = 1 = 하단부2 = 왼쪽3 = 상단부(기본값)4 = 오른쪽 문자를 추가할 위치 line = 0 ~ 문자와 그래프와의 마진 거리 adj = 0 : 왼쪽/아래쪽 정렬1 : 위쪽/오른쪽 정렬생략 : 중앙 정렬 outer = TRUE : 외부마진에 문자 추가 FALSE : 내부마진에 문자 추가 ... 폰트, 색깔, 크기 등의 그래프 모수 지정 7.5.1 text() 함수의 사용 먼저 text() 함수를 사용하여 그래프 내에 문자열을 추가하는 방법을 살펴보도록 하겠습니다. MASS 패키지에 내장되어있는 Cars93 데이터프레임의 차 무게 (Weight), 고속도로 연비 (MPG.highway) 변수를 활용해서 산점도를 그리고, 각 점에 해당하는 모델명을 모델명(Model) 변수의 텍스트로 추가해 보겠습니다. library(MASS) ##------------------------------------------- ## 플롯에 문자열 추가 : text(), mtext() ##------------------------------------------- ## 플롯에 문자열 추가 : text() attach(Cars93) ## The following object is masked _by_ .GlobalEnv: ## ## Cylinders plot(Weight, MPG.highway, main = &quot;MPG.highway ~ Weight의 산점도&quot;) text(x = Weight, y = MPG.highway, labels = Model, pos = 3, cex = 0.5) Figure 7.18: 산포도 : 플롯에 문자열 추가 - text() 함수의 사용 text(x, y, ) 좌표 대신에 text(locator(1), ) 옵션을 사용하면 대화방식으로 플롯 화면 상에 문자가 들어갈 위치를 마우스로 클릭해서 지정할 수 있습니다. 재현 가능성(reproducible research) 관점에서 보면 추천할 만한 방법은 아닙니다. 그러나, x, y 좌표를 정확히 모르거나, 한번만 간편하게 그래프를 그려볼 목적이라면 큰 문제는 없습니다. # 텍스트가 들어갈 위치를 마우스로 선택하기 : locator(1) text(locator(1), labels = &quot;연비가 낮음&quot;) detach(Cars93) 7.5.2 mtext() 함수의 사용 다음으로 mtext() 를 사용해서 그래프 외부 마진 영역에 문자열을 추가해보는 예제입니다. title() 함수로 제목을 추가하는 것과 유사한 측면이 있습니다. mtext()의 경우 여러 개의 그래프를 결합했을 때 외부마진에 그래프 전체의 제목을 자유롭게 추가할 수 있다는 유용한 장점이 있습니다. library(MASS) ## 4개의 마진 중 한 곳에 문자열 추가하기 : mtext() # 기본 par 설정 값을 저장합니다. op &lt;- par(no.readonly = TRUE) # 1개 행에 2개의 그래프를 배치합니다. par(mfrow = c(1,2), # 1행 2개 플롯 oma = c(2, 2, 4, 1)) # 외부 마진 attach(Cars93) ## The following object is masked _by_ .GlobalEnv: ## ## Cylinders ## The following objects are masked from Cars93 (pos = 3): ## ## AirBags, Cylinders, DriveTrain, EngineSize, Fuel.tank.capacity, ## Horsepower, Length, Luggage.room, Make, Man.trans.avail, ## Manufacturer, Max.Price, Min.Price, Model, MPG.city, MPG.highway, ## Origin, Passengers, Price, Rear.seat.room, Rev.per.mile, RPM, ## Turn.circle, Type, Weight, Wheelbase, Width plot(Weight, MPG.highway, main = &quot;산포도 1&quot;) # 그림 1 plot(Horsepower, MPG.highway, main = &quot;산포도 2&quot;) # 그림 2 mtext(&quot;Weight, Horsepower와 MPG.Highway&quot;, side = 3, # 문자열 위치 : 3 = 상단부 line = 1, # 그래프와 문자열의 마진 거리 (0부터 시작) adj = 2, # 문자열 정렬 위치 : 가운데 정렬 cex = 2, # 폰트 크기 outer = TRUE) # TRUE : 외부 마진에 문자열 위치 Figure 7.19: 산포도 : 4개의 마진 중 한 곳에 문자열 추가하기 - mtext() 함수 이용 detach(Cars93) # 원래의 par 설정값으로 환원 par(op) 위의 예에서 mtext() 함수 내의 side, line, adj, cex, outer 등의 설정값을 하나씩 수정하면서 연습해 보면 옵션 설정을 이해하는데 도움이 될 것입니다. "],["범례-추가-legendx-y-legend-.html", "7.6 범례 추가 : legend(x, y, legend, ...)", " 7.6 범례 추가 : legend(x, y, legend, ...) 이번 절에서는 낮은 수준의 그래프 함수 네번째로 legend(x, y, legend, ...) 함수를 이용하여 범례(legend)를 추가하는 방법에 대해 살펴보겠습니다. 범례를 추가하는 legend()함수의 일반적인 사용법은 아래와 같습니다. legend(x, y = NULL, legend, fill = NULL, col = par(&quot;col&quot;), border = &quot;black&quot;, lty, lwd, pch, angle = 45, density = NULL, bty = &quot;o&quot;, bg = par(&quot;bg&quot;), box.lwd = par(&quot;lwd&quot;), box.lty = par(&quot;lty&quot;), box.col = par(&quot;fg&quot;), pt.bg = NA, cex = 1, pt.cex = cex, pt.lwd = lwd, xjust = 0, yjust = 1, x.intersp = 1, y.intersp = 1, adj = c(0, 0.5), text.width = NULL, text.col = par(&quot;col&quot;), text.font = NULL, merge = do.lines &amp;&amp; has.pch, trace = FALSE, plot = TRUE, ncol = 1, horiz = FALSE, title = NULL, inset = 0, xpd, title.col = text.col, title.adj = 0.5, seg.len = 2) 플롯 위에 범례를 표시하기 위한 옵션도 엄청나게 많습니다. 그만큼 선택의 폭이 넓다는 것입니다. 이 절에서는 이 중에서 중요한 몇 가지 옵션을 중심으로 살펴보겠습니다. Table 7.7: legend() 함수의 옵션 설정 구분 옵션 기능 x, y \"bottomright\"\"bottom\"\"bottomleft\"\"left\"\"topleft\"\"top\"\"topright\"\"right\"\"center\" 범례를 추가할 위치를 설정하는 3가지 방법 (1) x, y 좌표를 입력하면 범례 사각형의 왼쪽 상단이 그 지점에 위치함 (2) locator(1)을 입력하면 마우스 포인터로 가리키는 지점에 범례 생성 (3) 위치를 나타내는 아래의 9개 단어 중 하나를 선택해서 입력 legend 길이가 1보다 큰 문자(character) 혹은 범례를 담은 벡터 col 색깔 지정 벡터 lty 선 유형 지정 벡터 lwd 선 두께 지정 벡터 pch 기호 지정 벡터 ... 그래픽 모수 추가 설정 가능 MASS 패키지에 내장된 Cars93데이터프레임의 차종(Type) 별로 차 무게(Weight)와 고속도로 연비 (MPG.highway) 변수를 사용해서 산점도를 그려보겠습니다. 그리고 차종(Type) 그룹에 대한 범례(legend)를 추가해보겠습니다. 7.6.1 x, y 좌표를 직접 입력하여 범례 위치 설정 library(MASS) # 산점도를 먼저 그립니다. attach(Cars93) ## The following object is masked _by_ .GlobalEnv: ## ## Cylinders ## The following objects are masked from Cars93 (pos = 3): ## ## AirBags, Cylinders, DriveTrain, EngineSize, Fuel.tank.capacity, ## Horsepower, Length, Luggage.room, Make, Man.trans.avail, ## Manufacturer, Max.Price, Min.Price, Model, MPG.city, MPG.highway, ## Origin, Passengers, Price, Rear.seat.room, Rev.per.mile, RPM, ## Turn.circle, Type, Weight, Wheelbase, Width # 빈 산점도를 그립니다. plot(Weight, MPG.highway, type = &#39;n&#39;) # blank plot # 자동차의 종류(Type) 별로 산점도에 점으로 표시될 기호와 색깔을 다르게 선택합니다. types &lt;- levels(Type) pchs &lt;- c(0, 1, 17, 3, 0, 15) cols &lt;- c(&quot;black&quot;, &quot;black&quot;, &quot;yellow&quot;, &quot;black&quot;, &quot;black&quot;, &quot;blue&quot;) for (i in 1:6) { # for() 반복구문을 이용하여 차종별 점을 points() 함수로 그립니다. points(Weight[Type == types[i]], MPG.highway[Type == types[i]], pch = pchs[i], col = cols[i]) } title(&quot;플롯에 범례 추가하기&quot;) # 전체 제목을 표시합니다. # 상단부 오른쪽(&quot;topright&quot;)에 범례를 추가합니다. legend(x = 3500, y = 50, types, col = cols, pch = pchs ) Figure 7.20: 범례 위치를 x, y 좌표를 직접 입력하여 지정 detach(Cars93) 7.6.2 범례의 위치를 문자열로 지정하기 library(MASS) # 산점도를 먼저 그립니다. attach(Cars93) ## The following object is masked _by_ .GlobalEnv: ## ## Cylinders ## The following objects are masked from Cars93 (pos = 3): ## ## AirBags, Cylinders, DriveTrain, EngineSize, Fuel.tank.capacity, ## Horsepower, Length, Luggage.room, Make, Man.trans.avail, ## Manufacturer, Max.Price, Min.Price, Model, MPG.city, MPG.highway, ## Origin, Passengers, Price, Rear.seat.room, Rev.per.mile, RPM, ## Turn.circle, Type, Weight, Wheelbase, Width # 빈 산점도를 그립니다. plot(Weight, MPG.highway, type = &#39;n&#39;) # blank plot # 범례가 표시될 위치를 문자열 키워드로 지정합니다. loc &lt;- &quot;topright&quot; # 자동차의 종류(Type) 별로 산점도에 점으로 표시될 기호와 색깔을 다르게 선택합니다. types &lt;- levels(Type) pchs &lt;- c(0, 1, 17, 3, 0, 15) cols &lt;- c(&quot;black&quot;, &quot;black&quot;, &quot;yellow&quot;, &quot;black&quot;, &quot;black&quot;, &quot;blue&quot;) for (i in 1:6) { # for() 반복구문을 이용하여 차종별 점을 points() 함수로 그립니다. points(Weight[Type == types[i]], MPG.highway[Type == types[i]], pch = pchs[i], col = cols[i]) } title(&quot;플롯에 범례 추가하기&quot;) # 전체 제목을 표시합니다. # 상단부 오른쪽(&quot;topright&quot;)에 범례를 추가합니다. legend(loc, types, col = cols, pch = pchs ) Figure 7.21: 문자열로 범례의 위치를 지정하기 detach(Cars93) 앞의 예에서 문자열의 위치를 loc 변수에 “topright”로 지정하고 있습니다. 이 값을 다른 값으로 수정해서 다시 그래프를 그려보기 바랍니다. "],["다각형-추가-polygonx-y.html", "7.7 다각형 추가 : polygon(x, y, …)", " 7.7 다각형 추가 : polygon(x, y, …) 이번 절에서는 낮은 수준의 그래프 함수로 polygon(x, y, ...) 함수를 이용하여 다각형을 추가하는 방법에 대해서 알아 보겠습니다. 다각형을 그리는 polygon()함수의 일반적인 사용법은 다음과 같습니다. polygon(x, y = NULL, density = NULL, angle = 45, border = NULL, col = NA, lty = par(&quot;lty&quot;), ..., fillOddEven = FALSE) Table 7.8: polygon() 함수의 옵션 설정 구분 옵션 설명 x, y 다각형의 좌표의 벡터 density 다각형 안을 채우는 음영 선의 밀도 (default 는 NULL) angle 음영있는 선의 각도 (수평선을 기준으로 해서 반시계방향) border 다각형 테두리의 색깔 col 다각형을 채우는 색깔 (default 는 NA) lty 0 = blank1 = solid (기본 값)2 = dashed3 = dotted4 = dot dash5 = long dash6 = two dash par()함수에서 사용하는 선 유형 ... 추가로 그래프 모수 사용 가능 fillOddEven 다각형의 음영을 논리적으로 조절하는 모드 (default 는 FALSE) 두 개의 삼각형을 테두리의 색깔(border)과 선 유형(lty), 다각형을 채우는 색깔(col), 다각형을 채우는 선의 밀도(density)와 각도(angle), 색깔(col)을 달리해서 그려보겠습니다. x와 y의 좌표값의 중간에 “NA” 가 들어있음에 주의해서 보시기 바랍니다. ##------------------------------------- ## 다각형 추가하기 : polygon(x, y, ...) ##------------------------------------- # NA 값을 갖는 복수 개의 다각형 plot(c(1, 6), c(-3.5, 3.5), type = &quot;n&quot;) x &lt;- c(1, 2, 3, NA, 4, 4, 6) y &lt;- c(1, -3, 2, NA, -3, 3, -3) polygon(x, y, col = c(&quot;yellow&quot;, &quot;blue&quot;), border = c(&quot;black&quot;, &quot;red&quot;), lwd = 2, lty = c(&quot;dotted&quot;, &quot;solid&quot;)) title(&quot;NA 값을 갖는 복수 개의 다각형&quot;) Figure 7.22: NA 값을 갖는 복수 개의 다각형 추가하기 아래의 다각형은 위의 예와 거의 비슷합니다. 단 한가지 차이점이라면 x, y의 좌표값에 “NA”가 없다는 점입니다. “NA” 가 없다보니 중간에 다각형을 분리하지를 못하고, 그냥 하나의 색깔, 선 유형, 다각형 채우는 색을 계속 사용하고 있습니다. ## NA가 없는 경우의 복수 개의 다각형 plot(c(1, 6), c(-3.5, 3.5), type = &quot;n&quot;) x &lt;- c(1, 2, 3, 4, 4, 6) y &lt;- c(1, -3, 2, -3, 3, -3) polygon(x, y, col = c(&quot;yellow&quot;, &quot;blue&quot;), border = c(&quot;black&quot;, &quot;red&quot;), lwd = 2, lty = c(&quot;dotted&quot;, &quot;solid&quot;)) title(&quot;NA가 없는 복수 개의 다각형&quot;) Figure 7.23: NA가 없는 복수 개의 다각형 추가하기 이번에는 다각형 안의 음영을 선으로 채우는 방법을 소개하겠습니다. density 로 선의 밀도(숫자가 클 수록 촘촘해짐)를 지정하고, angle 로 선의 각도(수평선을 기준으로 반시계방향)를 지정하면 됩니다. # 선이 추가된 다각형 plot(c(1, 6), c(-3.5, 3.5), type = &quot;n&quot;) x &lt;- c(1, 2, 3, NA, 4, 4, 6) y &lt;- c(1, -3, 2, NA, -3, 3, -3) polygon(x, y, col = c(&quot;yellow&quot;, &quot;blue&quot;), border = c(&quot;black&quot;, &quot;red&quot;), lwd = 2, lty = c(&quot;dotted&quot;, &quot;solid&quot;), density = c(10, 20), angle = c(45, -45)) title(&quot;선이 추가된 다각형&quot;) Figure 7.24: 선이 추가된 다각형 아래 다각형은 x, y 좌표값이 위의 예와는 좀 다릅니다. 두 좌표 값들 간의 거리에 색깔을 채워넣은 형태의 그래프인데요, polygon() 함수로 이런 그래프도 그릴 수 있다는 예시로 보면 좋겠다 싶어서 www.math.cula.edu 사이트에서 참조하였습니다. ## 색칠된 다각형 # 출처 : http://www.math.ucla.edu/~anderson/rw1001/library/base/html/polygon.html set.seed(3232) n &lt;- 100 xx &lt;- c(0:n, n:0) yy &lt;- c(c(0, cumsum(rnorm(n))), rev(c(0, cumsum(rnorm(n))))) plot(xx, yy, type=&quot;n&quot;, xlab=&quot;Time&quot;, ylab=&quot;Distance&quot;) polygon(xx, yy, col=&quot;green&quot;, border = &quot;red&quot;) title(&quot;색칠된 다각형&quot;) Figure 7.25: 색칠된 다각형 참고자료 https://rfriend.tistory.com/152?category=605866 https://rfriend.tistory.com/153?category=605866 https://rfriend.tistory.com/155?category=605866 https://rfriend.tistory.com/156?category=605866 https://rfriend.tistory.com/157?category=605866 https://rfriend.tistory.com/158?category=605866 https://rfriend.tistory.com/159?category=605866 "],["혼합형-데이터-그래프.html", "8 혼합형 데이터 그래프", " 8 혼합형 데이터 그래프 x축에 범주형 변수를 그리고 y축에 연속형 변수를 축으로 하는 그래프로 표시하고자 하는 경우를 예로 들어 보겠습니다. Cars93 데이터 세트의 범주형 변수인 자동차 유형(Type) 별로 연속형 변수인 고속도로 연비(MPG.highway)의 평균을 그래프로 시각화하고 싶다면 어떻게 해야 할까요? 기본적으로 X축에는 범주형 변수인 자동차 유형(Type)이, 그리고 Y축에는 자동차 유형별 고속도로 연비(MPG.highway)의 평균(mean)이 표시가 되어야 합니다. "],["통계치-계산하기.html", "8.1 통계치 계산하기", " 8.1 통계치 계산하기 먼저 Y축에 표시될 자동차 유형별 고속도로 연비의 평균을 구해 보겠습니다. library(tidyverse) ## Warning: package &#39;tidyverse&#39; was built under R version 4.0.5 ## -- Attaching packages --------------------------------------- tidyverse 1.3.1 -- ## v tidyr 1.1.3 v dplyr 1.0.5 ## v readr 1.4.0 v stringr 1.4.0 ## v purrr 0.3.4 v forcats 0.5.1 ## -- Conflicts ------------------------------------------ tidyverse_conflicts() -- ## x dplyr::filter() masks stats::filter() ## x dplyr::lag() masks stats::lag() ## x dplyr::recode() masks car::recode() ## x dplyr::select() masks MASS::select() ## x purrr::some() masks car::some() library(MASS) dd &lt;- Cars93 %&gt;% group_by(Type) %&gt;% summarise(MPG.mean = mean(MPG.highway)) dd ## # A tibble: 6 x 2 ## Type MPG.mean ## &lt;fct&gt; &lt;dbl&gt; ## 1 Compact 29.9 ## 2 Large 26.7 ## 3 Midsize 26.7 ## 4 Small 35.5 ## 5 Sporty 28.8 ## 6 Van 21.9 Go Top "],["기본-그래프-작성하기.html", "8.2 기본 그래프 작성하기", " 8.2 기본 그래프 작성하기 barplot() 함수의 첫 번째 인수로 나올 부분이 바로 dd 데이터 세트의 MPG.mean입니다. main = 모수를 이용하여 그래프의 제목을 지정하고, xlab = 과 ylab = 모수를 이용하여 축의 제목을 입력해 줍니다. 그러면 다음과 같이 기본 막대 그래프가 작성됩니다. barplot(dd$MPG.mean, main = &quot;자동차 유형별 평균 고속도로 연비&quot;, xlab = &quot;자동차 유형&quot;, ylab = &quot;고속도로 연비&quot;) Figure 8.1: 자동차 유형별 평균 고속도로 연비 Go Top "],["x축에-범주형-데이터-표시하기.html", "8.3 X축에 범주형 데이터 표시하기", " 8.3 X축에 범주형 데이터 표시하기 이제 X축에 자동차 유형(Type)을 척도로 표시해 주면 됩니다. 이를 위해서는 dd 데이터 세트의 Type 컬럼을 척도(names 변수)로 지정해 주고, barplot() 함수의 names.arg = 모수 값으로 names를 지정해 주면 됩니다. 그리고 막대의 색으로 col = rainbow(6) 를 지정해 보겠습니다. names &lt;- dd$Type barplot(dd$MPG.mean, main = &quot;자동차 유형별 평균 고속도로 연비 : X축 레이블&quot;, xlab = &quot;자동차 유형&quot;, ylab = &quot;고속도로 연비&quot;, names.arg = names, col = rainbow(6)) Figure 8.2: 자동차 유형별 평균 고속도로 연비 : X축 레이블 Go Top "],["데이터-레이블-표시하기.html", "8.4 데이터 레이블 표시하기", " 8.4 데이터 레이블 표시하기 이번에는 각 막대 그래프에 고속도로 연비의 평균값을 text() 함수를 이용하여 문자열로 표시해 보겠습니다. 먼저 barplot() 함수 전체를 변수 bp로 변환해 줍니다. 이제 text() 함수의 x 축의 모수의 값으로 bp를 대입해 주고, y 축으로 dd$MPG.mean을 대입해 줍니다. 그리고 labels = 모수에 출력될 문자열을 지정해 주어야 하는데, round() 함수를 이용하여 소숫점 이하는 반올림처리 해 줍니다. 또한 pos = 모수의 값으로 3을 입력하여 막대의 위로 문자열의 출력 위치를 지정해 줍니다. bp &lt;- barplot(dd$MPG.mean, main = &quot;자동차 유형별 평균 고속도로 연비 : 데이터 레이블&quot;, xlab = &quot;자동차 유형&quot;, ylab = &quot;고속도로 연비&quot;, names.arg = names, col = rainbow(6), ylim = c(0, 40)) text(x = bp, y = dd$MPG.mean, labels = round(dd$MPG.mean,0), pos = 3 ) Figure 8.3: 자동차 유형별 평균 고속도로 연비 : 데이터 레이블 Go Top "],["x축-눈금-표시하기.html", "8.5 x축 눈금 표시하기", " 8.5 x축 눈금 표시하기 그런데 조금 아쉬운 부분이 보입니다. X축의 눈금이 보이지 않습니다. 이제 X축에 눈금을 그려 보겠습니다. 먼저의 눈금의 간격을 x로 하고, seq() 함수를 이용하여 지정해 줍니다. 그런 다음, X축에 눈금을 그리기 위해서는 axis() 함수를 이용할 수 있습니다. 자세한 내용은 다음의 스트립 내에 있는 주석문을 참고하기 바랍니다. 그리고 Y축의 범위도 0~40으로 조정해 줍니다. bp &lt;- barplot(dd$MPG.mean, main = &quot;자동차 유형별 평균 고속도로 연비 : X축 눈금&quot;, xlab = &quot;자동차 유형&quot;, ylab = &quot;고속도로 연비&quot;, names.arg = names, col = rainbow(6), ylim = c(0, 40)) text(x = bp, y = dd$MPG.mean, labels = round(dd$MPG.mean,0), pos = 3 ) x &lt;- seq(-0.45, 7.95, by = 1.2) # x축의 눈금 값들 axis(side = 1, # 플롯 영역의 아랫 부분 - x축 at = x, # 눈금을 표시할 x축의 값 tck = -0.02, # 눈금의 길이 (음수 : 아랫 방향) pos = 0, # 눈금이 표시될 Y축의 값 col.ticks = &quot;blue&quot;, # X축의 색 labels = FALSE) # 눈금에 라벨을 표시하지 않습니다. Figure 8.4: 자동차 유형별 평균 고속도로 연비 : X축 눈금 Go Top "],["ggplot-문법.html", "9 ggplot 문법", " 9 ggplot 문법 데이터 시각화는 1) 데이터 세트로 부터, 2) 변수를 표현하기 위한, 3) 심미적 요소를 취하는, 4) 기하학적 형태로 구성됩니다. ggplot2 패키지는 Hadley Wickham이 Journal of Computational and Graphical Statistics 학술지에 2010에 발표한 “A Layered Grammar of Graphics” 논문을 통해서 R을 이용하여 그래프를 편하고 이쁘게 그릴 수 있는 방법으로 소개되었으며,1 오늘날 R의 시각화 패키지의 핵심 패키지 중의 하나입니다. 대부분의 R 기반의 시각화는 모두 이 패키지를 기준으로 설명하고 있습니다. ggplot2 패키지는 Hadley Wickham이 ‘Grammer of Graphics’(그래픽의 문법) 방법론을 R의 그리드 그래프 시스템에 적용하여 만든 패키지로서, ggplot2라는 패키지 이름은 ’Grammers of Graphics’의 ’gg’와 R의 기본 그래프 함수인 plot()의 ’plot’을, 그리고 뒤의 ’2’는 두번째 버전을 의미하는 것 으로 보고 있습니다.2 ‘Grammer of Graphics’는 데이터를 각 ’geometric object’(기하 객체)의 aesthetic attributes(심미적 속성)에 매핑하는 방법을 제공합니다. 이를 통해 통계적인 시각화를 효과적으로 수행하고 하고, 또 필요시 통계적 데이터 변환까지도 가능합니다. 패시팅(faceting) 기법을 사용하여 복잡한 데이터를 부분 데이터만 사용하여 분할해서 시각화할 수도 있게 해 줍니다. Base Graphics 패키지에서 그래프를 그리는 것은 화가가 그림을 그리는 것처럼 칠한 것 위에 덧 칠해서 먼저 그린 것이 가려지는 효과를 가지게 되는 반면, ggplot2의 Grammer of Graphics는 간단한 코드를 추가하거나 삭제하면서 그래프를 쉽고 편하게 그릴 수 있도록 해주고 있다는 점에서 서로 비교가 됩니다. ggplot2의 기본 템플릿은 다음과 같이 ggplot2 Cheat Sheet에 잘 정리되어 있습니다. Figure 9.1: ggplot 템플릿 ggplot2로 그래프를 그리기 위해서는 위의 템플릿에서 오른 쪽에 ‘required’라고 적혀진 ggplot()과 &lt;GEOM_FUNCTION&gt; 부분은 필수적인 부분입니다. 나머지 아래 부분은 그래프를 더 세부적으로 조작하기 위한 부분입니다. 필수 부분이 아닌 항목에 대해서는 ggplot2에서 초기 설정값이 정해져 있어, 작업자가 별도로 명기를 하지 않아도 그래프가 그려지긴 하지만 이를 잘 이용하면 원하는 그래프를 쉽게 작성할 수 있습니다. 각각의 항목들은 괄호 처리되며, 다른 항목들과는 +로 연결되고 있습니다. http://byrneslab.net/classes/biol607/readings/wickham_layered-grammar.pdf https://m.blog.naver.com/definitice/221127682474 "],["통계적-그래프.html", "9.1 통계적 그래프", " 9.1 통계적 그래프 데이터 세트의 변수들과 기하학적 개체의 심미적 특성들을 대응시킵니다. 다음의 예는 이러한 데이터 시각화를 단계별로 살펴 보도록 하겠습니다. 먼저 ggplot2 패키지를 담고 있는 tidyverse 패키지와 Cars93 데이터 세트를 담고 있는 MASS 패키지를 불러옵니다. library(tidyverse) library(MASS) 앞의 ggplot() 함수 템플릿의 필수적인 부분을 중심으로 살펴보겠습니다. ggplot(data = 데이터세트명) : 시각화할 데이터 세트를 지정합니다. 여기서 data = 부분은 생략이 가능합니다. aes(x = 변수1, y = 변수2 , ...) : 사용할 변수를 지정합니다. geom_FUNCTION() : 시각화 개체 함수입니다. 이 요소들은 + 기호로 연결해야 합니다. Cars93 데이터 세트에 수록된 차량의 무게(Weight) 와 고속도로 연비(MPG.highway) 의 관계를 나타내는 산포도를 geom_point() 함수를 이용하여 그려 보겠습니다. # 1. 플롯을 위한 데이터 세트 지정 : ggplot() 함수 ggplot(data = Cars93) + # 2. 심미적 요소 1 : 그래프의 X축에 표시될 변수를 지정 : aes() 함수 aes(x = Weight) + # 3. 심미적 요소 2 : 그래프의 Y축에 표시될 변수를 지정 : aes() 함수 aes(y = MPG.highway) + # 4. 기하학적 모양을 지정 - 산포도 : geom_point() 함수 geom_point() Figure 9.2: geom_point() 함수를 이용한 산포도 위의 예를 하나씩 살펴보기로 하겠습니다. 9.1.1 데이터 세트 선언 : ggplot() 함수 이용 시각화에 사용할 데이터 세트를 먼저 선언해 주어야 하는데, 다음은 기본적인 형식입니다. `ggplot(data = 데이터세트명)` 데이터는 ’그래픽 문법’과 tidyverse 프레임워크의 “첫번째 요소”입니다. 따라서 플롯을 그리기 위한 첫 번째 단계는 데이터를 선언하는 것입니다. ggplot(data = Cars93) Figure 9.3: 시각화를 위한 데이터 선언 그런데 이 단계에서는 데이터 시각화를 위한 그래프 영역이 마련되는 단계일 뿐 그래프가 시각적으로 표현되지는 않습니다. ggplot() 함수로 데이터를 보내는 또 다른 방법은 다음과 같습니다. 데이터를 먼저 선언한 다음 tidyverse 패키지에서 제공하는 파이프 연산자 (%&gt;%)를 이용하여 ggplot() 함수로 데이터를 보내는 방법입니다. # 데이터를 선언하는 다른 방법 : %&gt;% 연산자 이용 Cars93 %&gt;% # 파이트 연산자 생성 : Ctrl+Shift+M ggplot() Figure 9.4: ggplot을 위한 데이터 선언 : 파이프 연산자 사용 이 방법은 우리가 시각화에 사용할 데이터를 살펴볼 수 있게 해 줍니다. 9.1.2 심미적 매핑 : aes() 함수 데이터를 실제 시각화하기 위한 심미적 요소들은 aes() 함수로 정의됩니다. 심미적 요소 : 위치, 색상 및 크기와 같은 심미적 요소들은 데이터 시각화에서 많은 작업을 수행하는 변수들의 지정으로 시작됩니다. 값의 분포 : (숫자 또는 범주 표에서 “원시” 형태로 소화하기 어려울 수 있는) 위치, 색상, 크기 등으로 표현할 때 쉽게 전달됩니다. ’심미적 매핑’에서 ’매핑’이라는 용어는 변수가 심미적 요소에 ’매핑’된다는 사실을 나타냅니다. 즉, 심미적 요소로 표현됩니다. 시각화에 사용될 수 있는 요소들은 다음의 그림 9.5 같습니다. Figure 9.5: ggplot의 시각화 요소들 (출처 : Wilke’s Fundamentals of Data Visualization.) 앞에서 논의한 바와 같이 aes() 함수는 “심미적 매핑”을 표현해 줍니다. aes() 함수 안에 있는 모수는 먼저 “심미적 (색상, x 위치, 모양 등)으로 표현해야 하는 변수가 무엇인가?”라는 질문을 제기하고, aes() 함수는 특정 심미적 요소가 우리에게 표현해야 할 내용을 지정하도록 정중하게 “요구”합니다. 예를 들어, aes(color = Type)는 영어로 번역될 수 있습니다. “색상 요소야, 나를 위해 자동차의 유형변수인 Type별로 색을 달리 표현해 다오.”라는 의미입니다. 또한 데이터로 소통할 수 있게 해 주는 것도 심미적 요소입니다. 우리가 궁금해 하는 변수 내의 분포를 빨리 알려 주기는 것도 심미적 매핑에 의한 것입니다. 따라서 aes() 함수를 보면 “질문”해야 하는 것을 생각하는데 도움이 될 수 있습니다. ggplot() 함수를 이용하는 데이터 세트로 부터 하나의 변수를 나타내기 위해 심미적 요소에 어떻게 요구하는지 살펴보겠습니다. 먼저, x의 위치(수평 축)와 y의 위치(수직 축)를 살펴 보겠습니다. Cars93 %&gt;% ggplot() + # X축 : Weight 변수 aes(x = Weight) + # y축 : MPG.highway 변수 aes(y = MPG.highway) Figure 9.6: ggplot을 위한 심미적 요소 : X축과 Y축 이제 시각화할 X축과 Y축이 설정되었으며, 그래프 영역에 X축과 Y축이 표시됨을 알 수 있습니다. 9.1.3 시각화 개체 : geom_funtion() aes() 함수는 x 위치로 표시되는 Weight 변수와 y 위치로 표시되는 변수 MPG.highway를 원한다고 말합니다. x 축과 y 축에 표시되는 숫자(척도)들은 이 정보가 등록되었다는 단서를 제공합니다. 그러나 아직 데이터에 대한 통찰력을 얻을 수없습니다. 왜냐하면 기하학적 개체가 심미적으로 표현되어야 하기 때문입니다. 따라서 우리는 데이터가 어떤 기하학적 모양으로 표현되어야 할 것인지를 선언해야 합니다. 기하학적 객체로 “점”을 추가하기 위해 geom_point() 함수를 사용해보겠습니다. 그러면 Cars93 데이터 세트의 각 행에 대한 x와 y 위치에 해당 데이터가 점으로 표시됩니다. Cars93 %&gt;% ggplot() + # X축 : Weight 변수 aes(x = Weight) + # y축 : MPG.highway 변수 aes(y = MPG.highway) + # 데이터 각 행의 X와 Y 위치에 점을 표시 : geom_point() 함수 geom_point() Figure 9.7: ggplot 시각화 객체 : geom_point() 함수 이제 그래프 영역의 X축과 Y축에 데이터들이 점으로 시각화되어 표시가 됩니다. 이렇게 하여 기본적인 데이터의 시각화가 이루어 졌습니다. "],["추가적인-심미적-매핑-탐색.html", "9.2 추가적인 심미적 매핑 탐색", " 9.2 추가적인 심미적 매핑 탐색 geom_*() 함수에 좀 더 살펴보도록 하겠습니다. 심미적 매핑은 데이터 시각화에서 우리를 위해 많은 일을 해 줍니다. 따라서 데이터에서 변수를 나타낼 수 있는 심미적 요소들에 대하여 살펴 보겠습니다. 지금까지 x와 y 위치를 지정하였고, 이것은 “점”이라는 기하학적 객체로 표현하는데 필요한 심미적 요소입니다. 그러나 더 많은 선택 사항이 있습니다. 다음 예제에서는 필요한 심미적 매핑 (x 와 y 위치)을 수행한 다음 geom_point () 함수가 표현할 수 있는 다른 심미적 요소(색상, 모양, 크기, 알파 - 투명도)도 사용해 보겠습니다. 또한 이중 또는 삼중 의 심미적 “매핑”이 허용되는 것을 볼 수 있습니다. 여러 심미적 표현으로 동일한 변수를 나타낼 수 있습니다. Cars93 %&gt;% ggplot() + # X축 : Weight 변수 aes(x = Weight) + # y축 : MPG.highway 변수 aes(y = MPG.highway) + # 데이터 각 행의 X와 Y 위치에 점을 표시 : geom_point() 함수 geom_point() + # 다음의 요소를 (+)로 중복 적용할 수도 있고, # 한번에 하나씩 적용할 수도 있습니다. aes(colour = Type) + # 색 지정 aes(shape = Type) + # 점의 모양 지정 aes(size = MPG.highway) + # 점의 크기 aes(alpha = MPG.highway) + # 점의 투명도 aes(colour = MPG.highway) # 색의 중복 적용 Figure 9.8: ggplot을 위한 심미적 요소의 추가 1 9.2.1 추가적 심미적 요소 다음의 플롯에서 fill = 요소와 color = 요소는 어떻게 다를까요? Cars93 %&gt;% ggplot() + # X축 : Type 변수 aes(x = Type) + # geom_bar() 함수 geom_bar() + # 추가적인 심미적 요소 aes(colour = Type) + # 막대의 테두리 색 지정 aes(fill = Type) + # 막대의 채우기 색 지정 aes(alpha = ..count..) + # 막대 색의 투명도 (Type 별 빈도수) 지정 aes(linetype = Type) Figure 9.9: ggplot을 위한 심미적 요소의 추가 2 참고자료 : A ggplot2 grammar guide ggplot2 가 어떻게 작동하는지를 간단히 설명하기란 매우 어렵습니다. 왜냐하면 ggplot2는 데이터 시각화와 관련한 심오한 철학을 담고 있기 때문입니다. 그러나, 대부분의 경우 ggplot() 함수에 데이터를 제공하고, aes() 함수에 심미적 매핑을 제공해서 시작하게 됩니다. 그런 다음, geom_point() 함수, geom_histogram() 함수 등의 레이어, scale_colour_brewer() 함수와 같은 척도, facet_wrap() 함수와 같은 faceting 설정 그리고 coord_flip() 함수 등과 같은 좌표 시스템을 추가하게 됩니다. 다음의 예는 Cars93 데이터 세트를 이용하여, X축과 Y축으로 각각 Cylinders와 MPG.highway, 그리고 점의 색상은 Type 변수를 기준으로 해서 데이터를 점으로 시각화하고 있습니다. ggplot(Cars93, aes(x = Cylinders, y = MPG.highway, colour = Type)) + geom_point() 9.2.2 stat_*() 함수 ggplot() 함수는 시각화 객체로서 앞에서 설명한 geom_*() 함수들을 사용합니다. 그런데 이 시각화 객체 함수들은 처리하는 데이터를 통계적으로 변환해 주는 stat 모수들을 담고 있습니다. 예를 들어, geom_histogram() 함수는 한 변수의 데이터를 일정한 수의 bin(구간)으로 나눈 후, 각각의 bin에 속하는 데이터 갯수를 셉니다. 즉, X축은 데이터의 구간 값(bin)들이고, Y축은 각 구간 별 데이터의 갯수(..count..)가 되는 것입니다. 여기서 ..count.. 변수는 원래 데이터 세트에는 없는 변수입니다. 이처럼 geom_*() 함수를 이용하여 그래프를 그리면 새로운 값을 계산해내는 ggplot2의 알고리즘이 필요하고 이러한 알고리즘을 stat(Statistical Transformation)이라고 합니다. 그리고 이러한 geom_*() 함수에서 사용하는 stat 알고리즘은 args(geom_*)으로 확인할 수 있습니다. geom_point() 함수의 기본 알고리즘을 확인해 보겠습니다. args(geom_point) ## function (mapping = NULL, data = NULL, stat = &quot;identity&quot;, position = &quot;identity&quot;, ## ..., na.rm = FALSE, show.legend = NA, inherit.aes = TRUE) ## NULL stat = \"identity\"가 geom_point() 함수의 기본 알고리즘임을 알 수 있습니다. 그런데 여기서 또 중요한 것은 stat_알고리즘() 함수를 geom_*() 함수를 대체해서 사용할 수 있다는 것입니다. 즉, stat_identity() 함수로 geom_point() 함수를 대신해 사용할 수 있습니다. 앞에서 geom_point() 함수를 사용한 그림 9.7은 다음과 같이 stat_identity() 함수를 이용해도 그릴 수 있다는 것입니다. Cars93 %&gt;% ggplot() + # X축 : Weight 변수 aes(x = Weight) + # y축 : MPG.highway 변수 aes(y = MPG.highway) + # 데이터 각 행의 X와 Y 위치에 점을 표시 : stat_identity() 함수 stat_identity() Figure 9.10: ggplot 시각화 객체 : stat_identity() 함수 한편 stat에 지정된 알고리즘이 아닌 데이터 세트에 있는 변수로 그래프를 그려야 할 때가 있습니다. 예를 들어, geom_bar() 함수의 경우 count를 기본 stat으로 하여 x축의 변수에 대한 도수(count)를 y축에 표시하게 됩니다. 그런데 Y축에 이러한 카운트를 사용하지 않고, 데이터 세트에 있는 다른 변수를 표시하고 싶은 경우가 있습니다. 다음은 Cars93 데이터 세트에 있는 자동차의 유형(Type)을 X축에 그리고 고속도로 연비(MPG.highway)를 Y축에 막대 그래프로 표시하는 예입니다. ggplot(Cars93) + aes(x = Type) + aes(y = MPG.highway) + geom_bar() ## Error: stat_count() can only have an x or y aesthetic. 이 경우에 geom_bar() 함수는 count 알고리즘을 기본 stat으로 사용하므로 Y축이 y = ..count.. 이 되어야 하는데, 지금은 y = MPG.highway로 되어 있어 에러가 발생합니다. Y축의 값으로 기본적인 stat 알고리즘을 사용하지 않는 경우에는 이러한 에러를 방지하기 위해서 시각화 객체인 geom_bar() 함수에 stat = 'identity'를 삽입해 주어야 합니다. 이는 Y축에 표시될 값은 기본 알고리즘을 사용하여 산출하지 않고 원 데이터 세트에 있는 값으로 사용하겠다는 설정인 것입니다. ggplot(Cars93, aes(x = Type, y = MPG.highway)) + geom_bar(stat = &quot;identity&quot;) Figure 9.11: Y축을 데이터 세트의 값으로 사용할 경우 : stat = ‘identity’ 이제 우리가 원하는대로 X축에 자동차 유형(Type)이 그리고 Y축에는 고속도로 연비(MPG.higyway)가 표시되고 있음을 알 수 있습니다. 그런데 여기서 Y축의 값은 무슨 값일까요? 기본적으로 합계 값을 표현하고 있습니다. 참고로, 합계 값은 다음과 같이 확인할 수 있습니다. Cars93 %&gt;% # 데이터 세트 group_by(Type) %&gt;% # X 축의 변수로 그룹화합니다. summarise(sum(MPG.highway)) # Y 축의 변수의 그룹별 합계를 구합니다. ## # A tibble: 6 x 2 ## Type `sum(MPG.highway)` ## &lt;fct&gt; &lt;int&gt; ## 1 Compact 478 ## 2 Large 294 ## 3 Midsize 588 ## 4 Small 745 ## 5 Sporty 403 ## 6 Van 197 참고자료 : ggplot2 사용법(STAT : Statistical Transformation) "],["일변량-변수-범주형-데이터.html", "10 일변량 변수 - 범주형 데이터", " 10 일변량 변수 - 범주형 데이터 이번 장에서는 일변량 범주형 데이터의 시각화 방법으로서 막대 그래프 (Bar Chart): geom_bar() 파이 차트 (Pie Chart): geom_bar() + coord_polar() 등을 중심으로 살펴 보겠습니다. "],["ggbar.html", "10.1 막대 그래프", " 10.1 막대 그래프 먼저, 범주별 도수를 구하고 이를 막대 형태로 나타낸 막대 그래프 (Bar Chart)를 ggplot2의 geom_bar() 로 그려보겠습니다. 10.1.1 데이터 세트 사용할 데이터는 MASS 패키지에 있는 Cars93 데이터 프레임에서 자동차 유형(Type), 제조국(Origin) 등의 범주형/요인(factor)형 변수를 사용하겠습니다. library(tidyverse) library(MASS) str(Cars93) ## &#39;data.frame&#39;: 93 obs. of 27 variables: ## $ Manufacturer : Factor w/ 32 levels &quot;Acura&quot;,&quot;Audi&quot;,..: 1 1 2 2 3 4 4 4 4 5 ... ## $ Model : Factor w/ 93 levels &quot;100&quot;,&quot;190E&quot;,&quot;240&quot;,..: 49 56 9 1 6 24 54 74 73 35 ... ## $ Type : Factor w/ 6 levels &quot;Compact&quot;,&quot;Large&quot;,..: 4 3 1 3 3 3 2 2 3 2 ... ## $ Min.Price : num 12.9 29.2 25.9 30.8 23.7 14.2 19.9 22.6 26.3 33 ... ## $ Price : num 15.9 33.9 29.1 37.7 30 15.7 20.8 23.7 26.3 34.7 ... ## $ Max.Price : num 18.8 38.7 32.3 44.6 36.2 17.3 21.7 24.9 26.3 36.3 ... ## $ MPG.city : int 25 18 20 19 22 22 19 16 19 16 ... ## $ MPG.highway : int 31 25 26 26 30 31 28 25 27 25 ... ## $ AirBags : Factor w/ 3 levels &quot;Driver &amp; Passenger&quot;,..: 3 1 2 1 2 2 2 2 2 2 ... ## $ DriveTrain : Factor w/ 3 levels &quot;4WD&quot;,&quot;Front&quot;,..: 2 2 2 2 3 2 2 3 2 2 ... ## $ Cylinders : Factor w/ 6 levels &quot;3&quot;,&quot;4&quot;,&quot;5&quot;,&quot;6&quot;,..: 2 4 4 4 2 2 4 4 4 5 ... ## $ EngineSize : num 1.8 3.2 2.8 2.8 3.5 2.2 3.8 5.7 3.8 4.9 ... ## $ Horsepower : int 140 200 172 172 208 110 170 180 170 200 ... ## $ RPM : int 6300 5500 5500 5500 5700 5200 4800 4000 4800 4100 ... ## $ Rev.per.mile : int 2890 2335 2280 2535 2545 2565 1570 1320 1690 1510 ... ## $ Man.trans.avail : Factor w/ 2 levels &quot;No&quot;,&quot;Yes&quot;: 2 2 2 2 2 1 1 1 1 1 ... ## $ Fuel.tank.capacity: num 13.2 18 16.9 21.1 21.1 16.4 18 23 18.8 18 ... ## $ Passengers : int 5 5 5 6 4 6 6 6 5 6 ... ## $ Length : int 177 195 180 193 186 189 200 216 198 206 ... ## $ Wheelbase : int 102 115 102 106 109 105 111 116 108 114 ... ## $ Width : int 68 71 67 70 69 69 74 78 73 73 ... ## $ Turn.circle : int 37 38 37 37 39 41 42 45 41 43 ... ## $ Rear.seat.room : num 26.5 30 28 31 27 28 30.5 30.5 26.5 35 ... ## $ Luggage.room : int 11 15 14 17 13 16 17 21 14 18 ... ## $ Weight : int 2705 3560 3375 3405 3640 2880 3470 4105 3495 3620 ... ## $ Origin : Factor w/ 2 levels &quot;USA&quot;,&quot;non-USA&quot;: 2 2 2 2 2 1 1 1 1 1 ... ## $ Make : Factor w/ 93 levels &quot;Acura Integra&quot;,..: 1 2 4 3 5 6 7 9 8 10 ... Go Top 10.1.2 막대 그래프 활용 방식 ggplot() 함수를 이용하여 막대 그래프를 그리는 방식에는 크게 두 가지 방식이 있습니다. x축의 변수(범주형 변수)만을 지정하여 y축에 빈도를 나타내는 방식 : (일변수 범주형 그래프) x축의 변수(범주형 변수)를 기준으로 y축에 다른 변수의 값(예, 합계)을 지정하여 그리는 방식 (Y축에 변수를 지정한 막대 그래프) 10.1.3 x축을 범주형 변수로 한 기본 막대 그래프 Cars93 데이터 세트에서 그동안 실습해 왔던 범주형 변수인 자동차 유형(Type) 변수를 X축의 범주형 변수로 설정하여 막대 그래프를 그리는 경우가 해당됩니다. aes(x, y) 함수의 x변수로 Type을 지정해 주면 됩니다. 이때 Y축을 지정해 주지 않아도 ggplot() 함수는 X축에 지정되어 있는 변수 값들의 빈도(count)를 y축에 자동으로 표시해 줍니다. 그런데 Y축에 빈도를 표시하기 위해 geom_bar() 함수 안에 stat = \"count\" 라는 모수가 기본 값으로 설정되어 있기 때문입니다. 그리고 이때 계산된 빈도수는 ..count.. 라는 변수에 저장이 되게 됩니다. 즉, aes(y = ..count..)를 기본 값으로 한다는 것입니다.3 아래 예제에서는 자동차 유형(Type)별로 빈도수를 나타내는 막대 그래프는 다음과 같이 작성됩니다. # 자동차 유형별 막대 그래프 : ggplot(Cars93, aes(x = Type, y = ..count..)) + # y = ..count..는 생략가능 geom_bar(stat = &quot;count&quot;) + # stat = &quot;count&quot;는 생략가능 ggtitle(&quot;차량 유형별 기본 막대 그래프&quot;) Figure 10.1: 차량 유형별 기본 막대 그래프 Go Top 10.1.3.1 수평 막대 그래프 coord_flip() 함수를 하나의 레이어로 추가하여 막대 그래프를 수평으로 그릴 수 있습니다. # 자동차 유형별 막대 그래프 : ggplot(Cars93, aes(x = Type, y = ..count..)) + geom_bar(stat = &quot;count&quot;) + coord_flip() + ggtitle(&quot;수평 막대 그래프&quot;) Figure 10.2: 수평 막대 그래프 Go Top 10.1.3.2 막대 그래프의 색 지정 aes() 함수 안에 막대의 색과 관련한 모수를 입력하여 막대의 색을 지정할 수 있습니다. 예를 들어, fill = 모수는 막대의 채우기 색을 지정하고, colour =는 막대의 테두리 색을, 그리고 alpha =는 채우기 색의 상대적 투명도를 지정해 줍니다. 다음의 예를 통해 확인해 보겠습니다. # aes() 함수를 이용한 색 지정 ggplot(Cars93, aes(x = Type)) + geom_bar() + aes(colour = Type) + # 테두리 색 지정 aes(fill = Type) + # 채우기 색 지정 aes(alpha = ..count..) + # 채우기 색의 투명도 ggtitle(&quot;차량 유형별 막대 그래프 : aes()함수를 이용한 색 지정&quot;) Figure 10.3: 차량 유형별 막대 그래프 : aes()함수를 이용한 색 지정 Go Top 10.1.4 상대 비율 막대 그래프 막대 그래프의 Y축을 상대 비율로 표시할 수 있습니다. 이를 위해서는 aes() 함수 내에 y = ..prop.. 모수와 group = 1을 추가해 줍니다. 또한, y축을 % 형식으로 출력하기 위해 scale_y_continuous(labels = scales::percent_format()) 함수를 추가해 주었습니다. # 자동차 유형별 막대 그래프 : ggplot(Cars93, aes(x = Type, y = ..prop.., group = 1)) + # y = ..count..는 생략가능 geom_bar() + # stat = &quot;count&quot;는 생략가능 ggtitle(&quot;상대 비율 막대 그래프&quot;) + scale_y_continuous(labels = scales::percent_format()) Figure 10.4: 상대 비율 막대 그래프 Go Top 10.1.5 Y축에 변수를 지정한 막대 그래프 자동차 유형(Type) 별로 고속도로 연비(MPG.highway)를 막대 그래프로 그려 보겠습니다. aes() 함수의 X축으로 범주형 변수인 Type 변수를 그리고 Y축의 변수로는 연속형 변수인 MPG.highway 변수를 지정해 줍니다. 그런데, 이때 막대 그래프를 그리기 위해서는 geom_bar() 함수를 이용할 수도 있고, geom_col() 함수를 사용할 수도 있습니다. 10.1.5.1 geom_bar() 함수의 이용 먼저 geom_bar() 함수를 이용하여 막대 그래프를 그려 보겠습니다. geom_bar() 함수 안에 반드시 stat = \"identity\"를 입력해 주어야 합니다. 이는 X축의 Type 변수의 데이터를 기준으로 Y축에 있는 MPG.highway의 높이(합계)가 결정된다는 것을 지정해 주는 것입니다. ggplot(Cars93, aes(x = Type, y = MPG.highway)) + geom_bar(stat = &quot;identity&quot;) Figure 10.5: 그룹별 막대 그래프 : geom_bar()함수 이용 Go Top 10.1.5.2 geom_col() 함수의 이용 이제는 geom_col() 함수를 이용하여 막대 그래프를 그려 보겠습니다. geom_col() 함수의 경우에는 stat = “identity”를 기본값으로 하고 있기 때문에 이를 굳이 입력해 줄 필요가 없습니다. ggplot(Cars93, aes(x = Type, y = MPG.highway)) + geom_col() Figure 10.6: 그룹별 막대 그래프 : geom_col()함수 이용 geom_bar() 함수는 x축의 각 수준별 도수를 계산하기 위하여 stat_count() 함수를 이용합니다. 반면에 geom_col() 함수는 x축의 각 수준별 값을 플롯하기 위해 stat_identity() 함수를 사용합니다. 지금까지 X축을 차량의 유형(Type)으로 하고, Y축을 고속도로 연비(MPG.highway)로 하여 막대 그래프를 그려 보았습니다. 그러면 실제로 막대 그래프의 높이는 무엇을 나타내는 것일까요? Y축은 각 Type의 수준별 MPG.highway의 합계를 나타내고 있는 것입니다. 즉, Y축은 다음과 같이 구해지는 값을 나타내고 있습니다. Cars93_sum &lt;- Cars93 %&gt;% group_by(Type) %&gt;% summarise(sum_MPG.h = sum(MPG.highway)) Cars93_sum ## # A tibble: 6 x 2 ## Type sum_MPG.h ## &lt;fct&gt; &lt;int&gt; ## 1 Compact 478 ## 2 Large 294 ## 3 Midsize 588 ## 4 Small 745 ## 5 Sporty 403 ## 6 Van 197 그러면 Y축에 합계가 아닌 평균을 나타내고 싶을 때는 어떻게 하면 될까요? 다음에서 살펴 보도록 하겠습니다. Go Top 10.1.5.3 Y축에 평균을 표시하기 앞에서 살펴본 자동차 유형(Type)별로 고속도로 연비(MPG.highway)의 합계를 구하는 방법을 그대로 이용하여, 평균 고속도로 연비(mean_MPG.h)를 다음과 같이 구하여, Cars93_sub라는 데이터 프레임을 생성합니다. 그런 다음, aes() 함수를 이용하여, X축에 Type을 그리고 Y축에 mean_MPG.h를 지정해 주고 geom_col() 함수로 막대 그래프를 그려 주면 됩니다. ## Type 별로 MPG.highway의 평균을 구하여 데이터 프레임을 생성합니다. Cars93_sub &lt;- Cars93 %&gt;% group_by(Type) %&gt;% summarise(mean_MPG.h = mean(MPG.highway)) Cars93_sub %&gt;% ggplot() + aes(x = Type) + aes(y = mean_MPG.h) + geom_col() + ggtitle(&quot;차량 유형별 평균 고속도로 연비&quot;) Figure 10.7: 차량 유형별 ‘평균’ 고속도로 연비 Go Top 10.1.6 막대 그래프에 데이터 레이블 달기 막대 그래프의 각 막대 마다 데이터 레이블을 표시할 수 있습니다. 이를 위해서는 geom_text() 함수를 이용합니다. 앞에서 작성한 그림 10.1 에 데이터 레이블을 추가해 보겠습니다. 데이터 레이블은 geom_text() 함수를 이용하여 표시할 수 있는데, 다음의 모두를 이용하게 됩니다. stat : geom_bar() 함수는 기본적인 통계 변환 함수(stat =)은 count를 사용합니다. aes(label = : 그리고 Y축에 표시되는 값은 ..count.. 변수에 저장되어 있습니다. aes(vjust = :데이터 레이블이 표시될 위치를 지정해 줍니다. 즉, geom_text(stat = \"count\", aes(label = ..count..), vjust = -0.5) 를 추가해 줍니다. # 자동차 유형별 막대 그래프 : ggplot(Cars93, aes(x = Type)) + # y = ..count..는 생략가능 geom_bar() + # stat = &quot;count&quot;는 생략가능 ggtitle(&quot;기본 막대 그래프 : 데이터 레이블 달기&quot;) + geom_text(stat = &quot;count&quot;, aes(label = ..count..), vjust = -0.5) Figure 10.8: 기본 막대 그래프 : 데이터 레이블 달기 상대 비율 막대 그래프인 그림 10.4에 대해서도 데이터 레이블을 표시해 보겠습니다. geom_text() 함수 내의 aes(label = )에 상대 비율을 나타내는 변수 ..prop..를 입력해 줍니다. 그런데 이 때 ..prop..의 값을 소숫점 이하 1자리로 표시하고 끝에 % 기호를 추가 시키기 위해 round() 함수와 paste0() 함수를 이용하였습니다. # 자동차 유형별 막대 그래프 : ggplot(Cars93, aes(x = Type, y = ..prop.., group = 1)) + # y = ..count..는 생략가능 geom_bar() + # stat = &quot;count&quot;는 생략가능 ggtitle(&quot;상대 비율 막대 그래프 : 데이터 레이블 표시하기&quot;) + scale_y_continuous(labels = scales::percent_format()) + geom_text(stat = &quot;count&quot;, aes(label = paste0(round(..prop.., 3)*100, &quot; %&quot;)), vjust = 1.5) Figure 10.9: 상대 비율 막대 그래프 : 데이터 레이블 표시하기 Go Top 10.1.7 그룹별 막대 그래프 다음의 예는 차종(Type)별, 제조국(Origin) 별 자동차 수를 가지고 막대 그래프를 그려보도록 하겠습니다. 이 경우 히스토그램에서 그룹별 히스토그램에서 살펴본 바와 같이 aes() 함수에 모수를 지정하는 방법과, facet_grid() 함수를 이용하는 방법 그리고 facet_wrap() 함수를 이용하는 방법으로 살펴 볼 수 있습니다. 10.1.7.1 aes() 함수의 모수 이용 이 경우도 그룹별 히스토그램에서 살펴본 바와 같이 fill, group, colour 등의 모수를 이용할 수 있습니다. 여기서는 fill 을 예로 설명하겠습니다. aes() 함수 내에 막대의 채우기 색을 특정 색이 아닌 ‘fill = Origin’ 로 지정해 주면 각 막대의 색을 원산지별로 구분해서 표시해 줍니다. 또한 geom_bar() 함수 내에 position = \"dodge\"를 입력해 주면, 막대가 원산지별로 수평으로 분리되어 표시가 됩니다. colour = 모수의 경우 테두리 색을 지정하는데 있어서 이 모수를 aes() 함수내에 입력할 수도 있고, geom_bar() 함수 안에도 입력할 수 있습니다. 그런데 colour = Origin은 aes() 함수 내에만 입력할 수 있습니다. geom_bar() 함수 안에 position = \"dodge\"를 입력한 수평 막대 그래프는 다음과 같습니다. # 차종별 원산지별 도수 분포도 : 이변량 막대 그래프 ggplot(Cars93, aes(x = Type, fill = Origin)) + # 막대 채우기 색을 Origin 별로 지정합니다. geom_bar(position = &quot;dodge&quot;, # 막대를 Origin 별로 수평 배열합니다.(기본 값은 &quot;stack&quot;) colour = &quot;black&quot;) + # 막대의 테두리 선을 지정합니다. scale_fill_brewer(palette = 1) + # 막대의 컬러 팔레트를 1로 지정합니다. ggtitle(&quot;차종별 원산지별 막대 그래프 : 이변량 막대 그래프&quot;) Figure 10.10: 차종별 원산지별 막대 그래프 : 이변량 수평 막대 그래프 그룹별 막대 그래프인 그림 10.10에 데이터 레이블을 표시해 보겠습니다. 여기서도 geom_text() 함수를 이용하게 되는데, 다음의 예에서 보듯이, position = position_dodge() 모수를 입력해 줍니다. # 차종별 원산지별 도수 분포도 : 이변량 막대 그래프 ggplot(Cars93, aes(x = Type, fill = Origin)) + # 막대 채우기 색을 Origin 별로 지정합니다. geom_bar(position = &quot;dodge&quot;, # 막대를 Origin 별로 수평 배열합니다.(기본 값은 &quot;stack&quot;) colour = &quot;black&quot;) + # 막대의 테두리 선을 지정합니다. scale_fill_brewer(palette = 1) + # 막대의 컬러 팔레트를 1로 지정합니다. ggtitle(&quot;차종별 원산지별 막대 그래프 : 이변량 막대 그래프&quot;) + geom_text(stat = &quot;count&quot;, aes(label = ..count..), position = position_dodge(width = 0.9), vjust = 1.5) Figure 10.11: 차종별 원산지별 막대 그래프 : 이변량 수평 막대 그래프 geom_bar() 함수 안에 position = \"stack\"은 기본 값으로 특별히 입력하지 않으면 누적 막대 그래프가 작성됩니다. # 차종별 원산지별 도수 분포도 : 이변량 누적 막대 그래프 ggplot(Cars93, aes(x = Type, fill = Origin)) + geom_bar( # position = &quot;stack&quot;, # 기본값은 &quot;stack&quot;, 생략 가능합니다. colour = &quot;black&quot;) + scale_fill_brewer(palette = 2) + ggtitle(&quot;차종별 원산지별 도수 분포도 : 이변량 누적 막대 그래프&quot;) Figure 10.12: 차종별 원산지별 막대 그래프 : 이변량 누적 막대 그래프 그룹별 막대 그래프인 그림 10.12에 데이터 레이블을 표시해 보겠습니다. 여기서도 geom_text() 함수를 이용하게 되는데, 다음의 예에서 보듯이, position = position_stack() 모수를 입력해 줍니다. # 차종별 원산지별 도수 분포도 : 이변량 누적 막대 그래프 ggplot(Cars93, aes(x = Type, fill = Origin)) + geom_bar(color = &quot;black&quot;) + scale_fill_brewer(palette = 2) + ggtitle(&quot;이변량 누적 막대 그래프 : 데이터 레이블 표시&quot;) + geom_text(stat = &quot;count&quot;, aes(label = ..count..), position = position_stack(), vjust = 1.5) Figure 10.13: 이변량 누적 막대 그래프 : 데이터 레이블 표시 Go Top 10.1.7.2 facet_grid() 함수 이용 자동차 유형별(Type)로 앞의 히스토그램을 비교하기 위해서는 facet_grid(Type ~ .) 또는 facet_grid(vars(Type))으로 지정하는 방법과 facet_grid( . ~ Type) 으로 지정하는 방법을 각각 살펴 보겠습니다. # 차종별 원산지별 도수 분포도 : facet_grid() ggplot(Cars93, aes(x = Type, fill = Origin)) + geom_bar(position = &quot;identity&quot;, colour = &quot;black&quot;) + scale_fill_brewer(palette = 2) + ggtitle(&quot;차종별 원산지별 도수 분포도 : facet_grid()&quot;) + facet_grid(Origin ~ Type) # Origin 별로 별도의 막대 그래프를 작성합니다. Figure 10.14: 차종별 원산지별 도수 분포도 : facet_grid() Go Top 10.1.7.3 facet_wrap() 함수 이용 한편, facet_wrap() 함수를 이용하여 각 자동차 유형(Type)별 히스트로그램을 작성할 수도 있습니다. facet_wrap(Origin ~ Type, ncol = 2)를 추가해 보겠습니다. # 차종별 원산지별 도수 분포도 : facet_wrap() ggplot(Cars93, aes(x = Type, fill = Origin)) + geom_bar(position = &quot;identity&quot;, colour = &quot;black&quot;) + scale_fill_brewer(palette = 2) + ggtitle(&quot;차종별 원산지별 도수 분포도 : facet_wrap()&quot;) + facet_wrap(Origin ~ Type, ncol = 6) Figure 10.15: 차종별 원산지별 도수 분포도 : facet_wrap() Go Top 10.1.8 Theme의 사용 히스토그램에서 Theme을 사용하였듯이, 막대 그래프에서도 Theme을 사용할 수 있습니다. 다음의 예는 앞서 작성한 [기본 막대 그래프]에 히스토그램에서 Theme으로 사용한 ggplot2::theme_classic() + 이하 부분을 복사해서 붙여 넣기한 것입니다. # 기본 막대 그래프에 theme_classic() 적용 ggplot(Cars93, aes(x = Type)) + geom_bar(fill=&quot;white&quot;, colour=&quot;black&quot;) + ggtitle(&quot;막대 그래프에 Theme 적용&quot;) + ggplot2::theme_classic() + # 그래프 테마 지정 ggplot2::theme(axis.title.x = element_text(size = 10, face = &quot;italic&quot;, color = &quot;gray&quot;, angle = 0, vjust = 0.5), axis.title.y = element_text(size = 10, face = &quot;bold.italic&quot;, color = &quot;gray&quot;, angle = 0, vjust = 0.5)) + ggplot2::scale_y_continuous(labels = scales::comma) Figure 10.16: 막대 그래프에 Theme 적용 참고 자료 : https://truman.tistory.com/156 (Theme 의 옵션 설정을 자세히 설명하고 있습니다.) Go Top 연습문제 10.1.8.1 Cars93의 범주형 변수 확인하기 10.1.8.1.1 Cars93 데이터 세트에 있는 범주형 변수(factor)들을 확인하시오. f &lt;- NULL g &lt;- NULL for (i in 1:dim(Cars93)[2]) { if (class(Cars93[ , i]) == &quot;factor&quot;) { f &lt;- c(f, names(Cars93)[i]) g &lt;- c(g, i) } } f # 범주형 변수의 이름 ## [1] &quot;Manufacturer&quot; &quot;Model&quot; &quot;Type&quot; &quot;AirBags&quot; ## [5] &quot;DriveTrain&quot; &quot;Cylinders&quot; &quot;Man.trans.avail&quot; &quot;Origin&quot; ## [9] &quot;Make&quot; g # Cars93 데이터 세트에서의 범주형 변수의 컬럼 색인 번호 ## [1] 1 2 3 9 10 11 16 26 27 10.1.8.1.2 Cars93 데이터 세트에 있는 범주형 변수(factor)들 중 수준(levels)이 6 이하인 변수를 확인하시오. l &lt;- NULL for (i in 1:length(g)) { if (length(levels(Cars93[ ,g[i]])) &lt;= 6) l &lt;- c(l, g[i]) } l ## [1] 3 9 10 11 16 26 Cars93_fac &lt;- Cars93[, l] Cars93_fac ## Type AirBags DriveTrain Cylinders Man.trans.avail Origin ## 1 Small None Front 4 Yes non-USA ## 2 Midsize Driver &amp; Passenger Front 6 Yes non-USA ## 3 Compact Driver only Front 6 Yes non-USA ## 4 Midsize Driver &amp; Passenger Front 6 Yes non-USA ## 5 Midsize Driver only Rear 4 Yes non-USA ## 6 Midsize Driver only Front 4 No USA ## 7 Large Driver only Front 6 No USA ## 8 Large Driver only Rear 6 No USA ## 9 Midsize Driver only Front 6 No USA ## 10 Large Driver only Front 8 No USA ## 11 Midsize Driver &amp; Passenger Front 8 No USA ## 12 Compact None Front 4 Yes USA ## 13 Compact Driver only Front 4 Yes USA ## 14 Sporty Driver &amp; Passenger Rear 6 Yes USA ## 15 Midsize None Front 4 No USA ## 16 Van None Front 6 No USA ## 17 Van None 4WD 6 No USA ## 18 Large Driver only Rear 8 No USA ## 19 Sporty Driver only Rear 8 Yes USA ## 20 Large Driver &amp; Passenger Front 6 No USA ## 21 Compact Driver &amp; Passenger Front 4 No USA ## 22 Large Driver only Front 6 No USA ## 23 Small None Front 4 Yes USA ## 24 Small Driver only Front 4 Yes USA ## 25 Compact Driver only Front 4 Yes USA ## 26 Van Driver only 4WD 6 No USA ## 27 Midsize Driver only Front 4 No USA ## 28 Sporty Driver only 4WD 6 Yes USA ## 29 Small None Front 4 Yes USA ## 30 Large Driver &amp; Passenger Front 6 No USA ## 31 Small None Front 4 Yes USA ## 32 Small None Front 4 Yes USA ## 33 Compact None Front 4 Yes USA ## 34 Sporty Driver only Rear 4 Yes USA ## 35 Sporty Driver only Front 4 Yes USA ## 36 Van Driver only 4WD 6 Yes USA ## 37 Midsize Driver only Front 6 No USA ## 38 Large Driver only Rear 8 No USA ## 39 Small None Front 3 Yes non-USA ## 40 Sporty Driver only Front 4 Yes non-USA ## 41 Sporty Driver &amp; Passenger Front 4 Yes non-USA ## 42 Small Driver only Front 4 Yes non-USA ## 43 Compact Driver &amp; Passenger Front 4 Yes non-USA ## 44 Small None Front 4 Yes non-USA ## 45 Small None Front 4 Yes non-USA ## 46 Sporty None Front 4 Yes non-USA ## 47 Midsize None Front 4 Yes non-USA ## 48 Midsize Driver only Rear 8 No non-USA ## 49 Midsize Driver only Front 6 Yes non-USA ## 50 Midsize Driver &amp; Passenger Rear 6 Yes non-USA ## 51 Midsize Driver &amp; Passenger Front 6 No USA ## 52 Large Driver &amp; Passenger Rear 8 No USA ## 53 Small None Front 4 Yes non-USA ## 54 Small None Front 4 Yes non-USA ## 55 Compact Driver only Front 4 Yes non-USA ## 56 Van None 4WD 6 No non-USA ## 57 Sporty Driver only Rear rotary Yes non-USA ## 58 Compact Driver only Rear 4 Yes non-USA ## 59 Midsize Driver &amp; Passenger Rear 6 No non-USA ## 60 Sporty Driver only Front 4 Yes USA ## 61 Midsize None Rear 6 No USA ## 62 Small None Front 4 Yes non-USA ## 63 Midsize Driver only Front 6 No non-USA ## 64 Small Driver only Front 4 Yes non-USA ## 65 Compact Driver only Front 4 Yes non-USA ## 66 Van None Front 6 No non-USA ## 67 Midsize Driver only Front 6 No non-USA ## 68 Compact None Front 4 No USA ## 69 Midsize Driver only Front 4 No USA ## 70 Van None Front 6 No USA ## 71 Large Driver only Front 6 No USA ## 72 Sporty None 4WD 4 Yes USA ## 73 Small None Front 4 Yes USA ## 74 Compact None Front 4 Yes USA ## 75 Sporty Driver &amp; Passenger Rear 6 Yes USA ## 76 Midsize None Front 6 Yes USA ## 77 Large Driver &amp; Passenger Front 6 No USA ## 78 Compact Driver only Front 4 Yes non-USA ## 79 Small Driver only Front 4 Yes USA ## 80 Small None 4WD 3 Yes non-USA ## 81 Small None 4WD 4 Yes non-USA ## 82 Compact Driver only 4WD 4 Yes non-USA ## 83 Small None Front 3 Yes non-USA ## 84 Small Driver only Front 4 Yes non-USA ## 85 Sporty Driver only Front 4 Yes non-USA ## 86 Midsize Driver only Front 4 Yes non-USA ## 87 Van Driver only 4WD 4 Yes non-USA ## 88 Small None Front 4 Yes non-USA ## 89 Van None Front 5 Yes non-USA ## 90 Compact None Front 4 Yes non-USA ## 91 Sporty None Front 6 Yes non-USA ## 92 Compact Driver only Rear 4 Yes non-USA ## 93 Midsize Driver &amp; Passenger Front 5 Yes non-USA 10.1.8.2 다음의 범주형 변수를 막대 그래프를 이용하여 시각화 하려 합니다. AirBags DriveTrain Cylinders Man.trans.avail Origin 10.1.8.2.1 각각의 범주형 변수에 대한 기본 막대 그래프를 작성하시오. ggplot(Cars93, aes(x = AirBags)) + geom_bar() + ggtitle(&quot;기본 막대 그래프 : AirBags&quot;) ggplot(Cars93, aes(x = DriveTrain)) + geom_bar() + ggtitle(&quot;기본 막대 그래프 : DriveTrain&quot;) ggplot(Cars93, aes(x = Cylinders)) + geom_bar() + ggtitle(&quot;기본 막대 그래프 : Cylinders&quot;) ggplot(Cars93, aes(x = Man.trans.avail)) + geom_bar() + ggtitle(&quot;기본 막대 그래프 : Man.trans.avail&quot;) ggplot(Cars93, aes(x = Origin)) + geom_bar() + ggtitle(&quot;기본 막대 그래프 : Origin&quot;) 10.1.8.2.2 각각의 범주형 변수에 대한 기본 막대 그래프를 수평으로 작성하시오. ggplot(Cars93, aes(x = AirBags)) + geom_bar() + coord_flip() + ggtitle(&quot;기본 막대 그래프 : AirBags&quot;) ggplot(Cars93, aes(x = DriveTrain)) + geom_bar() + coord_flip() + ggtitle(&quot;기본 막대 그래프 : DriveTrain&quot;) ggplot(Cars93, aes(x = Cylinders)) + geom_bar() + coord_flip() + ggtitle(&quot;기본 막대 그래프 : Cylinders&quot;) ggplot(Cars93, aes(x = Man.trans.avail)) + geom_bar() + coord_flip() + ggtitle(&quot;기본 막대 그래프 : Man.trans.avail&quot;) ggplot(Cars93, aes(x = Origin)) + geom_bar() + coord_flip() + ggtitle(&quot;기본 막대 그래프 : Origin&quot;) 10.1.8.2.3 각각의 범주형 변수에 대한 기본 막대 그래프에서 각 막대의 채우기 색을 각 범주형 변수로 지정하시오. ggplot(Cars93, aes(x = AirBags, fill = AirBags)) + geom_bar() + ggtitle(&quot;기본 막대 그래프 : AirBags&quot;) ggplot(Cars93, aes(x = DriveTrain, fill = DriveTrain)) + geom_bar() + ggtitle(&quot;기본 막대 그래프 : DriveTrain&quot;) ggplot(Cars93, aes(x = Cylinders, fill = Cylinders)) + geom_bar() + ggtitle(&quot;기본 막대 그래프 : Cylinders&quot;) ggplot(Cars93, aes(x = Man.trans.avail, fill = Man.trans.avail)) + geom_bar() + ggtitle(&quot;기본 막대 그래프 : Man.trans.avail&quot;) ggplot(Cars93, aes(x = Origin, fill = Origin)) + geom_bar() + ggtitle(&quot;기본 막대 그래프 : Origin&quot;) 10.1.8.2.4 각각의 범주형 변수에 대한 상대 비율 막대 그래프를 작성하시오. ggplot(Cars93, aes(x = AirBags, y = ..prop.., group = 1)) + geom_bar() + ggtitle(&quot;AirBags의 상대 비율 막대 그래프&quot;) + scale_y_continuous(labels = scales::percent_format()) ggplot(Cars93, aes(x = DriveTrain, y = ..prop.., group = 1)) + geom_bar() + ggtitle(&quot;DriveTrain의 상대 비율 막대 그래프&quot;) + scale_y_continuous(labels = scales::percent_format()) ggplot(Cars93, aes(x = Cylinders, y = ..prop.., group = 1)) + geom_bar() + ggtitle(&quot;Cylinders의 상대 비율 막대 그래프&quot;) + scale_y_continuous(labels = scales::percent_format()) ggplot(Cars93, aes(x = Man.trans.avail, y = ..prop.., group = 1)) + geom_bar() + ggtitle(&quot;Man.trans.avail의 상대 비율 막대 그래프&quot;) + scale_y_continuous(labels = scales::percent_format()) ggplot(Cars93, aes(x = Origin, y = ..prop.., group = 1)) + geom_bar() + ggtitle(&quot;Origin의 상대 비율 막대 그래프&quot;) + scale_y_continuous(labels = scales::percent_format()) 10.1.8.3 각각의 범주형 변수에 대하여 Y축에 MPG.city(도시주행 연비)의 평균을 막대 그래프로 작성하시오. 단, 각 막대의 채우기 색은 각 범주형 변수로 지정합니다. Cars93_Air &lt;- Cars93 %&gt;% group_by(AirBags) %&gt;% summarise(mean_MPG.c = mean(MPG.city)) ggplot(Cars93_Air, aes(x = AirBags, y = mean_MPG.c, fill = AirBags)) + geom_col() + ggtitle(&quot;AirBags 유형별 도시주행 연비&quot;) Cars93_DT &lt;- Cars93 %&gt;% group_by(DriveTrain) %&gt;% summarise(mean_MPG.c = mean(MPG.city)) ggplot(Cars93_DT, aes(x = DriveTrain, y = mean_MPG.c, fill = DriveTrain)) + geom_col() + ggtitle(&quot;DriveTrain 유형별 도시주행 연비&quot;) Cars93_Cyl &lt;- Cars93 %&gt;% group_by(Cylinders) %&gt;% summarise(mean_MPG.c = mean(MPG.city)) ggplot(Cars93_Cyl, aes(x = Cylinders, y = mean_MPG.c, fill = Cylinders)) + geom_col() + ggtitle(&quot;Cylinders 유형별 도시주행 연비&quot;) Cars93_Mta &lt;- Cars93 %&gt;% group_by(Man.trans.avail) %&gt;% summarise(mean_MPG.c = mean(MPG.city)) ggplot(Cars93_Mta, aes(x = Man.trans.avail, y = mean_MPG.c, fill = Man.trans.avail)) + geom_col() + ggtitle(&quot;Man.trans.avail 유형별 도시주행 연비&quot;) Cars93_Ori &lt;- Cars93 %&gt;% group_by(Origin) %&gt;% summarise(mean_MPG.c = mean(MPG.city)) ggplot(Cars93_Ori, aes(x = Origin, y = mean_MPG.c, fill = Origin)) + geom_col() + ggtitle(&quot;Origin 유형별 도시주행 연비&quot;) 10.1.8.4 다음의 각각의 범주형 변수에 대하여 자동차 유형(Type) 변수를 그룹으로 하여 그룹별 막대 그래프를 작성하시오. aes() 함수를 이용합니다. AirBags =&gt; Type DriveTrain =&gt; Type Cylinders =&gt; Type Man.trans.avail =&gt; Type Origin =&gt; Type ggplot(Cars93, aes(x = AirBags, fill = Type)) + # 막대 채우기 색을 Origin 별로 지정합니다. geom_bar(position = &quot;dodge&quot;, # 막대를 Origin 별로 수평 배열합니다.(기본 값은 &quot;stack&quot;) colour = &quot;black&quot;) + # 막대의 테두리 선을 지정합니다. scale_fill_brewer(palette = 1) + # 막대의 컬러 팔레트를 1로 지정합니다. ggtitle(&quot;AirBags별 자동차 유형 막대 그래프 : 이변량 막대 그래프&quot;) ggplot(Cars93, aes(x = DriveTrain, fill = Type)) + # 막대 채우기 색을 Origin 별로 지정합니다. geom_bar(position = &quot;dodge&quot;, # 막대를 Origin 별로 수평 배열합니다.(기본 값은 &quot;stack&quot;) colour = &quot;black&quot;) + # 막대의 테두리 선을 지정합니다. scale_fill_brewer(palette = 1) + # 막대의 컬러 팔레트를 1로 지정합니다. ggtitle(&quot;DriveTrain별 자동차 유형 막대 그래프 : 이변량 막대 그래프&quot;) ggplot(Cars93, aes(x = Cylinders, fill = Type)) + # 막대 채우기 색을 Origin 별로 지정합니다. geom_bar(position = &quot;dodge&quot;, # 막대를 Origin 별로 수평 배열합니다.(기본 값은 &quot;stack&quot;) colour = &quot;black&quot;) + # 막대의 테두리 선을 지정합니다. scale_fill_brewer(palette = 1) + # 막대의 컬러 팔레트를 1로 지정합니다. ggtitle(&quot;Cylinders별 자동차 유형 막대 그래프 : 이변량 막대 그래프&quot;) ggplot(Cars93, aes(x = Man.trans.avail, fill = Type)) + # 막대 채우기 색을 Origin 별로 지정합니다. geom_bar(position = &quot;dodge&quot;, # 막대를 Origin 별로 수평 배열합니다.(기본 값은 &quot;stack&quot;) colour = &quot;black&quot;) + # 막대의 테두리 선을 지정합니다. scale_fill_brewer(palette = 1) + # 막대의 컬러 팔레트를 1로 지정합니다. ggtitle(&quot;Man.trans.avail별 자동차 유형 막대 그래프 : 이변량 막대 그래프&quot;) ggplot(Cars93, aes(x = Origin, fill = Type)) + # 막대 채우기 색을 Origin 별로 지정합니다. geom_bar(position = &quot;dodge&quot;, # 막대를 Origin 별로 수평 배열합니다.(기본 값은 &quot;stack&quot;) colour = &quot;black&quot;) + # 막대의 테두리 선을 지정합니다. scale_fill_brewer(palette = 1) + # 막대의 컬러 팔레트를 1로 지정합니다. ggtitle(&quot;Origin별 자동차 유형 막대 그래프 : 이변량 막대 그래프&quot;) Go Top stat_*() 함수의 사용을 참고하기 바랍니다. "],["파이-차트-1.html", "10.2 파이 차트", " 10.2 파이 차트 ggplot() 함수를 이용하여 파이 차트를 작성하기 위해서는 먼저 geom_bar() 함수를 이용하여 막대 그래프를 그린 다음, coord_polar(“y”) 함수를 추가하여 원형의 파이 차트로 변환하는 절차를 따릅니다. 10.2.1 데이터 세트 데이터는 MASS 패키지에 들어있는 Cars93 데이터 프레임의 차종(Type)종별 파이 차트를 그려보겠습니다. library(ggplot2) library(MASS) str(Cars93) ## &#39;data.frame&#39;: 93 obs. of 27 variables: ## $ Manufacturer : Factor w/ 32 levels &quot;Acura&quot;,&quot;Audi&quot;,..: 1 1 2 2 3 4 4 4 4 5 ... ## $ Model : Factor w/ 93 levels &quot;100&quot;,&quot;190E&quot;,&quot;240&quot;,..: 49 56 9 1 6 24 54 74 73 35 ... ## $ Type : Factor w/ 6 levels &quot;Compact&quot;,&quot;Large&quot;,..: 4 3 1 3 3 3 2 2 3 2 ... ## $ Min.Price : num 12.9 29.2 25.9 30.8 23.7 14.2 19.9 22.6 26.3 33 ... ## $ Price : num 15.9 33.9 29.1 37.7 30 15.7 20.8 23.7 26.3 34.7 ... ## $ Max.Price : num 18.8 38.7 32.3 44.6 36.2 17.3 21.7 24.9 26.3 36.3 ... ## $ MPG.city : int 25 18 20 19 22 22 19 16 19 16 ... ## $ MPG.highway : int 31 25 26 26 30 31 28 25 27 25 ... ## $ AirBags : Factor w/ 3 levels &quot;Driver &amp; Passenger&quot;,..: 3 1 2 1 2 2 2 2 2 2 ... ## $ DriveTrain : Factor w/ 3 levels &quot;4WD&quot;,&quot;Front&quot;,..: 2 2 2 2 3 2 2 3 2 2 ... ## $ Cylinders : Factor w/ 6 levels &quot;3&quot;,&quot;4&quot;,&quot;5&quot;,&quot;6&quot;,..: 2 4 4 4 2 2 4 4 4 5 ... ## $ EngineSize : num 1.8 3.2 2.8 2.8 3.5 2.2 3.8 5.7 3.8 4.9 ... ## $ Horsepower : int 140 200 172 172 208 110 170 180 170 200 ... ## $ RPM : int 6300 5500 5500 5500 5700 5200 4800 4000 4800 4100 ... ## $ Rev.per.mile : int 2890 2335 2280 2535 2545 2565 1570 1320 1690 1510 ... ## $ Man.trans.avail : Factor w/ 2 levels &quot;No&quot;,&quot;Yes&quot;: 2 2 2 2 2 1 1 1 1 1 ... ## $ Fuel.tank.capacity: num 13.2 18 16.9 21.1 21.1 16.4 18 23 18.8 18 ... ## $ Passengers : int 5 5 5 6 4 6 6 6 5 6 ... ## $ Length : int 177 195 180 193 186 189 200 216 198 206 ... ## $ Wheelbase : int 102 115 102 106 109 105 111 116 108 114 ... ## $ Width : int 68 71 67 70 69 69 74 78 73 73 ... ## $ Turn.circle : int 37 38 37 37 39 41 42 45 41 43 ... ## $ Rear.seat.room : num 26.5 30 28 31 27 28 30.5 30.5 26.5 35 ... ## $ Luggage.room : int 11 15 14 17 13 16 17 21 14 18 ... ## $ Weight : int 2705 3560 3375 3405 3640 2880 3470 4105 3495 3620 ... ## $ Origin : Factor w/ 2 levels &quot;USA&quot;,&quot;non-USA&quot;: 2 2 2 2 2 1 1 1 1 1 ... ## $ Make : Factor w/ 93 levels &quot;Acura Integra&quot;,..: 1 2 4 3 5 6 7 9 8 10 ... 10.2.2 기본 파이 차트 파이 차트는 누적(stacked) 막대 그래프를 먼저 geom_bar()함수를 이용하여 그린 다음, coord_polar(\"y\")함수를 이용하여 원형(polar coordinates)으로 변경하는 절차를 따릅니다. (절차 1) 바로 아래에 있는 그래프가 누적 막대 그래프(stacked bar chart)를 그립니다. # 막대 그래프를 먼저 그린다. Cars93 %&gt;% ggplot() + aes(x = &quot;&quot;) + aes(fill = Type) + geom_bar(width = 1) Figure 10.17: 파이 차트를 그리기 위한 누적 막대 그래프 (절차 2) 그 다음 표현형식을 coord_polar(\"y\") 를 써서 원형으로 바꾸어 본 것이 아래 script 가 되겠습니다. ## 파이 차트(Pie Chart) Cars93 %&gt;% ggplot() + aes(x = &quot;&quot;) + aes(fill = Type) + geom_bar(width = 1) + coord_polar(&quot;y&quot;) Figure 10.18: 기본 파이 차트 Go Top 10.2.3 불스 아이 차트 그런데 이때 coord_polar()에 인수값을 지정하지 않으면 불스 아이 차트(Bull’s Eye Chart)가 됩니다. ## 불스 아이 차트 Cars93 %&gt;% ggplot() + aes(x = &quot;&quot;) + aes(fill = Type) + geom_bar(width = 1) + coord_polar() Figure 10.19: 불스 아이 차트 Go Top 10.2.4 Coxcomb Plot 한편 aes(x = Type)을 추가하면 Coxcomb Plot이 됩니다. # Coxcomb Plot Cars93 %&gt;% ggplot() + aes(x = Type) + aes(fill = Type) + geom_bar(width = 1) + coord_polar() Figure 10.20: Coxcomb Plot 1 coord_polar(\"y\")로 수정하면 다음과 같은 그래프가 됩니다. # Coxcomb Plot Cars93 %&gt;% ggplot() + aes(x = Type) + aes(fill = Type) + geom_bar(width = 1) + coord_polar(&quot;y&quot;) Figure 10.21: Coxcomb Plot2 Go Top 10.2.5 그룹별 파이 차트 데이터는 MASS 패키지에 들어있는 Cars93 데이터 프레임의 차종(Type)과 제조국(Origin) 데이터를 활용해서 차종별 제조국별 도수를 구한 후에, 원그림을 그려보겠습니다. 10.2.5.1 aes() 함수 이용 파이 차트는 누적(stacked) 막대 그래프를 먼저 geom_bar()함수를 이용하여 그린 다음, coord_polar(\"y\")함수를 이용하여 원형(polar coordinates)으로 변경하는 절차를 따릅니다. (절차 1) 바로 아래에 있는 그래프가 누적 막대 그래프(stacked bar chart)를 그립니다. Cars93 %&gt;% ggplot() + geom_bar(aes(x = Type, # 첫 번째 범주형 변수 y = ..count.., fill = Type, colour = Origin), # 두번쨰 범주형 변수 stat = &quot;count&quot;) Figure 10.22: 제조국별 파이 차트 작성을 위한 막대 그래프 **(절차 2) 그 다음 표현형식을 coord_polar(\"y\") 를 써서 파이차트를 작성합니다. Cars93 %&gt;% ggplot() + geom_bar(aes(x = Type, # 첫 번째 범주형 변수 y = ..count.., fill = Type, colour = Origin), # 두번쨰 범주형 변수 stat = &quot;count&quot;) + coord_polar(&quot;y&quot;) + ggtitle(&quot;제조국별 파이 차트 1 : aes() 함수의 이용&quot;) Figure 10.23: 제조국별 파이 차트 1 : aes() 함수의 이용 Go Top 10.2.5.2 facet_grid() 함수 이용 Cars93 %&gt;% ggplot() + aes(x = &quot;&quot;) + aes(fill = Type) + geom_bar(width = 1) + facet_grid(. ~ Origin) + coord_polar(&quot;y&quot;) + ggtitle(&quot;제조국별 파이 차트 2 - facet_grid() 함수 이용&quot;) Figure 10.24: 제조국별 파이 차트 2 - facet_grid() 함수 이용 여기서 facet_grid(. ~ Origin) 대신에 facet_grid(Orgin ~ .), facet_grid(. ~ Type), facet_grid(Type ~ .), facet_grid(Type ~ Orgin), 그리고 facet_grid(Orgin ~ Type) 등으로 변경해 보기 바랍니다. 10.2.5.3 facet_wrap() 함수 이용 Cars93 %&gt;% ggplot() + aes(x = &quot;&quot;) + aes(fill = Type) + geom_bar(width = 1) + facet_wrap(Origin ~ Type) + coord_polar(&quot;y&quot;) + ggtitle(&quot;제조국별 파이 차트 3 - facet_wrap() 함수 이용&quot;) Figure 10.25: 제조국별 파이 차트 3 - facet_wrap() 함수 이용 여기서 facet_wrap(Origin ~ Type) 부분을 facet_wrap( ~ Type), facet_wrap(Type ~ Origin), facet_wrap( ~ Origin), facet_wrap(vars(Origin)), 그리고 facet_wrap(vars(Type)) 등으로 변경해 보기 바랍니다. 이번 절에서 파이 차트를 소개하기는 했습니다만, 저는 파이 차트는 그다지 추천하지 않습니다. 일단 눈으로 보고 해석하기에, 범주간 비교가 용이하지가 않기 때문입니다. 막대 그래프의 높이가 범주 간 차이를 바로 보여주는 것과 비교하면 파이 차트는 불친절한 그래프입니다. (단, 두 집단(가령 USA, non-USA) 간에 과반을 넘는 특정 segment를 비교해서 강조하고 싶은 경우는 원그림이 효과적일 수도 있습니다.) Go Top 연습문제 10.2.5.4 Cars93의 범주형 변수 확인하기 10.2.5.4.1 Cars93 데이터 세트에 있는 범주형 변수(factor)들을 확인하시오. f &lt;- NULL g &lt;- NULL for (i in 1:dim(Cars93)[2]) { if (class(Cars93[ , i]) == &quot;factor&quot;) { f &lt;- c(f, names(Cars93)[i]) g &lt;- c(g, i) } } f # 범주형 변수의 이름 ## [1] &quot;Manufacturer&quot; &quot;Model&quot; &quot;Type&quot; &quot;AirBags&quot; ## [5] &quot;DriveTrain&quot; &quot;Cylinders&quot; &quot;Man.trans.avail&quot; &quot;Origin&quot; ## [9] &quot;Make&quot; g # Cars93 데이터 세트에서의 범주형 변수의 컬럼 색인 번호 ## [1] 1 2 3 9 10 11 16 26 27 10.2.5.4.2 Cars93 데이터 세트에 있는 범주형 변수(factor)들 중 수준(levels)이 6 이하인 변수를 확인하시오. l &lt;- NULL for (i in 1:length(g)) { if (length(levels(Cars93[ ,g[i]])) &lt;= 6) l &lt;- c(l, g[i]) } l ## [1] 3 9 10 11 16 26 Cars93_fac &lt;- Cars93[, l] Cars93_fac ## Type AirBags DriveTrain Cylinders Man.trans.avail Origin ## 1 Small None Front 4 Yes non-USA ## 2 Midsize Driver &amp; Passenger Front 6 Yes non-USA ## 3 Compact Driver only Front 6 Yes non-USA ## 4 Midsize Driver &amp; Passenger Front 6 Yes non-USA ## 5 Midsize Driver only Rear 4 Yes non-USA ## 6 Midsize Driver only Front 4 No USA ## 7 Large Driver only Front 6 No USA ## 8 Large Driver only Rear 6 No USA ## 9 Midsize Driver only Front 6 No USA ## 10 Large Driver only Front 8 No USA ## 11 Midsize Driver &amp; Passenger Front 8 No USA ## 12 Compact None Front 4 Yes USA ## 13 Compact Driver only Front 4 Yes USA ## 14 Sporty Driver &amp; Passenger Rear 6 Yes USA ## 15 Midsize None Front 4 No USA ## 16 Van None Front 6 No USA ## 17 Van None 4WD 6 No USA ## 18 Large Driver only Rear 8 No USA ## 19 Sporty Driver only Rear 8 Yes USA ## 20 Large Driver &amp; Passenger Front 6 No USA ## 21 Compact Driver &amp; Passenger Front 4 No USA ## 22 Large Driver only Front 6 No USA ## 23 Small None Front 4 Yes USA ## 24 Small Driver only Front 4 Yes USA ## 25 Compact Driver only Front 4 Yes USA ## 26 Van Driver only 4WD 6 No USA ## 27 Midsize Driver only Front 4 No USA ## 28 Sporty Driver only 4WD 6 Yes USA ## 29 Small None Front 4 Yes USA ## 30 Large Driver &amp; Passenger Front 6 No USA ## 31 Small None Front 4 Yes USA ## 32 Small None Front 4 Yes USA ## 33 Compact None Front 4 Yes USA ## 34 Sporty Driver only Rear 4 Yes USA ## 35 Sporty Driver only Front 4 Yes USA ## 36 Van Driver only 4WD 6 Yes USA ## 37 Midsize Driver only Front 6 No USA ## 38 Large Driver only Rear 8 No USA ## 39 Small None Front 3 Yes non-USA ## 40 Sporty Driver only Front 4 Yes non-USA ## 41 Sporty Driver &amp; Passenger Front 4 Yes non-USA ## 42 Small Driver only Front 4 Yes non-USA ## 43 Compact Driver &amp; Passenger Front 4 Yes non-USA ## 44 Small None Front 4 Yes non-USA ## 45 Small None Front 4 Yes non-USA ## 46 Sporty None Front 4 Yes non-USA ## 47 Midsize None Front 4 Yes non-USA ## 48 Midsize Driver only Rear 8 No non-USA ## 49 Midsize Driver only Front 6 Yes non-USA ## 50 Midsize Driver &amp; Passenger Rear 6 Yes non-USA ## 51 Midsize Driver &amp; Passenger Front 6 No USA ## 52 Large Driver &amp; Passenger Rear 8 No USA ## 53 Small None Front 4 Yes non-USA ## 54 Small None Front 4 Yes non-USA ## 55 Compact Driver only Front 4 Yes non-USA ## 56 Van None 4WD 6 No non-USA ## 57 Sporty Driver only Rear rotary Yes non-USA ## 58 Compact Driver only Rear 4 Yes non-USA ## 59 Midsize Driver &amp; Passenger Rear 6 No non-USA ## 60 Sporty Driver only Front 4 Yes USA ## 61 Midsize None Rear 6 No USA ## 62 Small None Front 4 Yes non-USA ## 63 Midsize Driver only Front 6 No non-USA ## 64 Small Driver only Front 4 Yes non-USA ## 65 Compact Driver only Front 4 Yes non-USA ## 66 Van None Front 6 No non-USA ## 67 Midsize Driver only Front 6 No non-USA ## 68 Compact None Front 4 No USA ## 69 Midsize Driver only Front 4 No USA ## 70 Van None Front 6 No USA ## 71 Large Driver only Front 6 No USA ## 72 Sporty None 4WD 4 Yes USA ## 73 Small None Front 4 Yes USA ## 74 Compact None Front 4 Yes USA ## 75 Sporty Driver &amp; Passenger Rear 6 Yes USA ## 76 Midsize None Front 6 Yes USA ## 77 Large Driver &amp; Passenger Front 6 No USA ## 78 Compact Driver only Front 4 Yes non-USA ## 79 Small Driver only Front 4 Yes USA ## 80 Small None 4WD 3 Yes non-USA ## 81 Small None 4WD 4 Yes non-USA ## 82 Compact Driver only 4WD 4 Yes non-USA ## 83 Small None Front 3 Yes non-USA ## 84 Small Driver only Front 4 Yes non-USA ## 85 Sporty Driver only Front 4 Yes non-USA ## 86 Midsize Driver only Front 4 Yes non-USA ## 87 Van Driver only 4WD 4 Yes non-USA ## 88 Small None Front 4 Yes non-USA ## 89 Van None Front 5 Yes non-USA ## 90 Compact None Front 4 Yes non-USA ## 91 Sporty None Front 6 Yes non-USA ## 92 Compact Driver only Rear 4 Yes non-USA ## 93 Midsize Driver &amp; Passenger Front 5 Yes non-USA 10.2.5.5 다음의 범주형 변수를 막대 그래프를 이용하여 시각화 하려 합니다. AirBags DriveTrain Cylinders Man.trans.avail Origin 10.2.5.5.1 각각의 범주형 변수에 대한 기본 파이 차트를 작성하시오. ggplot(Cars93, aes(x = &quot;&quot;, fill = AirBags)) + geom_bar(width = 1) + coord_polar(&quot;y&quot;) + ggtitle(&quot;기본 파이 차트 : AirBags&quot;) ggplot(Cars93, aes(x = &quot;&quot;, fill = DriveTrain)) + geom_bar(width = 1) + coord_polar(&quot;y&quot;) + ggtitle(&quot;기본 파이 차트 : DriveTrain&quot;) ggplot(Cars93, aes(x = &quot;&quot;, fill = Cylinders)) + geom_bar(width = 1) + coord_polar(&quot;y&quot;) + ggtitle(&quot;기본 파이 차트 : Cylinders&quot;) ggplot(Cars93, aes(x = &quot;&quot;, fill = Man.trans.avail)) + geom_bar(width = 1) + coord_polar(&quot;y&quot;) + ggtitle(&quot;기본 파이 차트 : Man.trans.avail&quot;) ggplot(Cars93, aes(x = &quot;&quot;, fill = Origin)) + geom_bar(width = 1) + coord_polar(&quot;y&quot;) + ggtitle(&quot;기본 파이 차트 : Origin&quot;) 10.2.5.5.2 각각의 범주형 변수에 대한 불스 아이 차트를 작성하시오. ggplot(Cars93, aes(x = &quot;&quot;, fill = AirBags)) + geom_bar(width = 1) + coord_polar() + ggtitle(&quot;불스 아이 차트 : AirBags&quot;) ggplot(Cars93, aes(x = &quot;&quot;, fill = DriveTrain)) + geom_bar(width = 1) + coord_polar() + ggtitle(&quot;불스 아이 차트 : DriveTrain&quot;) ggplot(Cars93, aes(x = &quot;&quot;, fill = Cylinders)) + geom_bar(width = 1) + coord_polar() + ggtitle(&quot;불스 아이 차트 : Cylinders&quot;) ggplot(Cars93, aes(x = &quot;&quot;, fill = Man.trans.avail)) + geom_bar(width = 1) + coord_polar() + ggtitle(&quot;불스 아이 차트 : Man.trans.avail&quot;) ggplot(Cars93, aes(x = &quot;&quot;, fill = Origin)) + geom_bar(width = 1) + coord_polar() + ggtitle(&quot;불스 아이 차트 : Origin&quot;) 10.2.5.5.3 각각의 범주형 변수에 대한 Coxcomb Plot을 작성하시오. Coxcomb Plot 1 : ggplot(Cars93, aes(x = AirBags, fill = AirBags)) + geom_bar(width = 1) + coord_polar() + ggtitle(&quot;Coxcomb Plot 1 : AirBags&quot;) ggplot(Cars93, aes(x = DriveTrain, fill = DriveTrain)) + geom_bar(width = 1) + coord_polar() + ggtitle(&quot;Coxcomb Plot 2 : DriveTrain&quot;) ggplot(Cars93, aes(x = Cylinders, fill = Cylinders)) + geom_bar(width = 1) + coord_polar() + ggtitle(&quot;Coxcomb Plot 2 : Cylinders&quot;) ggplot(Cars93, aes(x = Man.trans.avail, fill = Man.trans.avail)) + geom_bar(width = 1) + coord_polar() + ggtitle(&quot;Coxcomb Plot 2 : Man.trans.avail&quot;) ggplot(Cars93, aes(x = Origin, fill = Origin)) + geom_bar(width = 1) + coord_polar() + ggtitle(&quot;Coxcomb Plot 1 : Origin&quot;) Coxcomb Plot 2 : ggplot(Cars93, aes(x = AirBags, fill = AirBags)) + geom_bar(width = 1) + coord_polar(&quot;y&quot;) + ggtitle(&quot;Coxcomb Plot 2 : AirBags&quot;) ggplot(Cars93, aes(x = DriveTrain, fill = DriveTrain)) + geom_bar(width = 1) + coord_polar(&quot;y&quot;) + ggtitle(&quot;Coxcomb Plot 2 : DriveTrain&quot;) ggplot(Cars93, aes(x = Cylinders, fill = Cylinders)) + geom_bar(width = 1) + coord_polar(&quot;y&quot;) + ggtitle(&quot;Coxcomb Plot 2 : Cylinders&quot;) ggplot(Cars93, aes(x = Man.trans.avail, fill = Man.trans.avail)) + geom_bar(width = 1) + coord_polar(&quot;y&quot;) + ggtitle(&quot;Coxcomb Plot 2 : Man.trans.avail&quot;) ggplot(Cars93, aes(x = Origin, fill = Origin)) + geom_bar(width = 1) + coord_polar(&quot;y&quot;) + ggtitle(&quot;Coxcomb Plot 2 : Origin&quot;) 10.2.5.6 다음의 각각의 범주형 변수에 대하여 자동차 유형(Type) 변수를 그룹으로 하여 그룹별 파이 차트를 작성하시오. facet_wrap( , ncol = 3) 함수를 이용하시오. AirBags =&gt; Type DriveTrain =&gt; Type Cylinders =&gt; Type Man.trans.avail =&gt; Type Origin =&gt; Type ggplot(Cars93, aes(x = &quot;&quot;, fill = AirBags)) + geom_bar(width = 1) + coord_polar(&quot;y&quot;) + facet_wrap( ~ Type, ncol = 3) + ggtitle(&quot;자동차 유형별 파이 차트 : AirBags&quot;) ggplot(Cars93, aes(x = &quot;&quot;, fill = DriveTrain)) + geom_bar(width = 1) + coord_polar(&quot;y&quot;) + facet_wrap( ~ Type, ncol = 3) + ggtitle(&quot;자동차 유형별 파이 차트 : DriveTrain&quot;) ggplot(Cars93, aes(x = &quot;&quot;, fill = Cylinders)) + geom_bar(width = 1) + coord_polar(&quot;y&quot;) + facet_wrap( ~ Type, ncol = 3) + ggtitle(&quot;자동차 유형별 파이 차트 : Cylinders&quot;) ggplot(Cars93, aes(x = &quot;&quot;, fill = Man.trans.avail)) + geom_bar(width = 1) + coord_polar(&quot;y&quot;) + facet_wrap( ~ Type, ncol = 3) + ggtitle(&quot;자동차 유형별 파이 차트 : Man.trans.avail&quot;) ggplot(Cars93, aes(x = &quot;&quot;, fill = Origin)) + geom_bar(width = 1) + coord_polar(&quot;y&quot;) + facet_wrap( ~ Type, ncol = 3) + ggtitle(&quot;자동차 유형별 파이 차트 : Origin&quot;) Go Top "],["일변량-변수-연속형-데이터.html", "11 일변량 변수 - 연속형 데이터", " 11 일변량 변수 - 연속형 데이터 이 중 하나의 연속형 변수에 대한 그래프들은 데이터의 퍼진 정도/분포 모양와 이상치 여부를 쉽고 빠르게 파악할 수 있도록 합니다. 이번 장에서는 일변량 연속형 데이터를 그래프로 시각화하는 히스토그램 (Histogram) 커널 밀도 곡선 (Kernel Density Curve) 박스 그래프 (Box Plot) 바이올린 그래프 (Vilon Plot) 등을 중심으로 살펴 보겠습니다. "],["gg히스토그램.html", "11.1 히스토그램", " 11.1 히스토그램 히스토그램(Histogram)은 연속형 변수를 일정한 구간(bin width)으로 나누어서, 빈도수를 구한 후에 이를 막대그래프로 시각화한 그래프입니다. 11.1.1 데이터 세트 이번 절에서는 먼저 ggplot2 패키지의 geom_histogram() 를 활용해서 히스토그램을 그리는 방법에 대해서 알아보겠습니다. 데이터는 MASS 패키지에 들어있는 Cars93 데이터 프레임 데이터 세트에서 가격(Price)과 자동차유형(Type) 변수를 활용하여 히스토그램을 그려보겠습니다. library(ggplot2) # 또는 library(tidyverse) # Cars93 데이터 프레임 library(MASS) str(Cars93) 11.1.2 기본 히스토그램 ggplot2 패키지를 library()로 호출한 후에 ggplot() 함수의 + geom_histogram() 함수를 사용하여 기본 값 옵션으로 히스토그램을 그리면 됩니다. 히스토그램을 그리는 기본적인 절차는 다음과 같습니다. ggplot(Cars93, aes(x = Price)) : Cars93을 데이터 세트로 사용하며, aes( ) 함수 안에 x 축에 표시할 변수로 Price를 지정해 줍니다. 이 ggplot() 함수로 기본 그래프를 작성하지만 아무런 결과도 표시가 되지 않습니다. + : 기본 그래프와 다음에 나올 그래프 관련 함수들을 연결해 줍니다. geom_histogram() : 기본 그래프를 히스토그램 형태로 시각화 해줍니다. 이제 Cars93 데이터 세트에서 가격(Price) 변수를 기본적인 히스토그램으로 시각화해 보겠습니다. # binwidth defaulted to range/30 ggplot(Cars93, aes(x = Price)) + # 그래프의 기본 틀을 설정합니다. 데이터와 X축의 변수를 지정합니다. geom_histogram() # 히스트로그램으로 표현합니다. ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. Figure 11.1: 기본 히스토그램 ggplot() 함수에 대한 자세한 사항은 ? ggplot을 참고하기 바랍니다. Go Top 11.1.3 구간 폭의 기본값 위에 실행결과 콘솔창의 메시지를 보면 “stat_bin: binwidth defaulted to range/30. Use 'binwidth = x' to adjust this.”이라는 메시지가 아래 보이는데요, 이는 binwidth를 설정하지 않아서 range/30 디폴트 기준으로 binwidth를 계산해서 그렸다는 뜻입니다. 구간의 갯수(bins)는 기본 값이 30개입니다. 아래에 실제 범위(range)를 구해서 30으로 나누었더니 1.816 이었고, 이 값을 geom_histogram(binwidth = 1.816) 옵션값으로 입력해서 히스토그램을 그려보았더니 위와 같음을 알 수 있습니다. library(MASS) range(Cars93$Price) # Price 변수의 범위를 구합니다. (최솟값, 최댓값) ## [1] 7.4 61.9 diff(range(Cars93$Price)) # (최댓값 - 최솟값) 을 구합니다. ## [1] 54 diff(range(Cars93$Price))/30 # (최댓값 - 최솟값) / 30 을 구합니다. = 1.816 ## [1] 1.8 ggplot(Cars93, aes(x=Price)) + # 그래프의 기본 틀을 설정합니다. 데이터와 X축을 지정합니다. geom_histogram(binwidth = 1.816) + # 앞에서 구한 1,816을 구간의 폭으로 지정합니다. ggtitle(&quot;Binwidth=1.816 ; Default, range/30&quot;) Figure 11.2: 히스토그램의 구간의 폭 Go Top 11.1.4 구간의 폭 조정 히스토그램에서 중요하면서 어려운 문제 중의 하나가 bin 개수를 몇 개로 할 것인가, 다른 말로 binwidth로 구간의 폭을 얼마로 할 것인가 입니다. bin 개수가 너무 많으면 (즉, binwidth가 너무 좁으면) 이빨빠진 머리빗처럼 데이터의 분포 모양을 파악하는데 부적절할 수가 있습니다. 반면에 bin 개수가 너무 적으면 (즉, binwidth가 너무 넓으면) 너무 많은 도수가 하나의 bin에 몰려서 막대기둥 한 두개만 덩그라니 서 있게 되어 이 또한 데이터의 분포 모양을 파악하는데 도움이 안되게 됩니다. 적절한 bin 개수를 선정하는게 중요합니다. 아래에서는 binwidth 값을 조절해 가면서 히스토그램을 그려보겠습니다. 그런데 여기서 ggplot() 함수의 결과를 h1과 같이 변수에 치환할 수 있습니다. 그리고 h1을 입력하면 바로 그래프가 출력되게 됩니다. library(MASS) # 다양한 폭으로 히스토그램 그리기 h1 &lt;- ggplot(Cars93, aes(x=Price)) + geom_histogram(binwidth = 0.5) + # 구간의 폭을 0.5로 설정합니다. ggtitle(&quot;Binwidth=0.5&quot;) h2 &lt;- ggplot(Cars93, aes(x=Price)) + geom_histogram(binwidth = 1.0) + # 구간의 폭을 1.0으로 설정합니다. ggtitle(&quot;Binwidth=1.0&quot;) h3 &lt;- ggplot(Cars93, aes(x=Price)) + geom_histogram(binwidth = 1.5) + # 구간의 폭을 1.5로 설정합니다. ggtitle(&quot;Binwidth=1.5&quot;) h4 &lt;- ggplot(Cars93, aes(x=Price)) + geom_histogram(binwidth = 1.816) + # 구간의 폭을 1.816으로 설정합니다. ggtitle(&quot;Binwidth=1.816 ; Default, range/30&quot;) h5 &lt;- ggplot(Cars93, aes(x=Price)) + geom_histogram(binwidth = 5) + # 구간의 폭을 5로 설정합니다. ggtitle(&quot;Binwidth=5&quot;) h6 &lt;- ggplot(Cars93, aes(x=Price)) + geom_histogram(binwidth = 10) + # 구간의 폭을 10으로 설정합니다. ggtitle(&quot;Binwidth=10&quot;) ##----------------- ## multiplot function by knitr and Jekyll (author of Cookbook for R) ## 아래 사용자정의 함수를 그대로 카피해서 사용하면 됩니다. # install.packages(&quot;grid&quot;) library(grid) multiplot &lt;- function(..., plotlist=NULL, file, cols=1, layout=NULL) { library(grid) # Make a list from the ... arguments and plotlist plots &lt;- c(list(...), plotlist) numPlots = length(plots) # If layout is NULL, then use &#39;cols&#39; to determine layout if (is.null(layout)) { # Make the panel # ncol: Number of columns of plots # nrow: Number of rows needed, calculated from # of cols layout &lt;- matrix(seq(1, cols * ceiling(numPlots/cols)), ncol = cols, nrow = ceiling(numPlots/cols)) } if (numPlots==1) { print(plots[[1]]) } else { # Set up the page grid.newpage() pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout)))) # Make each plot, in the correct location for (i in 1:numPlots) { # Get the i,j matrix positions of the regions that contain this subplot matchidx &lt;- as.data.frame(which(layout == i, arr.ind = TRUE)) print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row, layout.pos.col = matchidx$col)) } } } ##----------------- # 하나의 페이지에 여러 개의 플롯을 그리기 : multiplot() 함수 이용 multiplot(h1, h2, h3, h4, h5, h6, cols=2) # 6개의 그래프를 2개의 열로 나타냅니다. Figure 11.3: 히스토그램의 구간의 너비 조정 위에서 처럼 한개의 화면에 여러개의 그래프를 배열하기 위해서 multiplot() 함수(by knitr and Jekyll)를 사용하였습니다. binwidth = 5 일 때가 위의 6개 그래프 중에서는 상대적으로 가장 적합해 보이므로 아래 예제부터는 binwidth = 5 를 사용하겠습니다. Go Top 11.1.5 구간의 수 조정 앞에서는 데이터를 구분할 때 데이터 구간의 폭(binwidth)으로 조정하였습니다. 이번에는 데이터를 구분하는 전체 구간의 수(bins)로 조절해 보겠습니다. bins의 기본 값은 30입니다. library(MASS) # 구간의 수 조정 b1 &lt;- ggplot(Cars93, aes(x=Price)) + geom_histogram(bins = 10) + # 구간의 수를 10개로 정합니다. ggtitle(&quot;Bins = 10&quot;) b2 &lt;- ggplot(Cars93, aes(x=Price)) + geom_histogram(bins = 15) + # 구간의 수를 15개로 정합니다. ggtitle(&quot;Bins = 15&quot;) b3 &lt;- ggplot(Cars93, aes(x=Price)) + geom_histogram(bins = 20) + # 구간의 수를 20개로 정합니다. ggtitle(&quot;Bins = 20&quot;) b4 &lt;- ggplot(Cars93, aes(x=Price)) + geom_histogram(bins = 25) + # 구간의 수를 25개로 정합니다. ggtitle(&quot;Bins = 25&quot;) # 하나의 페이지에 여러 개의 플롯을 그리기 : multiplot() 함수 이용 multiplot(b1, b2, b3, b4, cols=2) # 6개의 그래프를 2개의 열로 나타냅니다. Figure 11.4: 히스토그램의 구간 수 조정 자세한 사항은 ? geom_histogram 을 참고하기 바랍니다. Go Top 히스토그램의 bin width를 수동으로 설정해주고, bin별로 색깔을 다르게 해서 히스토그램을 그려보겠습니다. #---------------- # histogram with variable size of bin width and different colors per bins using ggplot2 #---------------- # sample data frame mydf &lt;- data.frame(var = c(1100, 10000, 100000, 190000, 110000, 220000, 550000, 701000, 790000)) # numeric notation for large numbers options(scipen = 30) library(&quot;ggplot2&quot;) # fill color with different colors per bins mydf$group &lt;- ifelse(mydf $var &lt; 10000, 1, ifelse(mydf $var &lt; 100000, 2, ifelse(mydf $var &lt; 200000, 3, ifelse(mydf $var &lt; 500000, 4, 5)))) # breaks of bin bins &lt;- c(1000, 10000, 100000, 200000, 500000, 800000) # draw histogram with variable size of bin width and different colors per bins ggplot(mydf, aes(x= var)) + geom_histogram(data=subset(mydf, group==1), breaks = c(1000, 10000), fill=&quot;black&quot;) + geom_histogram(data=subset(mydf, group==2), breaks = c(10000, 100000), fill=&quot;yellow&quot;) + geom_histogram(data=subset(mydf, group==3), breaks = c(100000, 200000), fill=&quot;green&quot;) + geom_histogram(data=subset(mydf, group==4), breaks = c(200000, 500000), fill=&quot;blue&quot;) + geom_histogram(data=subset(mydf, group==5), breaks = c(500000, 800000), fill=&quot;red&quot;) + scale_x_continuous(breaks = bins, limits = c(1000, 800000)) + xlab(&quot;variable 1&quot;) + ylab(&quot;count&quot;) + ggtitle(&quot;Histogram with different size of bin width and colors&quot;) + theme(plot.title = element_text(hjust = 0.5, size = 14)) Go Top 11.1.6 색 지정 위의 히스토그램을 보면 거무튀튀하니 그다지 색깔이 아름답지는 않지요? 그러면 이번에는 색 채우기, 경계선 색 지정하기를 해보겠습니다. library(MASS) # 채우기 색, 경계선 색 : geom_histogram(binwidth, fill, colour) ggplot(Cars93, aes(x=Price)) + geom_histogram(binwidth=5, fill = &quot;blue&quot;, # 막대의 색을 &quot;blue&quot;로 설정합니다. colour = &quot;black&quot;) + # 막대의 테두리 색을 &quot;black&quot;으로 설정합니다. ggtitle(&quot;히스토그램의 채우기 색과 테두리 색 지정&quot;) Figure 11.5: 히스토그램의 채우기 색과 테두리 색 지정 자세한 사항은 ? geom_histogram 을 참고하기 바랍니다. Go Top 11.1.7 stat_bin() 함수의 이용 geom_*() 함수들은 기본적인 stat_*() 함수를 가지고 있습니다.4 args(geom_histogram)로 확인해 보면 geom_histogram() 함수는 stat = \"bin\"을 알고리즘으로 사용하고 있습니다. geom_histogram() 함수의 경우에는 stat_bin() 함수가 여기에 해당하며, geom_histogram() 함수 대신에 stat_bin() 함수를 이용할 수 있습니다. ggplot(Cars93, aes(x=Price)) + stat_bin(binwidth = 5) # 히스트로그램으로 표현합니다. Figure 11.6: 기본 히스토그램 : stat_bin() 함수 자세한 사항은 ? stat_density()로 확인하기 바랍니다. 11.1.8 데이터 레이블 달기 stat_bin() 함수를 이용하여 데이터 레이블을 표시할 수 있습니다. library(MASS) # 채우기 색, 경계선 색 : geom_histogram(binwidth, fill, colour) ggplot(Cars93, aes(x=Price)) + geom_histogram(binwidth=5, fill = &quot;blue&quot;, # 막대의 색을 &quot;blue&quot;로 설정합니다. colour = &quot;black&quot;) + # 막대의 테두리 색을 &quot;black&quot;으로 설정합니다. stat_bin(binwidth = 5, geom = &quot;text&quot;, aes(label = ..count..), color = &quot;red&quot;, vjust = -0.5) + # or position = position_stack(vjust = 0.5)) + ylim(c(0, 25)) + ggtitle(&quot;히스토그램에 데이터 레이블 달기&quot;) Figure 11.7: 히스토그램에 데이터 레이블 달기 11.1.9 그룹별 히스토그램 일변량 연속형 데이터에 대한 그래프를 그룹별로 작성할 수도 있습니다. 예를 들어 지금까지 차량의 가격(Price)으로 히스토그램을 작성하였는데, 이를 요인형 변수인 차량의 유형(Type) 별로 작성할 수도 있습니다. 이를 위해서는 다음과 같은 3가지 방법으로 가능하며, 각각의 모수에 요인형 변수를 지정해 주는 것입니다. aes()함수에 colour, fill, group 등의 모수를 추가하는 방법입니다. facet_grid() 함수를 이용하는 방법입니다. facet_wrap() 함수를 이용하는 방법입니다. 11.1.9.1 aes() 함수의 모수 이용 aes() 함수에 추가할 수 있는 모수로 colour, fill, group 등이 있습니다. colour = Type을 추가하면, 각 히스토그램의 막대의 테두리 색이 Type별로 구분이 되어 표시됩니다. fille = Type을 추가하면 히스토그램의 막대가 Type 별로 색이 채워집니다. 이때는 geom_histogram() 함수에 colour = “white” 와 같이 테두리 색을 지정해 주는 것이 좋습니다. group = Type을 추가하면 히스토그램이 Type별로 구분이 됩니다. 그러나, geom_histogram() 함수에 colour = “white” 와 같이 테두리 색을 지정해 주어야 확인이 가능합니다. # 그룹별 히스토그램 그리기 : aes()에 모수 지정하기 # colour 모수에 Type 변수를 지정하기 ggplot(Cars93, aes(x = Price, colour = Type)) + # 막대를 채우는 색으로 요인형 변수를 지정합니다. geom_histogram(binwidth=5) Figure 11.8: 그룹별 히스토그램 : aes() 모수 이용 # fill 모수에 Type변수를 지정하기 ggplot(Cars93, aes(x = Price, colour = Type, fill = Type)) + # 막대를 채우는 색으로 요인형 변수를 지정합니다. geom_histogram(binwidth=5, colour = &quot;white&quot;) # 테두리 선을 지정합니다. Figure 11.9: 그룹별 히스토그램 : aes() 모수 이용 # group 모수에 Type변수를 지정하기 ggplot(Cars93, aes(x = Price, group = Type)) + # 막대가 Type별로 구분됩니다. geom_histogram(binwidth=5, colour = &quot;white&quot;) # 구분된 부분의 테두리 색을 지정합니다. Figure 11.10: 그룹별 히스토그램 : aes() 모수 이용 11.1.9.2 facet_grid() 함수 이용 자동차 유형별(Type)로 앞의 히스토그램을 비교하기 위해서는 facet_grid(Type ~ .) 또는 facet_grid(vars(Type))으로 지정하는 방법과 facet_grid( . ~ Type) 으로 지정하는 방법을 각각 살펴 보겠습니다. library(MASS) # Type 그룹별 히스토그램 그리기 # 요인(factor) 여부 확인, levels 확인 class(Cars93$Type); levels(Cars93$Type) ## [1] &quot;factor&quot; ## [1] &quot;Compact&quot; &quot;Large&quot; &quot;Midsize&quot; &quot;Small&quot; &quot;Sporty&quot; &quot;Van&quot; # 요인/집단/그룹(factor)별로 나누어서 히스토그램 그리기 ggplot(Cars93, aes(x=Price)) + geom_histogram(binwidth=5, fill = &quot;blue&quot;, colour = &quot;black&quot;) + ggtitle(&quot;facet_grid(Type ~ .)&quot;) + facet_grid(Type ~ .) # 히스토그램을 Type 별로 세로로 배열합니다. Figure 11.11: 그룹별 히스토그램 : facet_grid( Type ~ .) 위의 히스토그램처럼 자동차의 유형(Type)인 ‘Compact,’ ‘Large,’ ‘Midsize,’ ‘Small,’ ‘Sporty,’ ‘Van’ 의 6개 유형별로 가격(Price)의 히스토그램을 그려보면 서로 한눈에 비교가 가능하니 매우 유용하다고 하겠습니다. 참고로, 위처럼 가로로 비교를 하는 것이 아니라 세로로 세워서 그래프를 그린 후에 비교를 하려면 + facet_grid(. ~ Type) 처럼 괄호안의 기입 순서를 바꾸어주면 됩니다. 단, 아래에 예시 그래프를 보면 알겠지만, 차종별로 가격의 분포를 비교하기에는 아래처럼 그래프를 그려서는 안되겠지요? 분석 목적에 맞게 가로로 비교할지, 세로로 비교할지 잘 선택해서 사용하시기 바랍니다. library(MASS) # 요인/집단/그룹(factor)별로 나누어서 히스토그램 그리기 # 그룹 히스토그램 ggplot(Cars93, aes(x=Price)) + geom_histogram(binwidth=5, fill = &quot;blue&quot;, colour = &quot;black&quot;) + ggtitle(&quot; facet_grid(. ~ Type)&quot;) + facet_grid(. ~ Type) # 히스토그램을 Type 별로 가로로 배열합니다. Figure 11.12: 그룹별 히스토그램 : facet_grid( . ~ Type) 자세한 사항은 ? facet_grid 를 참고하기 바랍니다. Go Top 11.1.9.3 facet_wrap() 함수 이용 한편, facet_wrap() 함수를 이용하여 각 자동차 유형(Type)별 히스트로그램을 작성할 수도 있습니다. 1 함수 대신에 facet_wrap(~ Type, ncol = 2)를 추가해 보겠습니다. library(MASS) # 요인/집단/그룹(factor)별로 나누어서 히스토그램 그리기 # 그룹 히스토그램 ggplot(Cars93, aes(x=Price)) + geom_histogram(binwidth=5, fill = &quot;blue&quot;, colour = &quot;black&quot;) + ggtitle(&quot;facet_wrap() 함수의 사용&quot;) + facet_wrap(~ Type, ncol = 2) # 히스토그램을 Type 별로 2열로 배열합니다. Figure 11.13: 그룹별 히스토그램 : facet_wrap(~ Type) 참고자료 : R ggplot2 Facet(ing) 함수 기초 따라잡기 자세한 사항은 ? facet_wrap을 참고하기 바랍니다. Go Top 11.1.10 Theme의 사용 ggplot2 패키지는 8 가지의 그래프 테마(Complete Themes)를 제공하고 있습니다. 다음의 예는 theme_class() 함수를 사용하여 X축과 Y축의 서식을 지정하는 예를 보여 주고 있습니다. 또한 참고로 Y축의 값에 컴마(,)를 삽입하는 예도 포함하였습니다. ## Theme의 사용 ggplot(Cars93, aes(x=Price)) + geom_histogram(binwidth=5, fill = &quot;blue&quot;, colour = &quot;white&quot;) + ggtitle(&quot;Theme의 사용&quot;) + ggplot2::theme_classic() + # 그래프 테마 지정 ggplot2::theme(axis.title.x = element_text(size = 10, face = &quot;italic&quot;, color = &quot;gray&quot;, angle = 0, vjust = 0.5), axis.title.y = element_text(size = 10, face = &quot;bold.italic&quot;, color = &quot;gray&quot;, angle = 0, vjust = 0.5)) + # X축과 Y축의 서식 스타일 지정 ggplot2::scale_y_continuous(labels = scales::comma) # Y 값의 천단위에 콤마 표시 Figure 11.14: 히스토그램 : Theme의 사용 자세한 Theme의 사용 방법은 ? theme을 참고하기 바랍니다. Go Top stat_*() 함수에 대한 설명을 참고하기 바랍니다. "],["커널-밀도-곡선.html", "11.2 커널 밀도 곡선", " 11.2 커널 밀도 곡선 다음으로, 커널 밀도 추정함수를 가지고 그린 커널 밀도 곡선(kernel density curve)를 그려보겠습니다. 히스토그램은 빈도를 가지고 그리며, geom_histogram()함수를 사용하며, 계단식으로 각이 져 있는데요, 커널 밀도 곡선(kernel density curve)은 확률(모두 더하면 1)을 이용하여 그리고, geom_density() 함수를 사용하며, smoothing 된 곡선으로 되어 있습니다. 11.2.1 기본 커널 밀도 곡선 커널 밀도 곡선을 그리는 기본적인 절차는 다음과 같습니다. ggplot(Cars93, aes(x = Price)) : Cars93을 데이터 세트로 사용하며, aes( ) 함수 안에 x 축에 표시할 변수로 Price를 지정해 줍니다. 이 ggplot() 함수로 기본 그래프를 작성하지만 아무런 결과도 표시가 되지 않습니다. + : 기본 그래프와 다음에 나올 그래프 관련 함수들을 연결해 줍니다. geom_density() : 기본 그래프를 커널 밀도 곡선 형태로 시각화 해줍니다. 이제 Cars93 데이터 세트에서 가격(Price) 변수를 커널 밀도 곡선으로 그려 보겠습니다. library(ggplot2) library(MASS) ## 기본 커널 밀도 곡선 # 가격 커널 밀도 곡선(Kernel Density Curve) ggplot(Cars93, aes(x=Price)) + # 그래프의 기본 틀을 설정합니다. 데이터와 X축을 지정합니다. geom_density() # 커널 밀도 곡선을 그려줍니다. Figure 11.15: 가격 커널 밀도 곡선 Go Top 11.2.2 색의 지정과 곡선 추가하기 이번 절에서는 커널 밀도 곡선의 옵션 설정에 대하여 간단한 예를 들어 살펴보겠습니다. 이를 위해 커널 밀도 곡선을 k1 ~ k3 까지의 변수에 치환하겠습니다. 11.2.2.1 곡선의 색과 아랫 부분의 색 지정 다음은 커널 밀도 곡선의 색(colour)의 지정과 커널 밀도 곡선 아랫 부분을 채워 넣은 색(fill)을 지정하고, 또한 fill 색의 투명도(alpha)를 설정한 커널 밀도 곡선이 k1입니다. library(MASS) # 다양한 옵션을 설정한 가격 커널 밀도 곡선(Kernel Density Curve) k1 &lt;- ggplot(Cars93, aes(x=Price)) + geom_density(fill = &quot;yellow&quot;, # 곡선 밑부분을 &quot;yellow&quot; 색으로 채웁니다. colour = &quot;red&quot;, # 커널 밀도 곡선의 색을 &quot;red&quot;로 표시합니다. alpha = .2) + # fill 색의 투명도를 20%로 설정합니다. ggtitle(&quot;곡선의 색과 곡선 아래 부분의 색 지정(투명도 포함)&quot;) # 그래프의 제목을 지정합니다. k1 Figure 11.16: 가격 커널 밀도 곡선 : 선과 면 색 지정 11.2.2.2 geom_line() 함수의 이용 이번에는geom_density() 함수에서 곡선을 지우고(colour =NA), geom_line() 함수를 이용한 밀도함수로 대체해 보겠습니다. 이때, geom_line() 함수의 모수로 stat = “density”를 설정합니다. 그리고 ggplot() 함수의 결과를 k2 변수에 치환합니다. k2 &lt;- ggplot(Cars93, aes(x=Price)) + geom_density(fill = &quot;yellow&quot;, colour = NA, # 커널 밀도 곡선을 지웁니다. alpha = .5) + geom_line(stat = &quot;density&quot;) + # 커널 밀도 곡선을 추가합니다. ggtitle(&quot;geom_line() 함수의 이용&quot;) k2 Figure 11.17: 가격 커널 밀도 곡선 : geom_line() 함수 이용 11.2.2.3 축 값의 범위 지정 X 축의 차량 가격(Price)에 대한 확률을 나타내는 Y축의 값의 범위를 설정해 보겠습니다. 이는 expand_limits() 함수를 이용하여 설정할 수 있는데, 앞에서의 커널 밀도 함수를 보면 확률 값이 0.06을 넘지 않는 것을 알 수 있습니다. 이제 expand_limits() 함수의 인수로 y = c(0, 0.06)으로 설정해 보고 그래프를 다시 그려 보겠습니다. 그리고 그 결과는 k3변수에 대입하겠습니다. k3 &lt;- ggplot(Cars93, aes(x=Price)) + geom_density(fill = &quot;yellow&quot;, colour = NA, alpha=.5) + geom_line(stat = &quot;density&quot;) + expand_limits(y = c(0, 0.06)) + # y 축값의 범위를 지정합니다. 0 ~ 0.06 ggtitle(&quot;Y 축 범위의 지정&quot;) k3 Figure 11.18: 옵션을 설정한 다양한 커널 밀도 곡선 # 하나의 페이지에 여러 개의 플롯을 그리기 : multiplot() 함수 이용 multiplot(k1, k2, k3, cols = 1) Figure 11.19: 옵션을 설정한 다양한 커널 밀도 곡선 참고로 x축의 값을 40 ~ 60으로 제한하고자 할 때는 xlim(40, 60)을 추가해 주면 됩니다. ggplot(Cars93, aes(x=Price)) + geom_density(fill = &quot;yellow&quot;, colour = NA, alpha=.5) + geom_line(stat = &quot;density&quot;) + expand_limits(y = c(0, 0.06)) + xlim(40, 60) + # x 축 값의 범위를 지정합니다. 40 ~ 60 ggtitle(&quot;X,Y 축 범위의 지정&quot;) ## Warning: Removed 91 rows containing non-finite values (stat_density). ## Warning: Removed 91 rows containing non-finite values (stat_density). Figure 11.20: 커널 밀도 곡선 : X축과 Y축의 값 범위 지정 Go Top 11.2.3 stat_density() 함수의 이용 geom_*() 함수들은 기본적인 stat_*() 함수를 가지고 있습니다.5 args(geom_density)로 확인해 보면 geom_density() 함수는 stat = \"density\"를 알고리즘으로 사용하고 있습니다. geom_density() 함수의 경우에는 stat_density() 함수가 여기에 해당하며, geom_density() 함수 대신에 stat_density() 함수를 이용할 수 있습니다. ## 기본 커널 밀도 곡선 # 가격 커널 밀도 곡선(Kernel Density Curve) ggplot(Cars93, aes(x=Price)) + stat_density(colour = &quot;black&quot;, fill = NA) Figure 11.21: 가격 커널 밀도 곡선 : stat_density() 함수 이용 자세한 사항은 ? stat_density()로 확인하기 바랍니다. 11.2.4 그룹별 커널 밀도 곡선 지금까지의 커널 밀도 곡선은 연속형 데이터인 차량 가격(Price)을 시각화한 것입니다. 이번 절에서는 이러한 가격(Price)에 대한 커널 밀도 곡선을 차량의 유형별(Type) 별로 따로 시각화해 보겠습니다. 이때 차량의 유형 변수 Type은 요인(factor)형 변수입니다. 그룹별 커널 밀도 곡선도 앞에서의 그룹별 히스토그램과 마찬가지로 aes() 함수, facet_grid(), 그리고 facet_wrap() 함수를 이용하여 작성할 수 있습니다. 11.2.4.1 aes() 함수의 모수 이용 # 차종(Type)별 가격 커널 밀도 곡선 ggplot(Cars93, aes(x=Price, colour = Type)) + # 그룹변수(요인변수)를 colour에 지정해 줍니다. geom_density(fill = &quot;yellow&quot;, colour = NA, alpha=.5) + geom_line(stat = &quot;density&quot;) + expand_limits(y = c(0, 0.06)) + ggtitle(&quot;차종(Type)별 가격 커널 밀도 곡선&quot;) Figure 11.22: 차종별 가격 커널 밀도 곡선 11.2.4.2 facet_grid() 함수 이용 facet_grid() 함수를 이용해서도 그룹별 커널 밀도 곡선을 그릴 수 있습니다. # 차종(Type)별 가격 커널 밀도 곡선 ggplot(Cars93, aes(x=Price)) + geom_density(fill = &quot;yellow&quot;, colour = NA, alpha=.5) + geom_line(stat = &quot;density&quot;) + expand_limits(y = c(0, 0.06)) + facet_grid(Type ~ .) + # Type 별로 그래프를 표시해 줍니다. ggtitle(&quot;차종(Type)별 가격 커널 밀도 곡선&quot;) Figure 11.23: 차종별 가격 커널 밀도 곡선 : facet_grid() # 차종(Type)별 가격 커널 밀도 곡선 ggplot(Cars93, aes(x=Price)) + geom_density(fill = &quot;yellow&quot;, colour = NA, alpha=.5) + geom_line(stat = &quot;density&quot;) + expand_limits(y = c(0, 0.06)) + facet_grid(. ~ Type) + # Type 별로 그래프를 표시해 줍니다. ggtitle(&quot;차종(Type)별 가격 커널 밀도 곡선&quot;) Figure 11.24: 차종별 가격 커널 밀도 곡선 : facet_grid() 11.2.4.3 facet_wrap() 함수 이용 facet_wrap 함수를 이용해서도 그룹별 커널 밀도 곡선을 그릴 수 있습니다. # 차종(Type)별 가격 커널 밀도 곡선 ggplot(Cars93, aes(x=Price)) + geom_density(fill = &quot;yellow&quot;, colour = NA, alpha=.5) + geom_line(stat = &quot;density&quot;) + expand_limits(y = c(0, 0.06)) + facet_wrap( ~ Type) + # Type 별로 그래프를 표시해 줍니다. ggtitle(&quot;차종(Type)별 가격 커널 밀도 곡선&quot;) Figure 11.25: 차종별 가격 커널 밀도 곡선 : facet_wrap() Go Top 11.2.5 커널 밀도 곡선의 최정점 표시하기 커널 밀도 곡선의 최정점 값(Peak Value)을 구하고 수직선을 추가해 보도록 하겠습니다. 11.2.5.1 최정점 값 구하기 커널 밀도 함수의 최정점이 되는 X와 Y를 구하기 위한 절차는 다음과 같습니다. 커널 밀도 함수의 최정점 값을 구합니다. 즉 확률밀도의 최대값을 구합니다. (Y의 최댓값) Y의 최댓값이 되는 X 축의 값을 구합니다. 이를 R 스크립트로 구현하면 다음과 같습니다. ## 최정점이 되는 X, Y 값 구하기 # 1) Y값 구하기 den &lt;- density(Cars93$Price) Y &lt;- max(den$y) Y ## [1] 0.05 # 2) X값 구하기 index.X &lt;- which.max(den$y) X &lt;- den$x[index.X] X ## [1] 16 11.2.5.2 커널 밀도 곡선에 최정점 표시하기 geom_vline() 함수를 이용하여 앞에서 구한 y 피크값의 x 좌표를 입력해주면 커널 밀도 곡선의 최대 피크값 위치에 수직선(vertical line)을 추가할 수 있습니다. # 커널 밀도 곡선에 최정점 표시하기 ggplot(Cars93, aes(x=Price)) + geom_density(fill = &quot;yellow&quot;, colour = NA, alpha=.5) + geom_line(stat = &quot;density&quot;) + expand_limits(y = c(0, 0.06)) + ggtitle(&quot;커널 밀도 곡선에 최정점 표시하기&quot;) + geom_vline(xintercept = X, # Y값이 최대가 되는 X축의 값을 지정합니다. color = &#39;blue&#39;, # 수직선의 색을 지정합니다. size = 1.5, # 수직선의 두께를 지정합니다. linetype = &quot;dotted&quot;) # 수직선의 형탤르 지정합니다. Figure 11.26: 커널 밀도 곡선의 점점에 수직선 표시하기 참고 자료 : https://rfriend.tistory.com/485 Go Top 11.2.6 히스토그램과 커널 밀도 곡선 겹쳐 그리기 히스토그램과 커널 밀도 곡선을 겹쳐서 그려보도록 하겠습니다. # 히스토그램과 커널 밀도 곡선을 겹쳐서 그리기 ggplot(Cars93, aes(x = Price, y = ..density..)) + # Y축을 ..density..로 설정합니다. geom_histogram(binwidth = 5, fill = &quot;blue&quot;, colour = &quot;white&quot;, alpha = 0.5) + geom_density(fill = NA, colour = NA, alpha = 0.8) + geom_line(stat = &quot;density&quot;) + expand_limits(y = c(0, 0.06)) + ggtitle(&quot;히스토그램과 커널 밀도 곡선을 겹쳐서 그리기&quot;) Figure 11.27: 히스토그램과 커널 밀도 곡선 겹쳐 그리기 Go Top 11.2.7 Theme의 사용 히스토그램에서 Theme을 사용하였듯이, 커널 밀도 곡선에서도 Theme을 사용할 수 있습니다. 앞에서 사용한 theme 부분을 그대로 복사해서 붙여 넣으면 앞의 theme을 그대로 사용할 수 있습니다. 다음의 예에서 ggplot2::theme_classic() + 이하 부분은 히스토그램에서 Theme을 사용에서 사용한 부분을 그대로 복사해서 붙여 넣은 내용입니다. # Theme의 사용 ggplot(Cars93, aes(x = Price, y = ..density..)) + geom_histogram(binwidth = 5, fill = &quot;blue&quot;, colour = &quot;white&quot;, alpha = 0.5) + geom_density(fill = NA, colour = NA, alpha = 0.8) + geom_line(stat = &quot;density&quot;) + expand_limits(y = c(0, 0.06)) + ggtitle(&quot;히스토그램과 커널 밀도 곡선을 겹쳐서 그리기&quot;) + ggplot2::theme_classic() + # 그래프 테마 지정 ggplot2::theme(axis.title.x = element_text(size = 10, face = &quot;italic&quot;, color = &quot;gray&quot;, angle = 0, vjust = 0.5), axis.title.y = element_text(size = 10, face = &quot;bold.italic&quot;, color = &quot;gray&quot;, angle = 0, vjust = 0.5)) + # X축과 Y축의 서식 스타일 지정 ggplot2::scale_y_continuous(labels = scales::comma) # Y 값의 천단위에 콤마 표시 Figure 11.28: 히스토그램과 커널 밀도 곡선 겹쳐 그리기 : Theme의 사용 Go Top stat_*() 함수에 대한 설명을 참고하기 바랍니다. "],["박스-그래프.html", "11.3 박스 그래프", " 11.3 박스 그래프 박스 그래프(Box Plot)는 Box-and-Whiskers Plot 이라고도 하는데요, 연속형 변수에 대해 min, Q1, median, Q3, max, lower whisker, upper whisker, outlier (IQR(Inter-Quartile Range)의 1.5배 초과 시) 등을 한눈에 볼 수 있게 그린 그래프로 그림 11.29 와 같은 형태를 가집니다. 연속형안 하나의 변수에 대해 분포의 중심, 퍼짐 정도(variance), 치우침 정도(skewness), 이상치/특이값(outlier) 존재 여부, 대칭성(symmetry) 등을 알 수 있는 매우, 매우, 매우 유용한 그래프라고 하겠습니다. 특히 박스 그래프는 이상치에 덜 민감한(robust) 중앙값, IQR 값을 사용한다는 점에서 이상치에 민감한 평균, 표준편차 대비 중심 경향과 퍼짐 정도를 파악하는데 있어 상대적으로 더 믿을 만하다고 말할 수 있습니다. 상당히 유용하겠지요?! Figure 11.29: 박스 플롯의 구성 이번 절에서는 먼저 ggplot2 패키지의 geom_boxplot() 를 활용해서 박스그래프(박스 플롯, 수염상자 그림, 상자그림 등으로 불림)을 그리는 방법에 대해서 알아보겠습니다. 11.3.1 데이터 세트 데이터는 MASS 패키지에 들어있는 Cars93 데이터 프레임 데이터 셋에서 가격(Price)과 자동차유형(Type) 변수를 활용하여 박스 그래프를 그려보겠습니다. library(ggplot2) # Cars93 데이터 프레임 library(MASS) str(Cars93) ## &#39;data.frame&#39;: 93 obs. of 27 variables: ## $ Manufacturer : Factor w/ 32 levels &quot;Acura&quot;,&quot;Audi&quot;,..: 1 1 2 2 3 4 4 4 4 5 ... ## $ Model : Factor w/ 93 levels &quot;100&quot;,&quot;190E&quot;,&quot;240&quot;,..: 49 56 9 1 6 24 54 74 73 35 ... ## $ Type : Factor w/ 6 levels &quot;Compact&quot;,&quot;Large&quot;,..: 4 3 1 3 3 3 2 2 3 2 ... ## $ Min.Price : num 12.9 29.2 25.9 30.8 23.7 14.2 19.9 22.6 26.3 33 ... ## $ Price : num 15.9 33.9 29.1 37.7 30 15.7 20.8 23.7 26.3 34.7 ... ## $ Max.Price : num 18.8 38.7 32.3 44.6 36.2 17.3 21.7 24.9 26.3 36.3 ... ## $ MPG.city : int 25 18 20 19 22 22 19 16 19 16 ... ## $ MPG.highway : int 31 25 26 26 30 31 28 25 27 25 ... ## $ AirBags : Factor w/ 3 levels &quot;Driver &amp; Passenger&quot;,..: 3 1 2 1 2 2 2 2 2 2 ... ## $ DriveTrain : Factor w/ 3 levels &quot;4WD&quot;,&quot;Front&quot;,..: 2 2 2 2 3 2 2 3 2 2 ... ## $ Cylinders : Factor w/ 6 levels &quot;3&quot;,&quot;4&quot;,&quot;5&quot;,&quot;6&quot;,..: 2 4 4 4 2 2 4 4 4 5 ... ## $ EngineSize : num 1.8 3.2 2.8 2.8 3.5 2.2 3.8 5.7 3.8 4.9 ... ## $ Horsepower : int 140 200 172 172 208 110 170 180 170 200 ... ## $ RPM : int 6300 5500 5500 5500 5700 5200 4800 4000 4800 4100 ... ## $ Rev.per.mile : int 2890 2335 2280 2535 2545 2565 1570 1320 1690 1510 ... ## $ Man.trans.avail : Factor w/ 2 levels &quot;No&quot;,&quot;Yes&quot;: 2 2 2 2 2 1 1 1 1 1 ... ## $ Fuel.tank.capacity: num 13.2 18 16.9 21.1 21.1 16.4 18 23 18.8 18 ... ## $ Passengers : int 5 5 5 6 4 6 6 6 5 6 ... ## $ Length : int 177 195 180 193 186 189 200 216 198 206 ... ## $ Wheelbase : int 102 115 102 106 109 105 111 116 108 114 ... ## $ Width : int 68 71 67 70 69 69 74 78 73 73 ... ## $ Turn.circle : int 37 38 37 37 39 41 42 45 41 43 ... ## $ Rear.seat.room : num 26.5 30 28 31 27 28 30.5 30.5 26.5 35 ... ## $ Luggage.room : int 11 15 14 17 13 16 17 21 14 18 ... ## $ Weight : int 2705 3560 3375 3405 3640 2880 3470 4105 3495 3620 ... ## $ Origin : Factor w/ 2 levels &quot;USA&quot;,&quot;non-USA&quot;: 2 2 2 2 2 1 1 1 1 1 ... ## $ Make : Factor w/ 93 levels &quot;Acura Integra&quot;,..: 1 2 4 3 5 6 7 9 8 10 ... 11.3.2 기본 박스 그래프 그럼, 먼저 Cars93 데이터 프레임 내 가격(Price) 변수 하나를 가지고 geom_boxplot()을 사용하여 박스 그래프(Box Plot)을 그려보겠습니다. # 기본 박스 그래프 그리기 ggplot(Cars93, aes(x = 1, # 박스 그래프는 기본적으로 x = 1로 설정합니다. y = Price)) + # Y축의 변수로 Price를 설정합니다. geom_boxplot() # 박스 그래프를 그립니다. Figure 11.30: 기본 박스 그래프 Go Top 11.3.3 X축의 이름과 척도 없애기 기본 박스 그래프를 그려 보면 X 축에 의미가 없는 척도가 표시가 됩니다. scale_x_continuous() 함수의 모수에 breaks = NULL을 설정하여 X축의 이름을 없애고, theme() 함수의 모수에 axis.title.x = element_blank() 를 설정하여 X축의 척도를 생략할 수 있습니다. # X축의 이름과 척도 없애기 ggplot(Cars93, aes(x = 1, y = Price)) + geom_boxplot() + scale_x_continuous(breaks = NULL) + # x축 척도 생략 theme(axis.title.x = element_blank()) + # x축 이름름 생략 ggtitle(&quot;X축의 이름과 척도 없애기&quot;) Figure 11.31: X축의 이름과 구분자 없애기 Go Top 11.3.4 이상값의 표현 앞에서의 박스 그래프에는 가격(Price) 데이터의 이상치(outliers)가 표시되고 있는데, 이러한 이상치를 표시하는데 있어서 크기는 outlier.size, 모양은 outlier.shape, 그리고 색은 outlier.colour 등의 모수를 이용합니다. 다음의 예는 이상치 데이터에 대하여 모양을 13번 모양6으로 하고, 그 크기는 3(기본 값은 1)으로 그리고 색은 “red”로 표시하는 예입니다. # 박스 플롯의 이상치 표시 ggplot(Cars93, aes(x = 1, y = Price)) + geom_boxplot(outlier.size = 3, # 이상치 데이터 기호의 크기를 3으로 설정합니다. outlier.shape = 13, # 이상치 데이터 기호의 모양을 13으로 설정합니다. outlier.colour = &quot;red&quot;) + # 이상치 데이터 기호의 색을 &quot;red&quot;로 설정합니다. scale_x_continuous(breaks = NULL) + theme(axis.title.x = element_blank()) + ggtitle(&quot;박스 플롯의 이상치 표시&quot;) Figure 11.32: 박스 플롯의 이상치 표시 Go Top 11.3.5 박스 그래프에 데이터를 점으로 표시하기 박스 그래프에 geom_jitter() 함수를 이용하여 데이터를 점으로 표시할 수 있습니다. 또한 geom_jitter() 함수 안의 shape 모수를 이용하여 점의 모양7을 그리고 position 모수를 이용하여 점의 위치를 설정할 수 있습니다. # 박스 그래프에 데이터를 점으로 표시하기 ggplot(Cars93, aes(x = 1, y = Price)) + geom_boxplot(outlier.size = 3, outlier.shape = 13, outlier.colour = &quot;red&quot;) + geom_jitter() + scale_x_continuous(breaks = NULL) + theme(axis.title.x = element_blank()) + ggtitle(&quot; 박스 그래프에 데이터를 점으로 표시하기&quot;) Figure 11.33: 박스 그래프에 데이터를 점으로 표시하기 # 박스 그래프에 데이터를 점으로 표시하기 ggplot(Cars93, aes(x = 1, y = Price)) + geom_boxplot(outlier.size = 3, outlier.shape = 13, outlier.colour = &quot;red&quot;) + geom_jitter(shape = 16, # 데이터 기호의 모양을 16으로 설정합니다. position = position_jitter(width = 0.1, height = 0.1)) + # 점의 위치를 설정합니다. scale_x_continuous(breaks = NULL) + theme(axis.title.x = element_blank()) + ggtitle(&quot; 박스 그래프에 데이터를 점으로 표시하기&quot;) Figure 11.34: 박스 그래프에 데이터를 점으로 표시하기 Go Top 11.3.6 수평 박스 그래프 coord_flip() 함수를 추가하여 박스 그래프를 수평으로 회전시킬 수 있습니다. # 수평 박스 그래프 ggplot(Cars93, aes(x = 1, y = Price)) + geom_boxplot(outlier.size = 3, outlier.shape = 13, outlier.colour = &quot;red&quot;) + geom_jitter(shape = 16, position = position_jitter(width = 0.1, height = 0.1)) + scale_x_continuous(breaks = NULL) + theme(axis.title.x = element_blank()) + ggtitle(&quot;수평 박스 그래프&quot;) + coord_flip() # 박스 그래프를 수평으로 회전시킵니다. Figure 11.35: 수평 박스 그래프 Go Top 11.3.7 노치 박스 그래프 geom_boxplot() 함수에 notch = TRUE 모수를 추가하여 박스의 허리가 V자 모양인 노치 박스 그래프를 그릴 수 있습니다. # 수평 박스 그래프 ggplot(Cars93, aes(x = 1, y = Price)) + geom_boxplot(outlier.size = 3, outlier.shape = 13, outlier.colour = &quot;red&quot;, notch = TRUE) + # 노치 박스 그래프를 그립니다. geom_jitter(shape = 16, position = position_jitter(width = 0.1, height = 0.1)) + scale_x_continuous(breaks = NULL) + theme(axis.title.x = element_blank()) + ggtitle(&quot; 노치 박스 그래프&quot;) + coord_flip() Figure 11.36: V 자형 박스 그래프 Go Top 11.3.8 박스 그래프의 색 지정하기 또한 geom_boxplot() 함수에 col 모수를 추가하여 박스 그래프의 색을 설정할 수 있습니다. # 박스 그래프의 색 지정하기 ggplot(Cars93, aes(x = 1, y = Price)) + geom_boxplot(outlier.size = 3, outlier.shape = 13, outlier.colour = &quot;red&quot;, notch = TRUE, col = &quot;blue&quot;) + # 박스 그래프의 색을 지정합니다. geom_jitter(shape = 16, position = position_jitter(width = 0.1, height = 0.1)) + scale_x_continuous(breaks = NULL) + theme(axis.title.x = element_blank()) + ggtitle(&quot;박스 그래프의 색 지정하기&quot;) + coord_flip() Figure 11.37: 박스 그래프 : 색 지정 Go Top 11.3.9 박스 그래프에 평균 추가하기 박스 그래프의 박스 가운데 선은 평균이 아닌 중앙값(Median)을 나타냅니다. 따라서 박스 그래프에 평균을 표시해 보도록 하겠습니다. 평균은 이상치에 민감하므로 아래 예제처럼 이상치가 있는 경우에는 중심화 경향을 나타내는 통계량으로 부적합하며, 박스 그림의 박스 가운데에 쳐진 선이 의미하는 중앙값(Median) 이 더 적합한 중심화 경향 지표라고 하겠습니다. 평균을 추가하기 위해서는 stat_summary() 함수를 이용합니다. 그리고 fun.y = “mean” 모수를 추가해 줍니다. 다음의 예에서는 동시에 기호의 모양, 크기, 그리고 색도 지정하고 있습니다. # 박스 그래프에 평균 추가하기 ggplot(Cars93, aes(x = 1, y = Price)) + geom_boxplot() + stat_summary(fun.y = &quot;mean&quot;, # Y축의 평균값을 산출합니다 geom = &quot;point&quot;, # 점으로 표시합니다. shape = 8, # 점의 모양을 8로 지정합니다. size = 3, # 점의 크기를 지정합니다. colour = &quot;blue&quot;) + # 점의 색을 지정합니다. ggtitle(&quot;박스 그래프에 평균 표시하기&quot;) ## Warning: `fun.y` is deprecated. Use `fun` instead. Figure 11.38: 박스 그래프에 평균 표시하기 다음의 예는 x축을 자동차 유형(Type)으로 하고 y축을 자동차 가격(Price)로 하는 박스 그래프를 그리고 각 자동차 유형별 평균 가격을 점으로 나타내고 있습니다. # 박스 그래프에 평균 추가하기 ggplot(Cars93, aes(x = Type, y = Price)) + geom_boxplot(width = 0.8, outlier.size = 3, outlier.shape = 16, outlier.colour = &quot;red&quot;) + stat_summary(fun.y = &quot;mean&quot;, # Y축의 평균값을 산출합니다 geom = &quot;point&quot;, # 점으로 표시합니다. shape = 8, # 점의 모양을 8로 지정합니다. size = 3, # 점의 크기를 지정합니다. colour = &quot;blue&quot;) + # 점의 색을 지정합니다. ggtitle(&quot;박스 그래프에 자동차 유형별 가격의 평균 표시하기&quot;) ## Warning: `fun.y` is deprecated. Use `fun` instead. Figure 11.39: 박스 그래프에 자동차 유형별 가격의 평균 표시하기 Go Top 11.3.10 stat_boxplot() 함수의 이용 geom_*() 함수들은 기본적인 stat_*() 함수를 가지고 있습니다.8 args(geom_boxplot)로 확인해 보면 geom_boxplot() 함수는 stat = \"boxplot\"를 알고리즘으로 사용하고 있습니다. geom_boxplot() 함수의 경우에는 stat_boxplot() 함수가 여기에 해당하며, geom_boxplot() 함수 대신에 stat_boxplot() 함수를 이용할 수 있습니다. # 기본 박스 그래프 그리기 ggplot(Cars93, aes(x = 1, y = Price)) + stat_boxplot() # 박스 그래프를 그립니다. Figure 11.40: 기본 박스 그래프 : stat_boxplot() 함수 이용 자세한 사항은 ? stat_boxplot()로 확인하기 바랍니다. 11.3.11 그룹별 박스 그래프 그룹별 박스 그래프의 경우도 앞에서의 그룹별 히스토그램과 그룹별 커널 밀도 곡선에서 처럼 aes() 함수의 모수를 이용하거나, facet_grid() 함수와 facet_wrap() 함수를 이용하여 그룹별 박스 그래프를 작성할 수 있습니다. 11.3.11.1 aes() 함수의 모수 이용 다음으로, 차종별(Type)로 가격(Price) 변수에 대해 박스 그래프를 그려보겠습니다. aes(x = factor.variable) 을 입력해주면 되겠습니다. 여기서 주의할 점은 x 는 요인(factor)형 변수가 입력되어야 합니다. 차종(Type)은 이미 요인형 변수이므로 그대로 입력하면 됩니다. 만약 요인형 변수가 아니라면 x=factor(variable name) 이런 식으로 입력해주거나, 아니면 형 변환 함수인 as.factor() 함수를 이용하여 데이터 형태를 요인형 변수로 변경해도 좋습니다. 한편 이러한 차종별(Type) 그룹별 박스 그래프의 테두리 색을 지정하고 싶다면, aes() 함수에 colour = factor.variable을 삽입해 주면 됩니다. 그리고 박스의 색을 채우고 싶다면 aes() 함수에 fill = factor variable를 추가해 주면 됩니다. 그런데 colour와 fill 모수는 동시에 사용하기 보다는 둘 중의 하나를 선택하는 것이 좋을 것 같습니다. ## 그룹별 박스 그래프 : aes() 모수 이용 # 차종별(Type) 박스 그래프 ggplot(Cars93, aes(x = Type, # x 축에 요인형(그룹) 변수를 지정합니다. y = Price)) + # y 축에 일변량 연속형 변수를 지정합니다. geom_boxplot(width=0.8, outlier.size=3, outlier.shape=16, outlier.colour=&quot;red&quot;) + ggtitle(&quot;차종별(Type) 박스그래프&quot;) Figure 11.41: 차종별 박스 그래프와 색 지정하기 # 차종별(Type) 박스 그래프 : 테두리 색 지정 ggplot(Cars93, aes(x = Type, # x 축에 요인형(그룹) 변수를 지정합니다. y = Price, colour = Type)) + # aes() 함수의 모수 colour 에 요인형 변수 지정. geom_boxplot(width=0.8, outlier.size=3, outlier.shape=16, outlier.colour=&quot;red&quot;) + ggtitle(&quot;차종별(Type) 박스그래프 : 테두리 색 지정&quot;) Figure 11.42: 차종별 박스 그래프와 색 지정하기 # 차종별(Type) 박스 그래프 : 색 채우기 ggplot(Cars93, aes(x = Type, # x 축에 요인형(그룹) 변수를 지정합니다. y = Price, # colour = Type, # 테두리 색을 지정합니다. fill = Type)) + # 박스 그래프를 채울 색을 지정합니다. geom_boxplot(width=0.8, outlier.size=3, outlier.shape=16, outlier.colour=&quot;red&quot;) + ggtitle(&quot;차종별(Type) 박스그래프 : 색 채우기&quot;) Figure 11.43: 차종별 박스 그래프와 색 지정하기 11.3.11.2 facet_grid() 함수 이용 aes() 함수에 x = Type 모수를 추가하고, facet_grid( . ~ Type)을 추가해 줍니다. (facet_grid(vars(Type)) 또는 facet_type(Type ~ .) 등은 바람직 하지 않습니다.) ## 그룹별 박스 그래프 : facet_grid() 함수 이용 # 차종별(Type) 박스그래프 ggplot(Cars93, aes(y = Price)) + geom_boxplot(width=0.8, outlier.size=3, outlier.shape=16, outlier.colour=&quot;red&quot;) + scale_x_continuous(breaks = NULL) + # x축 이름 생략 theme(axis.title.x = element_blank()) + # x축 척도 생략 facet_grid( . ~ Type) + # Type 별로 박스 그래프를 그립니다. ggtitle(&quot;차종별(Type) 박스그래프 : facet_grid() 함수&quot;) Figure 11.44: 차종별 박스 그래프 : facet_grid() # 차종별(Type) 박스그래프 : 색 지정하기 (테두리 선) ggplot(Cars93, aes(y = Price, colour = Type)) + geom_boxplot(width=0.8, outlier.size=3, outlier.shape=16, outlier.colour=&quot;red&quot;) + scale_x_continuous(breaks = NULL) + # x축 이름 생략 theme(axis.title.x = element_blank()) + # x축 척도 생략 facet_grid( . ~ Type) + # Type 별로 박스 그래프를 그립니다. ggtitle(&quot;차종별(Type) 박스그래프 : facet_grid() 함수&quot;) Figure 11.45: 차종별 박스 그래프 : facet_grid() # 차종별(Type) 박스그래프 : 색 지정하기 (채우기) ggplot(Cars93, aes(y = Price, fill = Type)) + geom_boxplot(width=0.8, outlier.size=3, outlier.shape=16, outlier.colour=&quot;red&quot;) + scale_x_continuous(breaks = NULL) + # x축 이름 생략 theme(axis.title.x = element_blank()) + # x축 척도 생략 facet_grid( . ~ Type) + # Type 별로 박스 그래프를 그립니다. ggtitle(&quot;차종별(Type) 박스그래프 : facet_grid() 함수&quot;) Figure 11.46: 차종별 박스 그래프 : facet_grid() 11.3.11.3 facet_wrap() 함수 이용 aes() 함수에 x = Type 모수를 추가하고, facet_wrap(~ Type, ncol = 3)을 추가해 줍니다. ## 그룹별 박스 그래프 : facet_wrap() 함수 이용 # 차종별(Type) 박스그래프 ggplot(Cars93, aes(y = Price)) + geom_boxplot(width=0.8, outlier.size=3, outlier.shape=16, outlier.colour=&quot;red&quot;) + scale_x_continuous(breaks = NULL) + theme(axis.title.x = element_blank()) + facet_wrap(~ Type, ncol = 3) + # Type 별로 박스 그래프를 3열로 그립니다. ggtitle(&quot;차종별(Type) 박스그래프 : facet_wrap() 함수&quot;) Figure 11.47: 차종별 박스 그래프 : facet_wrap() # 차종별(Type) 박스그래프 : 테두리 선 ggplot(Cars93, aes(y = Price, colour = Type)) + # 테두리 선의 색을 지정합니다. geom_boxplot(width=0.8, outlier.size=3, outlier.shape=16, outlier.colour=&quot;red&quot;) + scale_x_continuous(breaks = NULL) + theme(axis.title.x = element_blank()) + facet_wrap(~ Type, ncol = 3) + # Type 별로 박스 그래프를 3열로 그립니다. ggtitle(&quot;차종별(Type) 박스그래프 : facet_wrap() 함수&quot;) Figure 11.48: 차종별 박스 그래프 : facet_wrap() # 차종별(Type) 박스그래프 : 색 채우기 ggplot(Cars93, aes(y = Price, fill = Type)) + # 채우기 색을 지정합니다. geom_boxplot(width=0.8, outlier.size=3, outlier.shape=16, outlier.colour=&quot;red&quot;) + scale_x_continuous(breaks = NULL) + theme(axis.title.x = element_blank()) + facet_wrap(~ Type, ncol = 3) + # Type 별로 박스 그래프를 3열로 그립니다. ggtitle(&quot;차종별(Type) 박스그래프 : facet_wrap() 함수&quot;) Figure 11.49: 차종별 박스 그래프 : facet_wrap() Go Top 11.3.12 두 개의 요인형 변수를 고려한 박스 그래프 만약 차종(Type)과 생산지(Origin)의 두 기준/그룹으로 구분해서 박스 그래프를 그리고 싶다면 이 경우에도 aes() 함수의 모수를 이용하는 방법, facet_grid() 함수를 이용하는 방법 그리고 facet_wrap()을 이용하는 방법을 생각할 수 있습니다. 11.3.12.1 aes() 함수의 모수 이용 aes(fill = Origin) 또는 aes(color = Origin) 을 추가해 주면 됩니다. # 두 기준/그룹별 박스 그래프 그리기 : aes() 함수의 모수 이용 # fill 모수 지정 ggplot(Cars93, aes(x = Type, # Type 변수를 X로 지정합니다. y = Price, fill = Origin)) + # Orgin 변수를 fill의 값으로 지정합니다. geom_boxplot(width=0.8, outlier.size=3, outlier.shape=16, outlier.colour=&quot;red&quot;) + ggtitle(&quot;차종과 생산지 별 박스 그래프 : fill&quot;) Figure 11.50: 차종별 생산지별 박스 그래프 : aes() # colour 모수 지정 ggplot(Cars93, aes(x = Type, # Type 변수를 X로 지정합니다. y = Price, colour = Origin)) + # Orgin 변수를 colour의 값으로 지정합니다. geom_boxplot(width=0.8, outlier.size=3, outlier.shape=16, outlier.colour=&quot;red&quot;) + ggtitle(&quot;차종과 생산지 별 박스 그래프 : colour&quot;) Figure 11.51: 차종별 생산지별 박스 그래프 : aes() 11.3.12.2 facet_grid() 함수의 이용 첫 번째 기준으로 차종(Type)을 그리고 두 번째 기준으로 생산지(Origin)로 해서 박스 그래프를 그리고자 하는 경우, facet_grid(Origin ~ Type)으로 설정해 줍니다. # 두 기준/그룹별 박스 그래프 그리기 : facet_grid() 함수의 이용 ggplot(Cars93, aes(x = Type, # Type 변수를 X로 지정합니다. y = Price, fill = Origin)) + # Orgin 변수를 fill(색 채우기)의 값으로 지정합니다. geom_boxplot(width=0.8, outlier.size=3, outlier.shape=16, outlier.colour=&quot;red&quot;) + ggtitle(&quot;차종과 생산지 별 박스 그래프 : facet_grid()&quot;) + facet_grid(Origin ~ Type) # Type을 첫째 기준, Origin을 둘째 기준으로 지정합니다. Figure 11.52: 차종별 생산지별 박스 그래프 : facet_grid() 11.3.12.3 facet_wrap() 함수의 이용 # 두 기준/그룹별 박스 그래프 그리기 : facet_wrap() 함수의 이용 ggplot(Cars93, aes(x = Type, # Type 변수를 X로 지정합니다. y = Price, colour = Origin)) + # Orgin 변수를 colour(테두리 선)의 값으로 지정합니다. geom_boxplot(width=0.8, outlier.size=3, outlier.shape=16, outlier.colour=&quot;red&quot;) + ggtitle(&quot;차종과 생산지 별 박스 그래프 : facet_wrap()&quot;) + facet_wrap(Origin ~ Type, ncol = 6) # Type을 첫째 기준, Origin을 둘째 기준으로 지정합니다. Figure 11.53: 차종별 생산지별 박스 그래프 : facet_wrap() Go Top 11.3.13 Theme의 사용 히스토그램과 커널 밀도 곡선에서 Theme을 사용하였듯이, 박스 그래프에서도 Theme을 사용할 수 있습니다. 앞의 예에서 박스 그래프에 평균을 추가한 그래프에 Theme을 사용해 보겠습니다. 이 예에서도 히스토그램에서 Theme으로 사용한 ggplot2::theme_classic() + 이하 부분을 복사해서 붙여 넣기한 것입니다. # 박스 그래프에 평균 추가하기 + Theme의 사용 ggplot(Cars93, aes(x = Type, y = Price)) + geom_boxplot(width = 0.8, outlier.size = 3, outlier.shape = 16, outlier.colour = &quot;red&quot;) + stat_summary(fun.y = &quot;mean&quot;, # Y축의 평균값을 산출합니다 geom = &quot;point&quot;, # 점으로 표시합니다. shape = 8, # 점의 모양을 8로 지정합니다. size = 3, # 점의 크기를 지정합니다. colour = &quot;blue&quot;) + # 점의 색을 지정합니다. ggtitle(&quot; 박스 그래프에 평균 추가하기&quot;) + ggplot2::theme_classic() + # 그래프 테마 지정 ggplot2::theme(axis.title.x = element_text(size = 10, face = &quot;italic&quot;, color = &quot;gray&quot;, angle = 0, vjust = 0.5), axis.title.y = element_text(size = 10, face = &quot;bold.italic&quot;, color = &quot;gray&quot;, angle = 0, vjust = 0.5)) + # X축과 Y축의 서식 스타일 지정 ggplot2::scale_y_continuous(labels = scales::comma) # Y 값의 천단위에 콤마 표시 ## Warning: `fun.y` is deprecated. Use `fun` instead. Figure 11.54: 박스 그래프 : Theme 적용하기 Go Top Part 2. 그래프 모수의 기호 모양을 참고하기 바랍니다. Part 2. 그래프 모수의 기호 모양을 참고하기 바랍니다. stat_*() 함수에 대한 설명을 참고하기 바랍니다. "],["바이올린-그래프.html", "11.4 바이올린 그래프", " 11.4 바이올린 그래프 이번 절에서는 한 개의 연속형인 변수에 대한 시각화 방법으로 바이올린 그래프(Violin Plot)를 작성해 보겠습니다. 바이올린 그래프는 geom_violin() 함수를 이용하여 그릴 수 있습니다. 제공해 주는 정보량이 많아서 바이올린 그래프(Violin Plot) 또한 유용한 편인데요, 실전에서는 별로 사용하지 않게 되는 그래프이기도 합니다. ^^; 11.4.1 데이터 세트 데이터는 MASS 패키지에 들어있는 Cars93 데이터 프레임 데이터 셋에서 가격(Price)과 자동차 유형(Type) 변수를 활용하여 바이올린 그래프를 그려보겠습니다. library(ggplot2) # Cars93 데이터 프레임 library(MASS) str(Cars93) ## &#39;data.frame&#39;: 93 obs. of 27 variables: ## $ Manufacturer : Factor w/ 32 levels &quot;Acura&quot;,&quot;Audi&quot;,..: 1 1 2 2 3 4 4 4 4 5 ... ## $ Model : Factor w/ 93 levels &quot;100&quot;,&quot;190E&quot;,&quot;240&quot;,..: 49 56 9 1 6 24 54 74 73 35 ... ## $ Type : Factor w/ 6 levels &quot;Compact&quot;,&quot;Large&quot;,..: 4 3 1 3 3 3 2 2 3 2 ... ## $ Min.Price : num 12.9 29.2 25.9 30.8 23.7 14.2 19.9 22.6 26.3 33 ... ## $ Price : num 15.9 33.9 29.1 37.7 30 15.7 20.8 23.7 26.3 34.7 ... ## $ Max.Price : num 18.8 38.7 32.3 44.6 36.2 17.3 21.7 24.9 26.3 36.3 ... ## $ MPG.city : int 25 18 20 19 22 22 19 16 19 16 ... ## $ MPG.highway : int 31 25 26 26 30 31 28 25 27 25 ... ## $ AirBags : Factor w/ 3 levels &quot;Driver &amp; Passenger&quot;,..: 3 1 2 1 2 2 2 2 2 2 ... ## $ DriveTrain : Factor w/ 3 levels &quot;4WD&quot;,&quot;Front&quot;,..: 2 2 2 2 3 2 2 3 2 2 ... ## $ Cylinders : Factor w/ 6 levels &quot;3&quot;,&quot;4&quot;,&quot;5&quot;,&quot;6&quot;,..: 2 4 4 4 2 2 4 4 4 5 ... ## $ EngineSize : num 1.8 3.2 2.8 2.8 3.5 2.2 3.8 5.7 3.8 4.9 ... ## $ Horsepower : int 140 200 172 172 208 110 170 180 170 200 ... ## $ RPM : int 6300 5500 5500 5500 5700 5200 4800 4000 4800 4100 ... ## $ Rev.per.mile : int 2890 2335 2280 2535 2545 2565 1570 1320 1690 1510 ... ## $ Man.trans.avail : Factor w/ 2 levels &quot;No&quot;,&quot;Yes&quot;: 2 2 2 2 2 1 1 1 1 1 ... ## $ Fuel.tank.capacity: num 13.2 18 16.9 21.1 21.1 16.4 18 23 18.8 18 ... ## $ Passengers : int 5 5 5 6 4 6 6 6 5 6 ... ## $ Length : int 177 195 180 193 186 189 200 216 198 206 ... ## $ Wheelbase : int 102 115 102 106 109 105 111 116 108 114 ... ## $ Width : int 68 71 67 70 69 69 74 78 73 73 ... ## $ Turn.circle : int 37 38 37 37 39 41 42 45 41 43 ... ## $ Rear.seat.room : num 26.5 30 28 31 27 28 30.5 30.5 26.5 35 ... ## $ Luggage.room : int 11 15 14 17 13 16 17 21 14 18 ... ## $ Weight : int 2705 3560 3375 3405 3640 2880 3470 4105 3495 3620 ... ## $ Origin : Factor w/ 2 levels &quot;USA&quot;,&quot;non-USA&quot;: 2 2 2 2 2 1 1 1 1 1 ... ## $ Make : Factor w/ 93 levels &quot;Acura Integra&quot;,..: 1 2 4 3 5 6 7 9 8 10 ... 11.4.2 기본 바이올린 그래프 그럼, 먼저 Cars93 데이터 프레임 내 가격(Price) 변수 하나를 가지고 geom_violin()을 사용하여 바이올린 그래프(Violin Plot)을 그려보겠습니다. # 기본 바이올린 그래프 그리기 ggplot(Cars93, aes(x = 1, # 바이올린 그래프는 기본적으로 x = 1로 설정합니다. y = Price)) + # Y축의 변수로 Price를 설정합니다. geom_violin() + # 바이올린 그래프를 그립니다. ggtitle(&quot;기본 바이올린 그래프&quot;) Figure 11.55: 기본 바이올린 그래프 Go Top 11.4.3 바이올린 그래프와 박스 그래프 겹쳐 그리기 그런데 바이올린 그래프에 geom_boxplot() 함수를 추가하여 박스 그래프를 겹쳐 그릴 수 있습니다. # 기본 바이올린 그래프 + 박스 그래프 ggplot(Cars93, aes(x = 1, y = Price)) + geom_violin() + geom_boxplot(width = 0.1) + # 박스 그래프의 너비를 0.1로 해서 겹쳐 그립니다. ggtitle(&quot;기본 바이올린 그래프 + 박스 그래프&quot;) Figure 11.56: 기본 바이올린 그래프 + 박스 그래프 11.4.4 X축의 이름과 척도 없애기 기본 바이올린 그래프를 그려 보면 X 축에 의미가 없는 척도가 표시가 됩니다. scale_x_continuous() 함수의 모수에 breaks = NULL을 설정하여 X축의 이름을 없애고, theme() 함수의 모수에 axis.title.x = element_blank() 를 설정하여 X축의 척도를 생략할 수 있습니다. # X축의 이름과 척도 없애기 ggplot(Cars93, aes(x = 1, y = Price)) + geom_violin() + # geom_boxplot(width = 0.1) + scale_x_continuous(breaks = NULL) + # x축 이름 생략 theme(axis.title.x = element_blank()) + # x축 척도 생략 ggtitle(&quot;X축의 이름과 척도 없애기&quot;) Figure 11.57: X축의 이름과 척도 없애기 Go Top 11.4.5 이상값의 표현 앞에서의 바이올린 그래프의 윗 부분에 가격(Price) 데이터의 이상치(outliers)가 차지하고 있습니다. 그런데 이상치는 바이올린 그래프에서 표시하는 것보다는 박스 그래프에서 표시하는 것이 더 좋습니다. 따라서, geom_boxplot() 함수를 이용하여 이상치를 표시하고, 크기는 outlier.size 모수에, 모양은 outlier.shape 모수에, 그리고 색은 outlier.colour 등의 모수에 지정해 줍니다. 다음의 예는 이상치 데이터에 대하여 모양을 13번 모양9으로 하고, 그 크기는 3(기본 값은 1)으로 그리고 색은 “red”로 표시하는 예입니다. # 바이올린 플롯의 이상치 표시 ggplot(Cars93, aes(x = 1, y = Price)) + geom_violin(outlier.size = 3, # 이상치 데이터 기호의 크기를 3으로 설정합니다. outlier.shape = 13, # 이상치 데이터 기호의 모양을 13으로 설정합니다. outlier.colour = &quot;red&quot;) + # 이상치 데이터 기호의 색을 &quot;red&quot;로 설정합니다. # geom_boxplot(width = 0.1) + scale_x_continuous(breaks = NULL) + theme(axis.title.x = element_blank()) + ggtitle(&quot;바이올린 플롯의 이상치 표시&quot;) ## Warning: Ignoring unknown parameters: outlier.size, outlier.shape, ## outlier.colour Figure 11.58: 바이올린 플롯의 이상치 표시 # 바이올린 플롯의 이상치 표시 ggplot(Cars93, aes(x = 1, y = Price)) + geom_violin() + geom_boxplot(width = 0.1, outlier.size = 3, # 이상치 데이터 기호의 크기를 3으로 설정합니다. outlier.shape = 13, # 이상치 데이터 기호의 모양을 13으로 설정합니다. outlier.colour = &quot;red&quot;) + # 이상치 데이터 기호의 색을 &quot;red&quot;로 설정합니다. scale_x_continuous(breaks = NULL) + theme(axis.title.x = element_blank()) + ggtitle(&quot;바이올린 플롯의 이상치 표시&quot;) Figure 11.59: 바이올린 플롯의 이상치 표시 Go Top 11.4.6 바이올린 그래프에 데이터를 점으로 표시하기 바이올린 그래프에 데이터를 점으로 표시하는 것은 박스 그래프에서와 마찬가지로 geom_jitter() 함수를 이용헙니다. 또한 geom_jitter() 함수 안의 shape 모수를 이용하여 점의 모양10을 그리고 position 모수를 이용하여 점의 위치를 설정할 수 있습니다. # 바이올린 그래프에 데이터를 점으로 표시하기 ggplot(Cars93, aes(x = 1, y = Price)) + geom_violin() + geom_boxplot(width = 0.1, outlier.size = 3, outlier.shape = 13, outlier.colour = &quot;red&quot;) + scale_x_continuous(breaks = NULL) + theme(axis.title.x = element_blank()) + geom_jitter() + # 데이터를 점으로 표시합니다. ggtitle(&quot; 바이올린 그래프에 데이터를 점으로 표시하기&quot;) Figure 11.60: 바이올린 그래프에 데이터를 점으로 표시하기 # 바이올린 그래프에 데이터를 점으로 표시하기 ggplot(Cars93, aes(x = 1, y = Price)) + geom_violin() + geom_boxplot(width = 0.1, outlier.size = 3, outlier.shape = 13, outlier.colour = &quot;red&quot;) + scale_x_continuous(breaks = NULL) + theme(axis.title.x = element_blank()) + scale_x_continuous(breaks = NULL) + theme(axis.title.x = element_blank()) + geom_jitter(shape = 16, # 데이터 기호의 모양을 16으로 설정합니다. position = position_jitter(width = 0.1, height = 0.1)) + # 점의 위치를 설정합니다. ggtitle(&quot; 바이올린 그래프에 데이터를 점으로 표시하기&quot;) ## Scale for &#39;x&#39; is already present. Adding another scale for &#39;x&#39;, which will ## replace the existing scale. Figure 11.61: 바이올린 그래프에 데이터를 점으로 표시하기 Go Top 11.4.7 수평 바이올린 그래프 coord_flip() 함수를 추가하여 바이올린 그래프를 수평으로 회전시킬 수 있습니다. # 수평 바이올린 그래프 ggplot(Cars93, aes(x = 1, y = Price)) + geom_violin() + geom_boxplot(width = 0.1, outlier.size = 3, outlier.shape = 13, outlier.colour = &quot;red&quot;) + scale_x_continuous(breaks = NULL) + theme(axis.title.x = element_blank()) + geom_jitter(shape = 16, position = position_jitter(width = 0.1, height = 0.1)) + ggtitle(&quot;수평 바이올린 그래프&quot;) + coord_flip() # 바이올린 그래프를 수평으로 회전시킵니다. Figure 11.62: 수평 바이올린 그래프 Go Top 11.4.8 바이올린 그래프의 색 지정하기 또한 geom_violin() 함수에 fill 모수를 추가하여 채우기 색을 그리고 colour 모수를 추가하여 바이올린 그래프의 테두리 색을 설정할 수 있습니다. # 바이올린 그래프의 색 지정하기 ggplot(Cars93, aes(x = 1, y = Price)) + geom_violin(fill = &quot;yellow&quot;, # 채우기 색을 지정합니다. color = &quot;blue&quot;) + # 테두리 색을 지정합니다. geom_jitter(shape = 16, position = position_jitter(width = 0.1, height = 0.1)) + scale_x_continuous(breaks = NULL) + theme(axis.title.x = element_blank()) + ggtitle(&quot;바이올린 그래프의 색 지정하기&quot;) Figure 11.63: 바이올린 그래프 : 색 지정 Go Top 11.4.9 바이올린 그래프에 평균 추가하기 위의 차종(Type)별 바이올린 그림의 바이올린 가운데 선은 중앙값(Median)을 나타냅니다. 이번에는 평균을 추가해 보도록 하겠습니다. 평균은 이상치에 민감하므로 아래 예제처럼 이상치가 있는 경우에는 중심화 경향을 나타내는 통계량으로 부적합하며, 바이올린 그림의 바이올린 가운데에 쳐진 선이 의미하는 중앙값(Median) 이 더 적합한 중심화 경향 지표라고 하겠습니다. 평균을 추가하기 위해서는 stat_summary() 함수를 이용합니다. 그리고 fun.y = “mean” 모수를 추가해 줍니다. 다음의 예에서는 동시에 기호의 모양, 크기, 그리고 색도 지정하고 있습니다. # 바이올린 그래프에 평균 추가하기 ggplot(Cars93, aes(x = 1, y = Price)) + geom_violin() + stat_summary(fun.y = &quot;mean&quot;, # Y축의 평균값을 산출합니다 geom = &quot;point&quot;, # 점으로 표시합니다. shape = 8, # 점의 모양을 8로 지정합니다. size = 3, # 점의 크기를 지정합니다. colour = &quot;blue&quot;) + # 점의 색을 지정합니다. ggtitle(&quot;바이올린 그래프에 평균 추가하기&quot;) ## Warning: `fun.y` is deprecated. Use `fun` instead. Figure 11.64: 바이올린 그래프 : 평균 추가하기 Go Top 11.4.10 stat_ydensity() 함수의 이용 geom_*() 함수들은 기본적인 stat_*() 함수를 가지고 있습니다.11 args(geom_violin)로 확인해 보면 geom_violin() 함수는 stat = \"ydensity\"를 알고리즘으로 사용하고 있습니다. geom_violin() 함수의 경우에는 stat_ydensity() 함수가 여기에 해당하며, geom_violin() 함수 대신에 stat_boxplot() 함수를 이용할 수 있습니다. # 기본 박스 그래프 그리기 ggplot(Cars93, aes(x = 1, y = Price)) + stat_ydensity() + # 바이올린 그래프를 그립니다. ggtitle(&quot;기본 바이올린 그래프 : stat_ydensity() 함수 이용&quot;) (#fig:GGPlot2BoxPlotStat_Yden)기본 바이올린 그래프 : stat_ydensity() 함수 이용 자세한 사항은 ? stat_ydensity()로 확인하기 바랍니다. 11.4.11 그룹별 바이올린 그래프 그룹별 바이올린 그래프의 경우도 앞에서의 그룹별 히스토그램과 그룹별 커널 밀도 곡선에서 처럼 aes() 함수의 모수를 이용하거나, facet_grid() 함수와 facet_wrap() 함수를 이용하여 그룹별 바이올린 그래프를 작성할 수 있습니다. 11.4.11.1 aes() 함수의 모수 이용 다음으로, 차종별(Type)로 가격(Price) 변수에 대해 바이올린 그래프를 그려보겠습니다. aes(x = factor.variable) 을 입력해주면 되겠습니다. 여기서 주의할 점은 x 는 요인(factor)형 변수가 입력되어야 합니다. 차종(Type)은 이미 요인형 변수이므로 그대로 입력하면 됩니다. 만약 요인형 변수가 아니라면 x=factor(variable name) 이런 식으로 입력해주거나, 아니면 형 변환 함수인 as.factor() 함수를 이용하여 데이터 형태를 요인형 변수로 변경해도 좋습니다. 한편 이러한 차종별(Type) 그룹별 바이올린 그래프의 테두리 색을 지정하고 싶다면, aes() 함수에 colour = factor.variable을 삽입해 주면 됩니다. 그리고 바이올린의 색을 채우고 싶다면 aes() 함수에 fill = factor variable를 추가해 주면 됩니다. 그런데 colour와 fill 모수는 동시에 사용하기 보다는 둘 중의 하나를 선택하는 것이 좋을 것 같습니다. ## 그룹별 바이올린 그래프 : aes() 모수 이용 # 차종별(Type) 바이올린 그래프 ggplot(Cars93, aes(x = Type, # x 축에 요인형(그룹) 변수를 지정합니다. y = Price)) + # y 축에 일변량 연속형 변수를 지정합니다. geom_violin(width=0.8) + ggtitle(&quot;차종별(Type) 바이올린그래프&quot;) Figure 11.65: 차종별 바이올린 그래프와 색 지정하기 # 차종별(Type) 바이올린 그래프 : 테두리 색 지정 ggplot(Cars93, aes(x = Type, y = Price, colour = Type)) + # colour 에 요인형 변수 지정. geom_violin(width=0.8) + ggtitle(&quot;차종별(Type) 바이올린그래프 : 테두리 색 지정&quot;) Figure 11.66: 차종별 바이올린 그래프와 색 지정하기 # 차종별(Type) 바이올린 그래프 : 색 채우기 ggplot(Cars93, aes(x = Type, y = Price, # colour = Type, # 테두리 색을 지정합니다. fill = Type)) + # 채우기 색을 지정합니다. geom_violin(width=0.8) + ggtitle(&quot;차종별(Type) 바이올린그래프 : 색 채우기&quot;) Figure 11.67: 차종별 바이올린 그래프와 색 지정하기 11.4.11.2 facet_grid() 함수 이용 aes() 함수에 x = Type 모수를 추가하고, facet_grid( . ~ Type)을 추가해 줍니다. (facet_grid(vars(Type)) 또는 facet_type(Type ~ .) 등은 바람직 하지 않습니다.) ## 그룹별 바이올린 그래프 : facet_grid() 함수 이용 # 차종별(Type) 바이올린그래프 ggplot(Cars93, aes(x = 1, y = Price)) + geom_violin(width=0.8) + facet_grid( . ~ Type) + # Type 별로 바이올린 그래프를 그립니다. ggtitle(&quot;차종별(Type) 바이올린그래프 : facet_grid() 함수&quot;) Figure 11.68: 차종별 바이올린 그래프 : facet_grid() # 차종별(Type) 바이올린그래프 : 색 지정하기 (테두리 선) ggplot(Cars93, aes(x = 1, y = Price, colour = Type)) + geom_violin(width=0.8) + facet_grid( . ~ Type) + # Type 별로 바이올린 그래프를 그립니다. ggtitle(&quot;차종별(Type) 바이올린그래프 : facet_grid() 함수&quot;) Figure 11.69: 차종별 바이올린 그래프 : facet_grid() # 차종별(Type) 바이올린그래프 : 색 지정하기 (채우기) ggplot(Cars93, aes(x = 1, y = Price, fill = Type)) + geom_violin(width=0.8) + facet_grid( . ~ Type) + # Type 별로 바이올린 그래프를 그립니다. ggtitle(&quot;차종별(Type) 바이올린그래프 : facet_grid() 함수&quot;) Figure 11.70: 차종별 바이올린 그래프 : facet_grid() 11.4.11.3 facet_wrap() 함수 이용 aes() 함수에 x = Type 모수를 추가하고, facet_wrap(~ Type, ncol = 3)을 추가해 줍니다. ## 그룹별 바이올린 그래프 : facet_wrap() 함수 이용 # 차종별(Type) 바이올린그래프 ggplot(Cars93, aes(x = 1, y = Price)) + geom_violin(width=0.8) + facet_wrap(~ Type, ncol = 3) + # Type 별로 바이올린 그래프를 3열로 그립니다. ggtitle(&quot;차종별(Type) 바이올린그래프 : facet_wrap() 함수&quot;) Figure 11.71: 차종별 바이올린 그래프 : facet_wrap() # 차종별(Type) 바이올린그래프 : 테두리 선 ggplot(Cars93, aes(x = 1, y = Price, colour = Type)) + # 테두리 선의 색을 지정합니다. geom_violin(width = 0.8) + facet_wrap(~ Type, ncol = 3) + # Type 별로 바이올린 그래프를 3열로 그립니다. ggtitle(&quot;차종별(Type) 바이올린그래프 : facet_wrap() 함수&quot;) Figure 11.72: 차종별 바이올린 그래프 : facet_wrap() # 차종별(Type) 바이올린그래프 : 색 채우기 ggplot(Cars93, aes(x = 1, y = Price, fill = Type)) + # 채우기 색을 지정합니다. geom_violin(width=0.8) + facet_wrap(~ Type, ncol = 3) + # Type 별로 바이올린 그래프를 3열로 그립니다. ggtitle(&quot;차종별(Type) 바이올린그래프 : facet_wrap() 함수&quot;) Figure 11.73: 차종별 바이올린 그래프 : facet_wrap() Go Top 11.4.12 두 개의 요인형 변수를 고려한 바이올린 그래프 만약 차종(Type)과 생산지(Origin)의 두 기준/그룹으로 구분해서 바이올린 그래프를 그리고 싶다면 이 경우에도 aes() 함수의 모수를 이용하는 방법, facet_grid() 함수를 이용하는 방법 그리고 facet_wrap()을 이용하는 방법을 생각할 수 있습니다. 11.4.12.1 aes() 함수의 모수 이용 aes(fill = Origin) 또는 aes(color = Origin) 을 추가해 주면 됩니다. # 두 기준/그룹별 바이올린 그래프 그리기 : aes() 함수의 모수 이용 # fill 모수 지정 ggplot(Cars93, aes(x = Type, # Type 변수를 X로 지정합니다. y = Price, fill = Origin)) + # Orgin 변수를 fill의 값으로 지정합니다. geom_violin(width=0.8) + ggtitle(&quot;차종과 생산지 별 바이올린 그래프 : fill&quot;) Figure 11.74: 차종별 생산지별 바이올린 그래프 : aes() # colour 모수 지정 ggplot(Cars93, aes(x = Type, # Type 변수를 X로 지정합니다. y = Price, colour = Origin)) + # Orgin 변수를 colour의 값으로 지정합니다. geom_violin(width=0.8) + ggtitle(&quot;차종과 생산지 별 바이올린 그래프 : colour&quot;) Figure 11.75: 차종별 생산지별 바이올린 그래프 : aes() 11.4.12.2 facet_grid() 함수의 이용 첫 번째 기준으로 차종(Type)을 그리고 두 번째 기준으로 생산지(Origin)로 해서 바이올린 그래프를 그리고자 하는 경우, facet_grid(Origin ~ Type)으로 설정해 줍니다. # 두 기준/그룹별 바이올린 그래프 그리기 : facet_grid() 함수의 이용 ggplot(Cars93, aes(x = Type, # Type 변수를 X로 지정합니다. y = Price, fill = Origin)) + # Orgin 변수를 fill(색 채우기)의 값으로 지정합니다. geom_violin(width=0.8, outlier.size=3, outlier.shape=16, outlier.colour=&quot;red&quot;) + ggtitle(&quot;차종과 생산지 별 바이올린 그래프 : facet_grid()&quot;) + facet_grid(Origin ~ Type) # Type을 첫째 기준, Origin을 둘째 기준으로 지정합니다. ## Warning: Ignoring unknown parameters: outlier.size, outlier.shape, ## outlier.colour Figure 11.76: 차종별 생산지별 바이올린 그래프 : facet_grid() 11.4.12.3 facet_wrap() 함수의 이용 # 두 기준/그룹별 바이올린 그래프 그리기 : facet_wrap() 함수의 이용 ggplot(Cars93, aes(x = Type, # Type 변수를 X로 지정합니다. y = Price, colour = Origin)) + # Orgin 변수를 colour(테두리 선)의 값으로 지정합니다. geom_violin(width=0.8, outlier.size=3, outlier.shape=16, outlier.colour=&quot;red&quot;) + ggtitle(&quot;차종과 생산지 별 바이올린 그래프 : facet_wrap()&quot;) + facet_wrap(Origin ~ Type, ncol = 6) # Type을 첫째 기준, Origin을 둘째 기준으로 지정합니다. ## Warning: Ignoring unknown parameters: outlier.size, outlier.shape, ## outlier.colour Figure 11.77: 차종별 생산지별 바이올린 그래프 : facet_wrap() Go Top 11.4.13 Theme의 사용 히스토그램과 커널 밀도 곡선에서 Theme을 사용하였듯이, 바이올린 그래프에서도 Theme을 사용할 수 있습니다. 앞의 예에서 바이올린 그래프에 평균을 추가한 그래프에 Theme을 사용해 보겠습니다. 이 예에서도 히스토그램에서 Theme으로 사용한 ggplot2::theme_classic() + 이하 부분을 복사해서 붙여 넣기한 것입니다. # 바이올린 그래프에 평균 추가하기 : theme_classic() 적용 ggplot(Cars93, aes(x = 1, y = Price)) + geom_violin() + stat_summary(fun.y = &quot;mean&quot;, # Y축의 평균값을 산출합니다 geom = &quot;point&quot;, # 점으로 표시합니다. shape = 8, # 점의 모양을 8로 지정합니다. size = 3, # 점의 크기를 지정합니다. colour = &quot;blue&quot;) + # 점의 색을 지정합니다. ggtitle(&quot;바이올린 그래프에 Theme 사용&quot;) + ggplot2::theme_classic() + # 그래프 테마 지정 ggplot2::theme(axis.title.x = element_text(size = 10, face = &quot;italic&quot;, color = &quot;gray&quot;, angle = 0, vjust = 0.5), axis.title.y = element_text(size = 10, face = &quot;bold.italic&quot;, color = &quot;gray&quot;, angle = 0, vjust = 0.5)) + # X축과 Y축의 서식 스타일 지정 ggplot2::scale_y_continuous(labels = scales::comma) # Y 값의 천단위에 콤마 표시 ## Warning: `fun.y` is deprecated. Use `fun` instead. Figure 11.78: 바이올린 그래프 : Theme 적용하기 Go Top 참고자료 : ggplot2 violin plot : http://www.sthda.com/english/wiki/ggplot2-violin-plot-quick-start-guide-r-software-and-data-visualization Part 2. 그래프 모수의 [기호모양]을 참고하기 바랍니다. Part 2. 그래프 모수의 [기호모양]을 참고하기 바랍니다. stat_*() 함수에 대한 설명을 참고하기 바랍니다. "],["범주형-데이터요인의-수준-순서-바꾸기.html", "11.5 범주형 데이터(요인)의 수준 순서 바꾸기", " 11.5 범주형 데이터(요인)의 수준 순서 바꾸기 차량의 종류(Type) 변수와 같은 범주형 변수의 그룹(요인)을 x 축으로 그래프를 그리면 디폴트는 알파벳 순서대로 그룹이 제시가 됩니다. 만약 순서형 요인(ordered factor)으로 범주형 변수를 만들었다면 그 순서에 따라서 그래프가 그려질 겁니다. 그런데 분석가가 범주형 변수의 그룹의 순서를 ggplot2가 디폴트로 그려준 것과는 달리 바꾸고 싶어할 수 있습니다. 이때 scale_x_discrete(limits=c(...)) 함수를 사용해서 그룹의 순서를 바꿀 수 있습니다. 아래의 예제에 사용할 데이터는 Cars93 데이터 세트에는 Type 변수와 Origin 변수를 포함해서 총 9개의 요인형 변수가 있습니다.12 이 중에서 Type 변수와 Origin 변수 등 2 개의 변수를 중심으로 살펴보겠습니다. Type 변수의 경우에는 “Compact,” “Large,” “Midsize,” “Small,” “Sporty,” “Van” 등 6개의 수준으로 구성이 되어 있으며, 지금까지 살펴 본 그래프에서 이들 수준이 알파벳 순서로 정렬이 되어 있었습니다. ggplot2 패키지를 사용해서 Type을 x축으로 Price 를 y축으로 해서 박스 그래프를 그려보겠습니다. 이를 위해서 먼저 데이터셋을 ggplot2에서 사용할 수 있는 형태로 변환이 필요합니다. 가로로 옆으로 늘어서 있는 원래의 Cars93 데이터셋을 tidyverse 패키지의 pivot_longer() 함수를 이용하여 세로로 길게 세워보겠습니다. ## Factor 변수의 수준 순서 바꾸기 # 데이터 준비 library(tidyverse) Cars93.sub1 &lt;- Cars93[, c(&quot;Type&quot;, &quot;Price&quot;)] Cars.Data &lt;- Cars93.sub1 %&gt;% pivot_longer(names_to = &quot;Variable&quot;, values_to = &quot;Value&quot;, -1) str(Cars.Data) ## tibble [93 x 3] (S3: tbl_df/tbl/data.frame) ## $ Type : Factor w/ 6 levels &quot;Compact&quot;,&quot;Large&quot;,..: 4 3 1 3 3 3 2 2 3 2 ... ## $ Variable: chr [1:93] &quot;Price&quot; &quot;Price&quot; &quot;Price&quot; &quot;Price&quot; ... ## $ Value : num [1:93] 15.9 33.9 29.1 37.7 30 15.7 20.8 23.7 26.3 34.7 ... 데이터셋 준비가 되었으므로, 디폴트 설정으로 해서 x축에 Type, y축에 Price로 Box plot 을 그려보겠습니다. x축의 요인(factor)의 순서가 앞에서 살펴본 것처럼 “Compact,” “Large,” “Midsize,” “Small,” “Sporty,” “Van” 등과 같이 알파벳 순서로 되어있습니다. # Type 변수의 기본 수준 순서 f1 &lt;- ggplot(Cars.Data, aes(x=Type, y=Value)) + geom_boxplot() + ggtitle((&quot;Boxplot of Price&quot;)) f1 Figure 11.79: 차량 유형별 가격 이제 Type 변수의 수준 순서를 필요에 따라서 “Small,” “Midsize,” “Large,” “Compact,” “Sporty,” “Van” 등의 순서로 바꾸고 싶다고 가정해 보겠습니다. 이때 사용하는 것이 scale_x_discrete(limit=...)함수입니다. # Type 변수의 수준 순서 바꾸기 : scale_x_discrete() 함수 이용 f2 &lt;- f1 + scale_x_discrete(limits=c(&quot;Small&quot;, &quot;Midsize&quot;, &quot;Large&quot;, &quot;Compact&quot;, &quot;Sporty`&quot;, &quot;Van&quot;)) + ggtitle(&quot;X축 수준의 순서 변경 : scale_x_discrete(limit=...) 함수 이용&quot;) f2 ## Warning: Removed 14 rows containing missing values (stat_boxplot). Figure 11.80: X축 수준의 순서 바꾸기 : scale_x_discrete(limit=…) 함수 이용 처음 f1 그래프는 Type 변수의 수준을 알파벳 수준으로 정렬한 디폴트의 박스 그래프이며, 두 번째에 f2 그래프는 Type 변수의 수준을 분석가의 필요에 따라 순서를 바꾼 박스 그래프입니다. Go Top Manufacturer (32), Model (93), Type (6), AirBags (3), DriveTrain (3), Cylinders (6), Man.trans.avail (2), Origin (2), Make (93) 등 총 9개 변수입니다. () 안의 숫자는 수준의 갯수를 나타냅니다. "],["다변량-변수-범주형-데이터.html", "12 다변량 변수 - 범주형 데이터", " 12 다변량 변수 - 범주형 데이터 다변량 범주형 데이터의 시각화 방법으로는 막대 그래프: geom_bar() 모자이크 그림: vcd 패키지의 mosaic() 등을 중심으로 살펴 보겠습니다. "],["ggplot-bar-2CatVars.html", "12.1 막대 그래프", " 12.1 막대 그래프 이번 절에서는 X변수와 Y변수 모두 범주형 변수를 ggplot2 패키지의 geom_bar() 함수로 시각화 하는 방법에 대하여 학습하겠습니다. 12.1.1 데이터 세트 사용할 데이터는 MASS 패키지에 있는 Cars93 데이터 프레임에서 자동차 유형(Type), 자동차 구동 방식(DriveTrain) 등의 범주형/요인(factor)형 변수를 사용하겠습니다. library(ggplot2) library(MASS) str(Cars93) ## &#39;data.frame&#39;: 93 obs. of 27 variables: ## $ Manufacturer : Factor w/ 32 levels &quot;Acura&quot;,&quot;Audi&quot;,..: 1 1 2 2 3 4 4 4 4 5 ... ## $ Model : Factor w/ 93 levels &quot;100&quot;,&quot;190E&quot;,&quot;240&quot;,..: 49 56 9 1 6 24 54 74 73 35 ... ## $ Type : Factor w/ 6 levels &quot;Compact&quot;,&quot;Large&quot;,..: 4 3 1 3 3 3 2 2 3 2 ... ## $ Min.Price : num 12.9 29.2 25.9 30.8 23.7 14.2 19.9 22.6 26.3 33 ... ## $ Price : num 15.9 33.9 29.1 37.7 30 15.7 20.8 23.7 26.3 34.7 ... ## $ Max.Price : num 18.8 38.7 32.3 44.6 36.2 17.3 21.7 24.9 26.3 36.3 ... ## $ MPG.city : int 25 18 20 19 22 22 19 16 19 16 ... ## $ MPG.highway : int 31 25 26 26 30 31 28 25 27 25 ... ## $ AirBags : Factor w/ 3 levels &quot;Driver &amp; Passenger&quot;,..: 3 1 2 1 2 2 2 2 2 2 ... ## $ DriveTrain : Factor w/ 3 levels &quot;4WD&quot;,&quot;Front&quot;,..: 2 2 2 2 3 2 2 3 2 2 ... ## $ Cylinders : Factor w/ 6 levels &quot;3&quot;,&quot;4&quot;,&quot;5&quot;,&quot;6&quot;,..: 2 4 4 4 2 2 4 4 4 5 ... ## $ EngineSize : num 1.8 3.2 2.8 2.8 3.5 2.2 3.8 5.7 3.8 4.9 ... ## $ Horsepower : int 140 200 172 172 208 110 170 180 170 200 ... ## $ RPM : int 6300 5500 5500 5500 5700 5200 4800 4000 4800 4100 ... ## $ Rev.per.mile : int 2890 2335 2280 2535 2545 2565 1570 1320 1690 1510 ... ## $ Man.trans.avail : Factor w/ 2 levels &quot;No&quot;,&quot;Yes&quot;: 2 2 2 2 2 1 1 1 1 1 ... ## $ Fuel.tank.capacity: num 13.2 18 16.9 21.1 21.1 16.4 18 23 18.8 18 ... ## $ Passengers : int 5 5 5 6 4 6 6 6 5 6 ... ## $ Length : int 177 195 180 193 186 189 200 216 198 206 ... ## $ Wheelbase : int 102 115 102 106 109 105 111 116 108 114 ... ## $ Width : int 68 71 67 70 69 69 74 78 73 73 ... ## $ Turn.circle : int 37 38 37 37 39 41 42 45 41 43 ... ## $ Rear.seat.room : num 26.5 30 28 31 27 28 30.5 30.5 26.5 35 ... ## $ Luggage.room : int 11 15 14 17 13 16 17 21 14 18 ... ## $ Weight : int 2705 3560 3375 3405 3640 2880 3470 4105 3495 3620 ... ## $ Origin : Factor w/ 2 levels &quot;USA&quot;,&quot;non-USA&quot;: 2 2 2 2 2 1 1 1 1 1 ... ## $ Make : Factor w/ 93 levels &quot;Acura Integra&quot;,..: 1 2 4 3 5 6 7 9 8 10 ... Go Top 12.1.2 일변량 범주형 변수의 시각화 먼저 자동차 유형(Type)을 막대 그래프로 시각화해 보겠습니다. ggplot(Cars93, aes(x = Type)) + geom_bar() + ggtitle(&quot;일변량 범주형 변수의 시각화&quot;) Figure 12.1: 일변량 범주형 변수의 시각화 Go Top 12.1.3 범주형 변수의 수준 확인 자동차 구동 방식(DriveTrain)의 클래스 타입은 앞의 데이터 세트에서 확인한 바와 같이 ’요인형(factor)’임을 알 수 있습니다. 그러면 이 변수의 수준(levels)을 확인해 보겠습니다. levels(Cars93$DriveTrain) ## [1] &quot;4WD&quot; &quot;Front&quot; &quot;Rear&quot; 즉, 자동차 구동 방식(DriveTrain) 변수는 “4WD,” “Front,” “Rear” 등을 수준으로 하는 변수임을 알 수 있습니다. “4WD”는 사륜구동을, “Front”는 전륜구동, 그리고 “Rear”는 후륜구동을 나타내고 있습니다. Go Top 12.1.4 막대 그래프 범주형 변수인 자동차 유형(Type)을 X축으로 하는 막대 그래프에 두 번째 범주형 변수인 자동차 구동 방식(DriveTrain)을 표현하기 위해서는 aes() 함수 내에 fill = 이나 color = 모수를 이용합니다. 12.1.4.1 누적 막대 그래프 다음과 같이 aes() 함수 내에 fill = DriveTrain를 입력하면 다음과 같이 누적 막대 그래프(stacked bar char)가 생성됩니다. ggplot(Cars93, aes(x = Type, fill = DriveTrain)) + geom_bar() + ggtitle(&quot;누적 막대 그래프&quot;) Figure 12.2: 누적 막대 그래프 이제 대부분의 자동차들이 ’전륜구동 방식(Front)’이 다수를 차지하고 있으며, 반면에 Van의 경우에는 ’4륜구동 방식(4WD)’이 다수를 차지하고 있음을 알 수 있습니다. 이때 y축에는 count 즉 빈도수로 표시됨을 알 수 있습니다. 12.1.4.2 그룹 막대 그래프 한편, 각 자동차 유형별로 자동차 구동 방식이 누적 형태로 표시하는 대신에 자동차 유형별(그룹)(Type)로 자동차 구동 방식(DriveTrain)을 또 다른 막대 그래프로 비교할 수도 있습니다. 이를 위해서는 geom_bar() 함수 내에 position = \"dodge\" 모수를 입력해 줍니다. ggplot(Cars93, aes(x = Type, fill = DriveTrain)) + geom_bar(position = &quot;dodge&quot;) + ggtitle(&quot;그룹 막대 그래프&quot;) Figure 12.3: 그룹 막대 그래프 그런데 이 그래프에서 보면 자동차 유형별(Type)로 자동차 구동 방식(DriveTrain)을 궅이 한 그래프에 다 표시하지 않고 분할하여 그래프로 나타낼 수 도 있습니다. 이는 아래의 그룹별 막대 그래프에서 확인하기 바랍니다. 한편 그림 12.3에 geom_text() 함수를 이용하여 데이터 레이블을 표시해 보겠습니다. ggplot(Cars93, aes(x = Type, fill = DriveTrain)) + geom_bar(position = &quot;dodge&quot;) + ggtitle(&quot;그룹 막대 그래프&quot;) + geom_text(stat = &quot;count&quot;, aes(label = ..count..), position = position_dodge(width = 0.9), vjust = 1.5, size = 2.5) Figure 12.4: 그룹 막대 그래프 Go Top 12.1.5 상대 비율 막대 그래프 앞의 누적 막대 그래프의 경우는 Y축에 빈도를 나타내는 count로 표시가 되고 있습니다. 그런데 이를 100%에 대한 상대 비율로 시각화할 수도 있습니다 이를 위해서는 geom_bar() 함수에 position = \"fill\" 모수를 추가해 주면 됩니다. ggplot(Cars93, aes(x = Type, fill = DriveTrain)) + geom_bar(position = &quot;fill&quot;) + ggtitle(&quot;상대 비율 막대 그래프&quot;) Figure 12.5: 상대 비율 막대 그래프 Go Top 12.1.6 그룹별 막대 그래프 앞에서 이미 aes() 함수를 이용하여 그룹별로 막대 그래프를 작성하였으므로, 여기에서는 facet_grid() 함수와 facet_wrap() 함수의 사용에 대하여 학습하겠습니다. 12.1.6.1 facet_grid() 함수의 이용 앞에서 작성한 그룹 막대 그래프에 다음과 같이 facet_grid() 함수를 추가해 주면 자동차 구동 방식별로 막대 그래프를 분할하여 표시할 수 있습니다. ggplot(Cars93, aes(x = Type, fill = DriveTrain)) + geom_bar(position = &quot;dodge&quot;) + facet_grid(DriveTrain ~ .) + # facet_grid(. ~ DriveTrain) ggtitle(&quot;그룹별 막대 그래프 : facet_grid() 함수 이용&quot;) Figure 12.6: 그룹별 막대 그래프 : facet_grid() 함수 이용 이제 각 자동차 유형별(Type)로 자동차 구동 방식(DriveTrain)을 더 쉽게 비교할 수 있습니다. 12.1.6.2 facet_wrap() 함수의 이용 facet_wrap() 함수를 이용해도 비슷한 효과를 볼 수 있습니다. ggplot(Cars93, aes(x = Type, fill = DriveTrain)) + geom_bar(position = &quot;dodge&quot;) + facet_wrap( ~ DriveTrain, ncol = 1) + ggtitle(&quot;그룹별 막대 그래프 : facet_wrap() 함수 이용&quot;) Figure 12.7: 그룹별 막대 그래프 : facet_wrap() 함수 이용 ncol = 1 모수를 입력함으로써 facet_grid() 함수와 비슷한 결과를 보여 주고 있습니다. Go Top 12.1.7 Theme의 사용 여기에서도 앞에서 사용한 바와 같은 테마를 사용할 수 있습니다. ggplot(Cars93, aes(x = Type, fill = DriveTrain)) + geom_bar() + ggtitle(&quot;이변량 범주형 막대 그래프 : Theme의 사용&quot;) + ggplot2::theme_classic() + # 그래프 테마 지정 ggplot2::theme(axis.title.x = element_text(size = 10, face = &quot;italic&quot;, color = &quot;gray&quot;, angle = 0, vjust = 0.5), axis.title.y = element_text(size = 10, face = &quot;bold.italic&quot;, color = &quot;gray&quot;, angle = 0, vjust = 0.5)) + # X축과 Y축의 서식 스타일 지정 ggplot2::scale_y_continuous(labels = scales::comma) # Y 값의 천단위에 콤마 표시 Figure 12.8: 이변량 범주형 막대 그래프 : Theme의 사용 Go Top "],["모자이크-그림.html", "12.2 모자이크 그림", " 12.2 모자이크 그림 모자이크 그림(Mosaic Chart)은 Marimekko chart, Eikosogram 이라고도 하는데요, 특히 2개 이상의 다변량 변수를 한꺼번에 그림으로 나타내어 탐색적 분석을 할 때 아주 유용합니다. 12.2.1 데이터 세트와 패키지 모자이크 그림은 vcd 패키지의 mosaic() 함수를 이용하겠으며, 데이터는 MASS 패키지의 cars93데이터 프레임 내에 있는 차종(Type), 제조국(Origin), DriveTrain(Rear, Front, 4WD) 등의 3개 변수를 모자이크 그림으로 표현해 보겠습니다. # vcd 패키지 설치 및 불러오기 # install.packages(&quot;vcd&quot;) library(vcd) # 데이터 세트 library(MASS) str(Cars93) ## &#39;data.frame&#39;: 93 obs. of 27 variables: ## $ Manufacturer : Factor w/ 32 levels &quot;Acura&quot;,&quot;Audi&quot;,..: 1 1 2 2 3 4 4 4 4 5 ... ## $ Model : Factor w/ 93 levels &quot;100&quot;,&quot;190E&quot;,&quot;240&quot;,..: 49 56 9 1 6 24 54 74 73 35 ... ## $ Type : Factor w/ 6 levels &quot;Compact&quot;,&quot;Large&quot;,..: 4 3 1 3 3 3 2 2 3 2 ... ## $ Min.Price : num 12.9 29.2 25.9 30.8 23.7 14.2 19.9 22.6 26.3 33 ... ## $ Price : num 15.9 33.9 29.1 37.7 30 15.7 20.8 23.7 26.3 34.7 ... ## $ Max.Price : num 18.8 38.7 32.3 44.6 36.2 17.3 21.7 24.9 26.3 36.3 ... ## $ MPG.city : int 25 18 20 19 22 22 19 16 19 16 ... ## $ MPG.highway : int 31 25 26 26 30 31 28 25 27 25 ... ## $ AirBags : Factor w/ 3 levels &quot;Driver &amp; Passenger&quot;,..: 3 1 2 1 2 2 2 2 2 2 ... ## $ DriveTrain : Factor w/ 3 levels &quot;4WD&quot;,&quot;Front&quot;,..: 2 2 2 2 3 2 2 3 2 2 ... ## $ Cylinders : Factor w/ 6 levels &quot;3&quot;,&quot;4&quot;,&quot;5&quot;,&quot;6&quot;,..: 2 4 4 4 2 2 4 4 4 5 ... ## $ EngineSize : num 1.8 3.2 2.8 2.8 3.5 2.2 3.8 5.7 3.8 4.9 ... ## $ Horsepower : int 140 200 172 172 208 110 170 180 170 200 ... ## $ RPM : int 6300 5500 5500 5500 5700 5200 4800 4000 4800 4100 ... ## $ Rev.per.mile : int 2890 2335 2280 2535 2545 2565 1570 1320 1690 1510 ... ## $ Man.trans.avail : Factor w/ 2 levels &quot;No&quot;,&quot;Yes&quot;: 2 2 2 2 2 1 1 1 1 1 ... ## $ Fuel.tank.capacity: num 13.2 18 16.9 21.1 21.1 16.4 18 23 18.8 18 ... ## $ Passengers : int 5 5 5 6 4 6 6 6 5 6 ... ## $ Length : int 177 195 180 193 186 189 200 216 198 206 ... ## $ Wheelbase : int 102 115 102 106 109 105 111 116 108 114 ... ## $ Width : int 68 71 67 70 69 69 74 78 73 73 ... ## $ Turn.circle : int 37 38 37 37 39 41 42 45 41 43 ... ## $ Rear.seat.room : num 26.5 30 28 31 27 28 30.5 30.5 26.5 35 ... ## $ Luggage.room : int 11 15 14 17 13 16 17 21 14 18 ... ## $ Weight : int 2705 3560 3375 3405 3640 2880 3470 4105 3495 3620 ... ## $ Origin : Factor w/ 2 levels &quot;USA&quot;,&quot;non-USA&quot;: 2 2 2 2 2 1 1 1 1 1 ... ## $ Make : Factor w/ 93 levels &quot;Acura Integra&quot;,..: 1 2 4 3 5 6 7 9 8 10 ... Go Top 12.2.2 모자이크 그림 그리기 12.2.2.1 세로 방향의 모자이크 그림 vcd 패키지 설치, 호출 후에 차종(Type)과 제조국(Origin) 2개의 변수를 가지고, 세로 방향(direction=\"v\") 으로 모자이크 그림을 그려보겠습니다. table() 함수를 써서 분할표를 먼저 만들고, 이걸 가져다가 모자이크 그림을 그리게 됩니다. # 모자이크 그림 : 차종(Type) &amp; 제조국(Origin) - 세로 방향 # Type과 Origin의 분할표를 구합니다. table_1 &lt;- with(Cars93, table(Type, Origin)) table_1 ## Origin ## Type USA non-USA ## Compact 7 9 ## Large 11 0 ## Midsize 10 12 ## Small 7 14 ## Sporty 8 6 ## Van 5 4 # 모자이크 그림을 그립니다. mosaic(table_1, gp=gpar(fill = c(&quot;yellow&quot;, &quot;blue&quot;)), direction = &quot;v&quot;, # 세로 main = &quot;차종별 제조국별 모자이크 그림 : vcd 패키지의 mosaic() 함수 사용&quot;) Figure 12.9: 차종별 제조국별 모자이크 그림 : vcd 패키지의 mosaic() 함수 사용 12.2.2.2 가로 방향의 모자이크 그림 차종(Type)과 제조국(Origin) 2개의 변수를 가지고, 모자이크 그림을 가로 방향 (direction=\"h\") 으로 그리면 아래와 같습니다. Origin이 y축에 있던 것이 x축으로 바뀌었습니다. # 모자이크 그림을 그립니다 : 가로 방향 mosaic(table_1, gp=gpar(fill = c(&quot;yellow&quot;, &quot;blue&quot;)), direction = &quot;h&quot;, # 가로 main = &quot;차종별 제조국별 모자이크 그림 : 가로 방향&quot;) Figure 12.10: 차종별 제조국별 모자이크 그림 : 가로 방향 12.2.2.3 세 변수의 모자이크 그림 이번에는 변수를 하나 더 추가해서 차종(Type), 제조국(Origin), DriveTrain 의 3개의 변수를 가지고 모자이크 그림을 그려보겠습니다. 먼저 table()함수를 써서 3개 변수에 대한 분할표를 만들고, 이를 가져다가 모자이크 그림을 그리게 됩니다. # 모자이크 그림 : 차종(Type) &amp; 제조국(Origin) &amp; DriveTrain(Rear, Front, 4WD) # 세로 방향 # 3개 변수별 범주 확인 levels(Cars93$Type) ## [1] &quot;Compact&quot; &quot;Large&quot; &quot;Midsize&quot; &quot;Small&quot; &quot;Sporty&quot; &quot;Van&quot; levels(Cars93$Origin) ## [1] &quot;USA&quot; &quot;non-USA&quot; levels(Cars93$DriveTrain) ## [1] &quot;4WD&quot; &quot;Front&quot; &quot;Rear&quot; # 3개 변수의 분할표를 구합니다. table_2 &lt;- with(Cars93, table(Type, Origin, DriveTrain)) table_2 ## , , DriveTrain = 4WD ## ## Origin ## Type USA non-USA ## Compact 0 1 ## Large 0 0 ## Midsize 0 0 ## Small 0 2 ## Sporty 2 0 ## Van 3 2 ## ## , , DriveTrain = Front ## ## Origin ## Type USA non-USA ## Compact 7 6 ## Large 7 0 ## Midsize 9 8 ## Small 7 12 ## Sporty 2 5 ## Van 2 2 ## ## , , DriveTrain = Rear ## ## Origin ## Type USA non-USA ## Compact 0 2 ## Large 4 0 ## Midsize 1 4 ## Small 0 0 ## Sporty 4 1 ## Van 0 0 # 3개 벼누의 모자이크 그림을 그립니다. mosaic(table_2, gp=gpar(fill=c(&quot;yellow&quot;, &quot;blue&quot;, &quot;red&quot;)), direction=&quot;v&quot;, main=&quot;차종, 제조국 그리고 DriveTrain의 모자이크 그림 : 세로 방향&quot;) Figure 12.11: 차종, 제조국 그리고 DriveTrain의 모자이크 그림 : 세로 방향 Go Top 12.2.3 모자이크 그림에 라벨 추가하기 마지막으로, 모자이크 그림에 비율 라벨(Mosaic Chart with Percentage Label)을 추가해 보겠습니다. # 비율 라벨 추가 (Mosaic Chart with Percentage Labels) table_1 &lt;- with(Cars93, table(Type, Origin)) proportions &lt;- round(prop.table(table_1) * 100, 1) # 백분율, 소수점 첫째자리 반올림 proportions ## Origin ## Type USA non-USA ## Compact 7.5 9.7 ## Large 11.8 0.0 ## Midsize 10.8 12.9 ## Small 7.5 15.1 ## Sporty 8.6 6.5 ## Van 5.4 4.3 values &lt;- c(table_1) rowvarcat &lt;- c(&quot;USA&quot;,&quot;non_USA&quot;) columnvarcat &lt;- c(&quot;Compact&quot;,&quot;Large&quot;, &quot;Midsize&quot;, &quot;Small&quot;, &quot;Sporty&quot;, &quot;Van&quot;) names=c(&quot;Origin&quot;, &quot;Type&quot;) dims &lt;- c(2,6) TABS &lt;- structure( c(values), .Dim = as.integer(dims), .Dimnames = structure( list(rowvarcat, columnvarcat ), .Names = c(names) ) , class = &quot;table&quot;) PROPORTIONS &lt;- structure( c(proportions), .Dim = as.integer(dims), .Dimnames = structure( list(rowvarcat,columnvarcat ), .Names = c(names) ) , class = &quot;table&quot;) TABSPROPORTIONS &lt;- structure( c(paste(proportions,&quot;%&quot;,&quot;\\n&quot;, &quot;(&quot;,values,&quot;)&quot;,sep=&quot;&quot;)), .Dim = as.integer(dims), .Dimnames = structure( list(rowvarcat,columnvarcat ), .Names = c(names) ) , class = &quot;table&quot;) mosaic(TABS, pop = FALSE, main = &quot;Mosaic Chart by Car Type and Origin, with Percentage Labels&quot;) labeling_cells(text=TABSPROPORTIONS, clip_cells=FALSE)(TABS) Michael Friendly’s book “Visualizing Categorical Data” 예제 참고 Go Top "],["다변량-변수-연속형-데이터.html", "13 다변량 변수 - 연속형 데이터", " 13 다변량 변수 - 연속형 데이터 이번 장에서는 두 개 이상의 연속형 변수를 시각화하는 방법으로 산포도(Scatter Plot): geom_point() 버블 그래프(Bubble Chart) 선 그래프(Line Plot)와 시계열 그래프(Time Series Plot): geom_line() 이차원 밀도 그래프 클리브랜드 점 그래프 누적 영역 그래프 상관계수 행렬 그래프 pairs() 함수를 사용한 산포도 행렬 히트맵 등에 대해서 알아보겠습니다. "],["산포도-1.html", "13.1 산포도", " 13.1 산포도 산포도(Scatter Plot)는 x축과 y축에 연속형인 두 변수의 값을 점으로 뿌려준 그래프로서, 연속형인 두 변수 간의 관계를 파악하는데 유용합니다. 다중 회귀분석을 할 때 제일 처음 하는 일이 바로 산포도 (행렬)을 그려보고 두 변수간의 선형성(linearity) 여부를 탐색해보는 일입니다. 13.1.1 데이터 세트 MASS패키지 내 Cars93 데이터 프레임의 고속도로연비(MPG.highway)와 엔진크기(EngineSize), 무게(Weight), 길이(Length) 와의 관계를 ggplot2 패키지의 geom_point() 함수를 이용하여 산포도로 알아보겠습니다. 그리고 차종(Type)별로 고속도로연비(MPG.highway) 는 어떻게 되는지도 산포도를 가지고 점의 색깔과 모양을 달리해서 살펴보는 방법을 알아보겠습니다. library(MASS) str(Cars93) ## &#39;data.frame&#39;: 93 obs. of 27 variables: ## $ Manufacturer : Factor w/ 32 levels &quot;Acura&quot;,&quot;Audi&quot;,..: 1 1 2 2 3 4 4 4 4 5 ... ## $ Model : Factor w/ 93 levels &quot;100&quot;,&quot;190E&quot;,&quot;240&quot;,..: 49 56 9 1 6 24 54 74 73 35 ... ## $ Type : Factor w/ 6 levels &quot;Compact&quot;,&quot;Large&quot;,..: 4 3 1 3 3 3 2 2 3 2 ... ## $ Min.Price : num 12.9 29.2 25.9 30.8 23.7 14.2 19.9 22.6 26.3 33 ... ## $ Price : num 15.9 33.9 29.1 37.7 30 15.7 20.8 23.7 26.3 34.7 ... ## $ Max.Price : num 18.8 38.7 32.3 44.6 36.2 17.3 21.7 24.9 26.3 36.3 ... ## $ MPG.city : int 25 18 20 19 22 22 19 16 19 16 ... ## $ MPG.highway : int 31 25 26 26 30 31 28 25 27 25 ... ## $ AirBags : Factor w/ 3 levels &quot;Driver &amp; Passenger&quot;,..: 3 1 2 1 2 2 2 2 2 2 ... ## $ DriveTrain : Factor w/ 3 levels &quot;4WD&quot;,&quot;Front&quot;,..: 2 2 2 2 3 2 2 3 2 2 ... ## $ Cylinders : Factor w/ 6 levels &quot;3&quot;,&quot;4&quot;,&quot;5&quot;,&quot;6&quot;,..: 2 4 4 4 2 2 4 4 4 5 ... ## $ EngineSize : num 1.8 3.2 2.8 2.8 3.5 2.2 3.8 5.7 3.8 4.9 ... ## $ Horsepower : int 140 200 172 172 208 110 170 180 170 200 ... ## $ RPM : int 6300 5500 5500 5500 5700 5200 4800 4000 4800 4100 ... ## $ Rev.per.mile : int 2890 2335 2280 2535 2545 2565 1570 1320 1690 1510 ... ## $ Man.trans.avail : Factor w/ 2 levels &quot;No&quot;,&quot;Yes&quot;: 2 2 2 2 2 1 1 1 1 1 ... ## $ Fuel.tank.capacity: num 13.2 18 16.9 21.1 21.1 16.4 18 23 18.8 18 ... ## $ Passengers : int 5 5 5 6 4 6 6 6 5 6 ... ## $ Length : int 177 195 180 193 186 189 200 216 198 206 ... ## $ Wheelbase : int 102 115 102 106 109 105 111 116 108 114 ... ## $ Width : int 68 71 67 70 69 69 74 78 73 73 ... ## $ Turn.circle : int 37 38 37 37 39 41 42 45 41 43 ... ## $ Rear.seat.room : num 26.5 30 28 31 27 28 30.5 30.5 26.5 35 ... ## $ Luggage.room : int 11 15 14 17 13 16 17 21 14 18 ... ## $ Weight : int 2705 3560 3375 3405 3640 2880 3470 4105 3495 3620 ... ## $ Origin : Factor w/ 2 levels &quot;USA&quot;,&quot;non-USA&quot;: 2 2 2 2 2 1 1 1 1 1 ... ## $ Make : Factor w/ 93 levels &quot;Acura Integra&quot;,..: 1 2 4 3 5 6 7 9 8 10 ... 13.1.2 변수들 간의 상관계수 먼저 변수들 간의 상관계수를 가지고 고속도로연비(MPG.highway)와 엔진크기(EngineSize), 무게(Weight), 길이(Length)와의 상관도를 살펴보겠습니다. # 변수들 간의 상관계수 : cor() 함수 Cars93_MPG &lt;- Cars93[, c(&quot;MPG.highway&quot;, &quot;EngineSize&quot;, &quot;Weight&quot;, &quot;Length&quot;)] cor(Cars93_MPG) # 4개의 변수들 간의 상관계수를 구합니다. ## MPG.highway EngineSize Weight Length ## MPG.highway 1.00 -0.63 -0.81 -0.54 ## EngineSize -0.63 1.00 0.85 0.78 ## Weight -0.81 0.85 1.00 0.81 ## Length -0.54 0.78 0.81 1.00 고속도로연비(MPG.highway)는 엔진크기(EngineSize), 무게(Weight), 길이(Length) 등과 모두 역의 상관관계가 있는 것을 알 수 있습니다. 특히 무게(Weight)가 가장 큰 역의 상관관계가 있음을 보여 주었습니다. Go Top 13.1.3 산포도 행렬 13.1.3.1 산포도 행렬 이제 산포도 행렬을 그려서 고속도로연비(MPG.highway)와 엔진크기(EngineSize), 무게(Weight), 길이(Length) 관계를 살펴보겠습니다. 제일 쉬운 방법은 Base graphics 패키지에 있는 plot()함수를 사용하는 방법입니다. 위에서 분석하려는 4 개의 변수만 따로 선별해 놓은 Cars93_MPG 데이터 프레임을 가지고 산포도 행렬을 그려보겠습니다. # 산포도 행렬 : plot() 함수 이용 plot(Cars93_MPG, main=&quot;산포도 행렬&quot;) Figure 13.1: plot() 함수를 이용한 산포도 행렬 13.1.4 기본 산포도 ggplot2로는 산포도 행렬(Scatter Plot matrix)를 그리는 것이 힘듭니다. 대신 여러 조건을 주어서 두 변수 간 산포도를 다양하게 그려보는 데는 아주 강력합니다. 고속도로 연비(MPG.highway)와 엔진크기(EngineSize)의 관계를 geom_point() 함수를 이용하여 산포도로 시각화해 보겠습니다. # 산포도 : MPG.highway 대 EngineSize, Weight, Length ggplot(data = Cars93, aes(x = EngineSize, y = MPG.highway)) + geom_point() + ggtitle(&quot;기본 산포도&quot;) Figure 13.2: 기본 산포도 13.1.4.1 점의 모양(Shape)과 색(Colour)의 지정 우선 ggplot2의 geom_point() 함수의 색깔(colour)과 모양(shape)의 모수 값을 달리하면서 산포도를 작성해 보겠습니다. # 산포도 : MPG.highway 대 EngineSize, Weight, Length g1 &lt;- ggplot(data = Cars93, aes(x = EngineSize, y = MPG.highway)) + geom_point(shape = 12, size = 3, colour = &quot;green&quot;) + # shape 15: solid square ggtitle(&quot;산포도 : shape = 12, colour = \\&quot;green\\&quot;&quot;) g2 &lt;- ggplot(data = Cars93, aes(x = EngineSize, y = MPG.highway)) + geom_point(shape = 15, size = 3, colour = &quot;blue&quot;) + # shape 15: solid square ggtitle(&quot;산포도: shape = 15, colour = \\&quot;blue\\&quot;&quot;) g3 &lt;- ggplot(data = Cars93, aes(x = Weight, y = MPG.highway)) + geom_point(shape = 19, size = 3, colour = &quot;red&quot;) + # shape 19: solid circle ggtitle(&quot;산포도: shape = 19, colour = \\&quot;red\\&quot;&quot;) g4 &lt;- ggplot(data = Cars93, aes(x = Length, y = MPG.highway)) + geom_point(shape = 24, size = 3, colour = &quot;black&quot;) + # shape 24: filled triangle point-up ggtitle(&quot;산포도: shape = 24, colour = \\&quot;black\\&quot;&quot;) multiplot(g1, g2, g3, g4, cols = 2) Figure 13.3: 다양한 산포도 참고로, ggplot2 패키지의 Vignette에는 Aesthetic specifications를 통해 다양한 형식들을 요약해서 보여주고 있습니다. # R 플롯 기호 : 점 모양 ?? aes # Vignettes: ggplot2::ggplot2- Aesthetic specification 선택. Go Top 13.1.4.2 산포도에 레이블 달기 이번에는 두 변수의 산포도의 각 점이 나타내는 자동차 모델명(Model)을 geom_text(label =) 함수를 이용하여 표시해 보겠습니다. # 산포도에 레이블 달기 (모델명) ggplot(data = Cars93, aes(x = Weight, y = MPG.highway)) + geom_point(shape = 19, # 점의 모양 size = 1.5, # 점의 크기 colour=&quot;red&quot;) + # 점의 색깔 ggtitle(&quot;산포도의 점에 레이블 달기&quot;) + geom_text(aes(label = Model, # 레이블 변수 지정 vjust = -1, # vjust = -는 위, +는 아래 hjust = 0.5)) # hjust = +는 왼쪽, -는 오른쪽 Figure 13.4: 산포도의 점에 레이블 달기 Go Top 13.1.5 그룹별 산포도 그리기 다음으로 범주형 변수인 차종(Type)별로 무게(Weight)와 고속도로연비(MPG.highway) 간의 관계를 3가지 방법에 의해 산포도로 그려보도록 하겠습니다. aes() 함수의 모수를 이용하여 차종(Type)별로 색깔(colour)을 달리해서 : colour = Type 차종(Type)별로 모양(shape)을 달리해서 : shape = Type facet_grid() 함수를 이용하여 facet_wrap() 함수를 이용하여 산포도를 그려보겠습니다. 13.1.5.1 aes() 함수의 모수 이용 차종(Type)별로 색깔(colour)을 달리하여 산포도를 그리려면 aes() 함수의 모수에 colour = Type 을 추가해 주면 됩니다. # 차종별 산포도 : aes()의 colour 모수 이용 ggplot(data = Cars93, aes(x = Weight, y = MPG.highway, colour = Type)) + # aes() 함수에 colour 모수를 설정합니다. geom_point(shape=19, # 점의 모양을 19로 지정합니다. size=3) + ggtitle(&quot;차종별 산포도 : aes() 함수 이용 - 색 구분&quot;) Figure 13.5: 차종별 산포도 : aes() 함수 이용 - 색 구분 지금까지 설명한 aes() 의 모수애는 fill, colour 이외에도 shape 이 있습니다. 다음의 예는 aes() 함수의 shape 모수를 이용하여 차종(Type)별로 모양(shape)을 달리 표현하는 예입니다. # 차종별 산포도 : aes()의 shape 모수 이용 ggplot(data = Cars93, aes(x = Weight, y = MPG.highway, # colour = Type, # aes() 에 colour 모수도 추가해 보세요. shape = Type)) + # aes() 함수에 shape 모수를 설정합니다. geom_point(size = 3) + # shape 모수를 제거해 줍니다. ggtitle(&quot;차종별 산포도 : aes() 함수 이용 - 점의 모양 구분&quot;) Figure 13.6: 차종별 산포도 : aes() 함수 이용 - 점의 모양 구분 # 차종별 산포도 : aes()의 shape 모수와 colour 모수 ggplot(data = Cars93, aes(x = Weight, y = MPG.highway, colour = Type, # aes() 에 colour 모수도 추가해 보세요. shape = Type)) + # aes() 함수에 shape 모수를 설정합니다. geom_point(size = 3) + # shape 모수를 제거해 줍니다. ggtitle(&quot;차종별 산포도 : aes() 함수 이용 - 점의 모양과 색 구분&quot;) Figure 13.7: 차종별 산포도 : aes() 함수 이용 - 점의 모양 구분 처음의 색 구분 예에서는 geom_point() 함수에 shape 모수를 지정해 주었기 때문에 Type에 상관없이 모든 점이 19 형태의 점으로 표시가 됩니다. 그리고 범례에 Type 별로 colour를 구분해 주고 있습니다. 반면에 두 번째의 점의 모양 구분 예에서는 ggplot() 함수 내의 aes() 함수의 모수로 shape을 지정해 주어 Type 의 값에 따라 점의 모양이 구별되고 있음을 주목하기 바랍니다. 그리고 범례에서는 Type 별로 shape을 구분해 주고 있습니다. 이때, aes() 함수 내에 colour 모수를 동시에 설정해 주면 색도 지정이 됨을 알 수 있습니다. Go Top 13.1.5.2 facet_grid() 함수의 이용 이번에는 facet_grid() 함수를 이용하여 차종(Type)별로 산포도를 그려 보겠습니다. # 차종별 산포도 : facet_grid() 함수 이용 ggplot(data = Cars93, aes(x = Weight, y = MPG.highway, colour = Type, # aes() 에 colour 모수도 추가해 보았습니다. shape = Type)) + geom_point(size = 3) + facet_grid(Type ~.) + # facet_grid() : Type을 Y축에 표시합니다. ggtitle(&quot;차종별 산포도 : facet_grid() 함수 이용&quot;) Figure 13.8: 차종별 산포도 : facet_grid() 함수 이용 ggplot(data = Cars93, aes(x = Weight, y = MPG.highway, colour = Type, # aes() 에 colour 모수도 추가해 보았습니다. shape = Type)) + geom_point(size = 3) + facet_grid(. ~ Type) + # facet_grid() : Type을 X축에 표시합니다. ggtitle(&quot;차종별 산포도 : facet_grid() 함수 이용&quot;) Figure 13.9: 차종별 산포도 : facet_grid() 함수 이용 facet_grid() 함수에 대한 자세한 내용은 ? facet_grid()를 참고하기 바랍니다. Go Top 13.1.5.3 facet_wrap() 함수의 이용 이번에는 facet_wrap() 함수를 이용하여 차종(Type)별로 산포도를 그려 보겠습니다. # 차종별 산포도 : facet_wrap() 함수 이용 ggplot(data = Cars93, aes(x = Weight, y = MPG.highway, colour = Type, shape = Type)) + geom_point(size = 3) + facet_wrap(~Type, ncol = 2) + # facet_wrap() : Type을 Y축에 표시합니다. ggtitle(&quot;차종별 산포도 : facet_wrap() 함수 이용&quot;) Figure 13.10: 차종별 산포도 : facet_wrap() 함수 이용 facet_wrap() 함수에 대한 자세한 내용은 ? facet_wrap()를 참고하기 바랍니다. Go Top 13.1.6 Theme의 사용 히스토그램에서 Theme을 사용하였듯이, 산포도에서도 Theme을 사용할 수 있습니다. 다음의 예는 앞서 작성한 차종별 산포도에 히스토그램에서 Theme으로 사용한 ggplot2::theme_classic() + 이하 부분을 복사해서 붙여넣기한 것입니다. # 기본 산포도에 theme_classic() 적용 ggplot(data = Cars93, aes(x = EngineSize, y = MPG.highway, colour = Type, shape = Type)) + geom_point(size = 3) + ggtitle(&quot;산포도: MPG.highway vs. EngineSize - Theme 적용&quot;) + ggplot2::theme_classic() + # 그래프 테마 지정 ggplot2::theme(axis.title.x = element_text(size = 10, face = &quot;italic&quot;, color = &quot;gray&quot;, angle = 0, vjust = 0.5), axis.title.y = element_text(size = 10, face = &quot;bold.italic&quot;, color = &quot;gray&quot;, angle = 0, vjust = 0.5)) + ggplot2::scale_y_continuous(labels = scales::comma) Figure 13.11: 산포도에 Theme 적용 Go Top 13.1.7 회귀선의 표시 데이터를 산포도로 시각화하는데 있어서 중요한 것이 선형 회귀선 (신뢰구간 95%)으로 적합화(fitting)하는 것입니다. 이러한 데이터 간의 관계 즉, 엔진의 크기(EngineSize)와 고속도로 연비(MPG.highway) 사이의 관계성을 산포도로 표시하는 것도 좋지만, 또한 이 두 변수간의 관계를 선형 회귀선으로 시각화하는 것도 매우 중요합니다.13 13.1.7.1 선형 회귀선 적합화 stat_smooth() 함수를 이용하여 이러한 변수간의 선형 회귀선과 신뢰구 간을 시각화할 수 있습니다. # 산포도 : 선형 회귀선과 신뢰구간의 표시 ggplot(data = Cars93, aes(x = EngineSize, y = MPG.highway)) + geom_point(size = 3, shape = 19, colour = &quot;blue&quot;) + # 선형회귀선과 신뢰구간의 시각화 stat_smooth(method = lm, # 선형 모델(linear model) 적용합니다. level = 0.95, # 유의수준을 0.05로 설정합니다.(신뢰도 0.95) colour = &quot;red&quot;) + # 선형 회귀선의 색을 설정합니다, ggtitle(&quot;산포도: 선형 회귀선과 신뢰구간의 표시&quot;) ## `geom_smooth()` using formula &#39;y ~ x&#39; Figure 13.12: 산포도 : 선형 회귀선과 신뢰구간의 표시 산포도에 회귀선을 적합시켰는데, 아래와 같이 신뢰구간은 제외할 수도 있습니다. # 산포도 : 선형 회귀선만 표시 ggplot(data = Cars93, aes(x = EngineSize, y = MPG.highway)) + geom_point(size = 3, shape = 19, colour = &quot;blue&quot;) + # 선형회귀선과 신뢰구간의 시각화 stat_smooth(method = lm, level = 0.95, colour = &quot;red&quot;, se = FALSE) + # 신뢰구간을 제외합니다. ggtitle(&quot;산포도: 산포도 : 선형 회귀선에서 신뢰구간의 제외&quot;) ## `geom_smooth()` using formula &#39;y ~ x&#39; Figure 13.13: 산포도 : 선형 회귀선에서 신뢰구간의 제외 13.1.7.2 비모수 회귀선 적합화 산포도에 선을 적합시킬 때 선형 회귀선 말고도 loess(locally weighted polynomial) 를 이용하여 비모수 회귀(Nonparametric regression) 선을 적합시킬 수도 있습니다. stat_smooth() 함수의 method 모수 값을 loess로 설정해 주면 됩니다. # 산포도 : 비선형 회귀선(loess) ggplot(data = Cars93, aes(x = EngineSize, y = MPG.highway)) + geom_point(size = 3, shape = 19, colour = &quot;blue&quot;) + # 선형회귀선과 신뢰구간의 시각화 stat_smooth(method = loess, # 비모수 회귀선 모델인 loess를 적용합니다. level = 0.95, # 유의수준을 0.05로 설정합니다.(신뢰도 0.95) colour = &quot;red&quot;) + # 선형 회귀선의 색을 설정합니다, ggtitle(&quot;산포도 : 비선형 회귀선과 신뢰구간의 표시&quot;) ## `geom_smooth()` using formula &#39;y ~ x&#39; Figure 13.14: 산포도 : 비선형 회귀선과 신뢰구간의 표시 Go Top https://misdb.github.io/R/R-Tutorial/r-simple-multiple-linear-regression_kr.html 를 참고하기 바랍니다 "],["버블-그래프.html", "13.2 버블 그래프", " 13.2 버블 그래프 이전 절에서 x축과 y축의 값에 따라산포도 그리는 방법을 알아보았습니다. 이번 절에서는 z라는 제 3의 변수(보통 요인형 변수)에 비례해서 점의 크기를 변화시켜 시각화한 버블 그래프 (Bubble Chart) 에 대하여 학습하겠습니다. 산포도가 2차원의 그래프(단, 색깔이나 모양 조건을 추가하면 3차원 정보 제공 가능)라면, 버블 그래프 (Bubble Chart)는 3차원의 그래프가 되어 지면에 보다 많은 정보량을 제공할 수 있는 장점이 있습니다. ggplot2에서는 산포도를 작성하는 geom_point() 함수와 함께 scale_size_area() 함수를 같이 사용하면 버블 그래프 (Bubble Chart)를 그릴 수가 있습니다. 따라서, 버블 그래프도 산포도의 일종인 것입니다. 13.2.1 데이터 세트 MASS 패키지의 Cars93 데이터 프레임 내에 차 모델명(Model), 차종(Type), 무게(Weight), 고속도로연비(MPG.highway), 가격(Price)의 5개 변수를 사용하여 버블 그래프를 그려보겠습니다. 데이터가 너무 많으면 버블 그래프를 그릴 때 겹쳐 보여서 보기 싫으므로 차종(Type)에서 “compact”와 “large”의 두 종만 선별해서 예를 들어보겠습니다. # 버블 그래프 : 데이터 세트 library(ggplot2) library(MASS) str(Cars93) ## &#39;data.frame&#39;: 93 obs. of 27 variables: ## $ Manufacturer : Factor w/ 32 levels &quot;Acura&quot;,&quot;Audi&quot;,..: 1 1 2 2 3 4 4 4 4 5 ... ## $ Model : Factor w/ 93 levels &quot;100&quot;,&quot;190E&quot;,&quot;240&quot;,..: 49 56 9 1 6 24 54 74 73 35 ... ## $ Type : Factor w/ 6 levels &quot;Compact&quot;,&quot;Large&quot;,..: 4 3 1 3 3 3 2 2 3 2 ... ## $ Min.Price : num 12.9 29.2 25.9 30.8 23.7 14.2 19.9 22.6 26.3 33 ... ## $ Price : num 15.9 33.9 29.1 37.7 30 15.7 20.8 23.7 26.3 34.7 ... ## $ Max.Price : num 18.8 38.7 32.3 44.6 36.2 17.3 21.7 24.9 26.3 36.3 ... ## $ MPG.city : int 25 18 20 19 22 22 19 16 19 16 ... ## $ MPG.highway : int 31 25 26 26 30 31 28 25 27 25 ... ## $ AirBags : Factor w/ 3 levels &quot;Driver &amp; Passenger&quot;,..: 3 1 2 1 2 2 2 2 2 2 ... ## $ DriveTrain : Factor w/ 3 levels &quot;4WD&quot;,&quot;Front&quot;,..: 2 2 2 2 3 2 2 3 2 2 ... ## $ Cylinders : Factor w/ 6 levels &quot;3&quot;,&quot;4&quot;,&quot;5&quot;,&quot;6&quot;,..: 2 4 4 4 2 2 4 4 4 5 ... ## $ EngineSize : num 1.8 3.2 2.8 2.8 3.5 2.2 3.8 5.7 3.8 4.9 ... ## $ Horsepower : int 140 200 172 172 208 110 170 180 170 200 ... ## $ RPM : int 6300 5500 5500 5500 5700 5200 4800 4000 4800 4100 ... ## $ Rev.per.mile : int 2890 2335 2280 2535 2545 2565 1570 1320 1690 1510 ... ## $ Man.trans.avail : Factor w/ 2 levels &quot;No&quot;,&quot;Yes&quot;: 2 2 2 2 2 1 1 1 1 1 ... ## $ Fuel.tank.capacity: num 13.2 18 16.9 21.1 21.1 16.4 18 23 18.8 18 ... ## $ Passengers : int 5 5 5 6 4 6 6 6 5 6 ... ## $ Length : int 177 195 180 193 186 189 200 216 198 206 ... ## $ Wheelbase : int 102 115 102 106 109 105 111 116 108 114 ... ## $ Width : int 68 71 67 70 69 69 74 78 73 73 ... ## $ Turn.circle : int 37 38 37 37 39 41 42 45 41 43 ... ## $ Rear.seat.room : num 26.5 30 28 31 27 28 30.5 30.5 26.5 35 ... ## $ Luggage.room : int 11 15 14 17 13 16 17 21 14 18 ... ## $ Weight : int 2705 3560 3375 3405 3640 2880 3470 4105 3495 3620 ... ## $ Origin : Factor w/ 2 levels &quot;USA&quot;,&quot;non-USA&quot;: 2 2 2 2 2 1 1 1 1 1 ... ## $ Make : Factor w/ 93 levels &quot;Acura Integra&quot;,..: 1 2 4 3 5 6 7 9 8 10 ... levels(Cars93$Type) ## [1] &quot;Compact&quot; &quot;Large&quot; &quot;Midsize&quot; &quot;Small&quot; &quot;Sporty&quot; &quot;Van&quot; table(Cars93$Type) ## ## Compact Large Midsize Small Sporty Van ## 16 11 22 21 14 9 # 5개의 변수 선택과 # Type 변수 중 Compact와 Large만 선택 Cars93_sample &lt;- subset(Cars93, select = c(&quot;Model&quot;, &quot;Type&quot;, &quot;Weight&quot;, &quot;MPG.highway&quot;, &quot;Price&quot;), subset = (Type %in% c(&quot;Compact&quot;, &quot;Large&quot;))) Cars93_sample ## Model Type Weight MPG.highway Price ## 3 90 Compact 3375 26 29 ## 7 LeSabre Large 3470 28 21 ## 8 Roadmaster Large 4105 25 24 ## 10 DeVille Large 3620 25 35 ## 12 Cavalier Compact 2490 36 13 ## 13 Corsica Compact 2785 34 11 ## 18 Caprice Large 3910 26 19 ## 20 Concorde Large 3515 28 18 ## 21 LeBaron Compact 3085 28 16 ## 22 Imperial Large 3570 26 30 ## 25 Spirit Compact 2970 27 13 ## 30 Vision Large 3490 28 19 ## 33 Tempo Compact 2690 27 11 ## 38 Crown_Victoria Large 3950 26 21 ## 43 Accord Compact 3040 31 18 ## 52 Town_Car Large 4055 26 36 ## 55 626 Compact 2970 34 16 ## 58 190E Compact 2920 29 32 ## 65 Altima Compact 3050 30 16 ## 68 Achieva Compact 2910 31 14 ## 71 Eighty-Eight Large 3470 28 21 ## 74 Sunbird Compact 2575 31 11 ## 77 Bonneville Large 3495 28 24 ## 78 900 Compact 2775 26 29 ## 82 Legacy Compact 3085 30 20 ## 90 Passat Compact 2985 30 20 ## 92 240 Compact 2985 28 23 Go Top 13.2.2 기본 버블 그래프 ggplot2의 geom_point()와 scale_size_area() 함수를 사용하여 버블 그래프 (bubble chart)를 그려보겠습니다. 이때 geom_point() 함수에도 aes() 함수를 추가하고 있으며, size 모수에 Price 변수를 설정하고 있음에 주목하기 바랍니다. 버블 그래프의 구성 요소별로 정리를 해 보면 다음과 같습니다. ggplot() : x축에 무게(Weight)를, y축에는 고속도로연비(MPG.highway) 이터를 표시하고, geom_point() : 점의 크기(size)는 Price 변수 값에 따라 정하고(aes(size = Price), 점의 모양(shpae)을 원(21번)으로 표시하고,14 점의 테두리 색(colour)은 “blue”, 점의 채우기 색(fill)은 “green”, 그리고 채우기 색의 투명도(alpha)는 50%로 설정하겠습니다. scale_size_area() : 점의 최대 크기(max_size)를 15로 설정하겠습니다.15 이제 이러한 사항을 반영하여 버블 그래프를 그리면 다음과 같습니다. # 기본 버블 그래프 ggplot(Cars93_sample, # 데이터 세트를 지정합니다. aes(x = Weight, # x축을 Weight 변수로 지정합니다. y = MPG.highway)) + # y축을 MPG.highway 변수로 지정합니다. geom_point(aes(size = Price), # 점의 크기를 Price 변수로 지정합닏. shape=21, # 점의 모양 ; 21 colour=&quot;blue&quot;, # 점의 테두리 색 fill=&quot;green&quot;, # 점의 채우기 색 alpha=0.5) + # 점의 투명도 : 50% scale_size_area(max_size = 15) + # 최대 점의 크기 : 15 ggtitle(&quot;기본 버블 그래프&quot;) Figure 13.15: 기본 버블 그래프 Go Top 참고로 R 에서의 선의 모양은 그림 13.16 과 같으며, 점의 모양은 그림 13.17 과 같습니다. Figure 13.16: R에서의 선의 모양 Figure 13.17: R에서의 점의 모양 13.2.3 텍스트 레이블 추가 이 버블 그래프에서 geom_text() 함수를 활용해서 각 점이 나타내는 자동차 모델 명(Model)이 무엇인지를 레이블로 표시해 보겠습니다. geom_text() 함수의 사용을 위해 고려해야 할 사항 중 중요한 부분만 설정하겠습니다. 먼저 aes() 함수의 모수를 설정합니다. 레이블이 출력될 Y축의 위치를 지정합니다. 여기서는 Y축이 MPG.highway 변수이므로 aes() 함수에 y = MPG.highway 모수를 추가해 줍니다.16 먼저 레이블로 표시할 변수 Model을 지정합니다. 즉, aes() 함수의 모수로label = Model을 추가합니다. 기타 모수들을 설정합니다. 우선 기준이 되는 축을 설정합니다. vjust = 1 모수를 설정하여 x축을 기준 축으로 정하겠습니다. 레이블의 색을 지정합니다. colour = “blue”으로 해서 검정색으로 설정하겠습니다. 레이블 글자의 크기를 지정합니다. size = 3으로 설정하겠습니다. 이러한 고려 사항들을 반영하여 버블 그래프에 텍스트 레이브을 추가해 보겠습니다. # 버블 그래프에 모델명을 레이블로 추가하기 ggplot(Cars93_sample, aes(x = Weight, y = MPG.highway)) + geom_point(aes(size = Price), shape=21, colour=&quot;blue&quot;, fill=&quot;green&quot;, alpha=0.5) + scale_size_area(max_size = 15, guide = FALSE) + # 범례를 없앨 수도 있습니다. # 모델명을 레이블로 추가하기 geom_text(aes(y = MPG.highway + 0.2, # 레이블이 출력될 Y축의 위치 label = Model), # 출력될 레이블 변수 vjust = 1, # 기준 축 : 1은 X축 colour = &quot;blue&quot;, # 레이블의 색 size = 3) + # 레이블 글자 크기 ggtitle(&quot;버블 그래프 : 모델 레이블 추가&quot;) Figure 13.18: 버블 그래프 : 모델 레이블 추가 Go Top 자세한 사항은 ?shape으로 확인할 수 있습니다. 범례는 guide = FALSE 모수를 추가해서 제거할 수 있습니다. 그림 13.15을 참고하기 바랍니다. 레이블을 그래프에 표시해 보고 위치를 조정해 줍니다. 이 예에서는 y = MPG.highway + 0.2로 조정했습니다. "],["선-그래프와-시계열-그래프.html", "13.3 선 그래프와 시계열 그래프", " 13.3 선 그래프와 시계열 그래프 선 그래프(Line Graph)는 x축의 연속형 변수(또는 (순서나 크기가 있는 이산형 변수, ordered factor)의 변화에 따른 y축의 연속형 변수의 변화를 선으로 이어서 보여주는 그래프입니다. 이 떄 x축이 시간의 순서이면 시계열 그래프(Time Series Graph)가 됩니다. 13.3.1 데이터 세트 Base패키지에 들어있는 airquality 데이터 프레임(17을 가지고 시계열 그래프를 그려보도록 하겠습니다. airquality 데이터 프레임은 1973년 5월부터 9월달까지 뉴욕의 공기의 Ozone, Solar, Wind, Temp를 매일(Daily) 측정한 데이터 세트입니다. 결측값이 없는 Wind와 Temp를 가지고 시계열 그래프를 그려보겠습니다. library(ggplot2) # airquality 데이터 세트의 구조를 확인합니다. str(airquality) ## &#39;data.frame&#39;: 153 obs. of 6 variables: ## $ Ozone : int 41 36 12 18 NA 28 23 19 8 NA ... ## $ Solar.R: int 190 118 149 313 NA NA 299 99 19 194 ... ## $ Wind : num 7.4 8 12.6 11.5 14.3 14.9 8.6 13.8 20.1 8.6 ... ## $ Temp : int 67 72 74 62 56 66 65 59 61 69 ... ## $ Month : int 5 5 5 5 5 5 5 5 5 5 ... ## $ Day : int 1 2 3 4 5 6 7 8 9 10 ... # 결측값 여부 확인 : 결측값의 갯수 확인 sum(is.na(airquality$Ozone)) ## [1] 37 sum(is.na(airquality$Solar.R)) ## [1] 7 sum(is.na(airquality$Wind)) ## [1] 0 13.3.2 기본 선 그래프 그리기 기본 선 그래프는 geom_line() 함수를 이용하여 그릴 수 있습니다. 그런데 ggplot() 함수의 aes() 부분에서 변수를 지정할 때, X변수와 Y 변수의 데이터 타입에 유념해야 합니다. Y 변수는 반드시 숫자형이어야 합니다. 그러나 X 변수는 숫자형, 문자형, 날짜형 등의 형태가 될 수 있습니다. X 변수가 날짜형인 경우의 선 그래프가 바로 시계열 그래프가 되는 것입니다. 각각의 경우에 대해서 살펴 보겠습니다. 13.3.2.1 X 변수가 숫자형인 경우 Y 변수를 온도(Temp)로 하고, X 변수는 airquality 데이터 세트에 있는 숫자형 컬럼 중의 하나인 Wind로 해서 선 그래프를 그려보겠습니다. ## X가 숫자형인 경우의 선 그래프 ggplot(airquality, # 데이터 세트를 지정합니다. aes(x = Wind, # x 축의 변수를 지정합니다. (Wind : 숫자형) y = Temp)) + # y 축의 변수를 지정합니다. (Temp : 숫자형) geom_line() Figure 13.19: 기본 선 그래프 : 숫자형 X 변수 ggtitle(&quot;기본 선 그래프 : 숫자형 X 변수&quot;) ## $title ## [1] &quot;기본 선 그래프 : 숫자형 X 변수&quot; ## ## attr(,&quot;class&quot;) ## [1] &quot;labels&quot; 13.3.2.2 X 변수가 문자형인 경우 airquality 데이터 세트는 모든 컬럼이 숫자형으로만 되어 있는 데이터 프레임입니다. 특히, Month 컬럼과 Day 컬럼 까지도 정수형(int)으로 되어 있습니다. 이 Month 컬럼과 Day 컬럼을 결합하여 TIme 이라는 문자형 컬럼을 생성하고, 이 Time 컬럼을 X 변수로 지정해서 선 그래프를 그려 보겠습니다. 먼저 Month 변수와 Day 변수를 합쳐서 Time이라는 새로운 문자형 변수를 만들어 보겠습니다. # 문자형 Time 변수 생성 # Month, Day 컬럼을 문자형(Character)으로 변형하여 새로운 컬럼 생성 airquality &lt;- transform(airquality, Month.ch_temp = as.character(Month), Day.ch_temp = as.character(Day)) # Month.ch_temp와 Day.ch_temp의 한 자리를 두 자리로 변경 # 예) 1 -&gt; 01, 2 -&gt; 02, 3 -&gt; 03,... airquality &lt;- transform(airquality, Month.ch = paste(&quot;0&quot;, Month.ch_temp, sep=&quot;&quot;), Day.ch = ifelse(Day.ch_temp == &quot;1&quot;, &quot;01&quot;, ifelse(Day.ch_temp == &quot;2&quot;, &quot;02&quot;, ifelse(Day.ch_temp == &quot;3&quot;, &quot;03&quot;, ifelse(Day.ch_temp == &quot;4&quot;, &quot;04&quot;, ifelse(Day.ch_temp == &quot;5&quot;, &quot;05&quot;, ifelse(Day.ch_temp == &quot;6&quot;, &quot;06&quot;, ifelse(Day.ch_temp == &quot;7&quot;, &quot;07&quot;, ifelse(Day.ch_temp == &quot;8&quot;, &quot;08&quot;, ifelse(Day.ch_temp == &quot;9&quot;, &quot;09&quot;, Day)))))))))) # Month.ch_temp와 Day.ch_temp를 paste() 함수로 결합하여 문자형 Time 변수 생성 airquality &lt;- transform(airquality, Time = paste(Month.ch, Day.ch, sep=&quot;&quot;)) # airquality의 구조 보기 str(airquality) ## &#39;data.frame&#39;: 153 obs. of 11 variables: ## $ Ozone : int 41 36 12 18 NA 28 23 19 8 NA ... ## $ Solar.R : int 190 118 149 313 NA NA 299 99 19 194 ... ## $ Wind : num 7.4 8 12.6 11.5 14.3 14.9 8.6 13.8 20.1 8.6 ... ## $ Temp : int 67 72 74 62 56 66 65 59 61 69 ... ## $ Month : int 5 5 5 5 5 5 5 5 5 5 ... ## $ Day : int 1 2 3 4 5 6 7 8 9 10 ... ## $ Month.ch_temp: chr &quot;5&quot; &quot;5&quot; &quot;5&quot; &quot;5&quot; ... ## $ Day.ch_temp : chr &quot;1&quot; &quot;2&quot; &quot;3&quot; &quot;4&quot; ... ## $ Month.ch : chr &quot;05&quot; &quot;05&quot; &quot;05&quot; &quot;05&quot; ... ## $ Day.ch : chr &quot;01&quot; &quot;02&quot; &quot;03&quot; &quot;04&quot; ... ## $ Time : chr &quot;0501&quot; &quot;0502&quot; &quot;0503&quot; &quot;0504&quot; ... Go Top 이제 ggplot() 함수의 x 축에 날짜(Time) 변수를 그리고 y 축에 온도(Temp) 변수를 지정한 다음, geom_line() 함수를 이용하여 선 그래프를 그려 보겠습니다. # 선 그래프 그리기 : 문자형 X 변수 ggplot(airquality, # 데이터 세트를 지정합니다. aes(x = Time, # x 축의 변수를 지정합니다. (Time : 문자형) y = Temp)) + # y 축의 변수를 지정합니다. (Temp : 숫자형) geom_line() + # 선 그래프를 그립니다. ggtitle(&quot;선 그래프 : 문자형 X 변수&quot;) ## geom_path: Each group consists of only one observation. Do you need to adjust ## the group aesthetic? Figure 13.20: 기본 선 그래프 : 문자형 X 변수 위의 스크립트를 실행하면 앞에서의 경우와 달리 경고 메시지가 발생하면서 선 그래프가 표시가 되지 않습니다. 이것은 X 변수가 문자형 변수이기 때문입니다. 이 문제를 해결하기 위해 ggplot() 함수의 aes() 함수의 모수로 group = 1 을 삽입해 줍니다. # 기본 선 그래프 : 문자형 X 변수 (group = 1) 추가 ggplot(airquality, aes(x = Time, y = Temp, group = 1)) + geom_line() + ggtitle(&quot;기본 선 그래프 : 문자형 X 변수 (group = 1 추가)&quot;) Figure 13.21: 기본 선 그래프 : 문자형 X 변수 (group = 1 추가) 선 그래프의 X축으로 날짜(Time)의 데이터인 0501 ~ 0930이 표시되고, Y축에는 온도(Time)가 표시되는 선 그래프가 그려집니다. 그런데 X 축의 값들이 서로 겹쳐져서 잘 볼 수가 없네요…. (엄밀히 말하면 이 그래프는 시계열 그래프라 할 수 없습니다.) 13.3.2.3 X 변수가 날짜형인 경우 airquality_May 데이터 세트의 날짜(Time) 컬럼을 날짜형(Date 형)으로 변형시켜서 선 그래프를 그려 보겠습니다. 이제 이 선 그래프는 X축이 날짜형 변수이기 떄문에 시계열 그래프가 작성되는 것입니다. ## 시계열 그래프 그리기 : 날짜형 X 변수 # airquality의 Time 컬럼을 날짜형으로 변형합니다. airquality$Time &lt;- as.Date(airquality$Time, format = &quot;%m%d&quot;) # 시계열 그래프 그리기 ggplot(airquality, aes(x = Time, # X축의 Time 변수는 &#39;날짜형&#39;입니다. y = Temp)) + geom_line() + ggtitle(&quot;시계열 그래프 : 날짜형 X 변수&quot;) Figure 13.22: 시계열 그래프 : 날짜형 X 변수 이제 이 그래프가 바로 시계열 그래프입니다. X 의 날짜가 적당한 날짜 간격으로 표시가 되어 보기도 좋습니다. Go Top 13.3.3 시계열 그래프의 옵션 설정하기 13.3.3.1 Y축 값의 범위 조절하기 시계열 그래프를 보면 y축을 ggplot2가 자동으로 계산해서 적정 범위를 설정해주었습니다만, 경우에 따라서는 사용자가 강제로 특정 범위를 설정해주고 싶을 때가 있습니다. 아래는 ylim()을 이용해서 50 ~ max(y) 값 까지 y축 범위를 설정한 예시입니다. # 시계열 그래프 : Y축 값의 범위 제한 # y축 범위 설정 50 ~ max ggplot(airquality, aes(x = Time, y = Temp)) + geom_line() + ylim(50, max(airquality$Temp)) + # Y 축의 값의 범위를 제한합니다. ggtitle(&quot;시계열 그래프 : Y축 값의 범위 제한&quot;) Figure 13.23: 시계열 그래프 : Y축 값의 범위 제한 Go Top 13.3.3.2 선 모양 바꾸고, 점 추가하기 시계열 그래프의 선 모양을 바꾸고 점을 추가할 수도 있습니다. 선의 모양은 geom_line() 함수의 모수인 linetype에 색의 번호(정수)나 이름을 지정할 수 있습니다.18 점은 geom_point() 함수를 이용하여 추가할 수 있으며, 기본 버블 그래프에서도 살펴 본 바와 같이 점의 모양은 shape 모수를 이용하여 변경할 수 있습니다 (0 ~ 25 사이의 정수). # 시계열 그래프 : 선 모양 바꾸기, 점 추가하기 ggplot(airquality, aes(x = Time, y = Temp)) + geom_line(linetype = &quot;dotted&quot;, # 선 모양 : 점선, 크기 = 1, 색 = 파란색 size = 1, colour = &quot;blue&quot;) + geom_point(size = 1.5, # 점 : 19번 모양, 크기 = 1.5, 테두리 색 = 빨강 shape = 19, colour = &quot;red&quot;) + ylim(50, max(airquality$Temp)) + ggtitle(&quot;시계열 그래프 : 선 모양 바꾸기, 점 추가하기&quot;) Figure 13.24: 시계열 그래프 : 선 모양 바꾸기, 점 추가하기 참고로 R 에서의 선의 모양은 그림 13.16 과 같으며, 점의 모양은 그림 13.17 과 같습니다. 13.3.4 그룹별 시계열 그래프 그리기 월별 시계열 그래프를 작성해 보겠습니다. 월별 시계열 그래프를 그리기 위해서는 정수형의 Month 컬럼을 요인형으로 변경해야 합니다. 이는 as.factor() 함수로 쉽게 변형할 수 있습니다. # Month 컬럼을 요인형으로 변형하기 airquality$Month &lt;- as.factor(airquality$Month) 이제 월별 시계열 그래프를 ggplot() 함수 내의 aes() 함수에 모수를 지정하여 그리는 방법, facet_grid() 함수를 이용하는 방법 그리고 facet_wrap() 함수를 이용하는 방법으로 작성할 수 있습니다. 13.3.4.1 aes() 함수의 모수 이용 이 절에서는 ggplot() 함수 내의 aes() 함수의 모수인 group과 colour 를 사용하여 그룹별로 시계열 그래프 그려 보겠습니다. aes() 함수 내에 group = Month, colour = Month를 추가해 주면 됩니다. # 월별 시계열 그래프 : aes() 함수 이용 ggplot(airquality, aes(x = Time, y = Temp, group = Month, # 그룹 변수로 Month를 지정합니다. colour = Month)) + # 그룹별 선의 색을 지정합니다. geom_line(linetype = &quot;dotted&quot;, # colour 모수를 제거해 줍니다. size = 1) + geom_point(size = 1.5, shape = 19) + # colour 모수를 제거해 줍니다. ylim(50, max(airquality$Temp)) + ggtitle(&quot;월별 시계열 그래프 : aes() 함수 이용&quot;) Figure 13.25: 월별 시계열 그래프 : aes() 함수 이용 13.3.4.2 facet_grid() 함수 이용 # 월별 시계열 그래프 : facet_grid() 함수 이용 ggplot(airquality, aes(x = Time, y = Temp, group = Month, colour = Month)) + geom_line(linetype = &quot;dotted&quot;, size = 1) + geom_point(size = 1.5, shape = 19) + ylim(50, max(airquality$Temp)) + ggtitle(&quot;월별 시계열 그래프 : facet_grid() 함수 이용&quot;) + facet_grid( . ~ Month) # facet_grid() 함수 이용 Figure 13.26: 월별 시계열 그래프 : facet_grid() 함수 이용 # 월별 시계열 그래프 : facet_grid() 함수 이용 ggplot(airquality, aes(x = Time, y = Temp, group = Month, colour = Month)) + geom_line(linetype = &quot;dotted&quot;, size = 1) + geom_point(size = 1.5, shape = 19) + ylim(50, max(airquality$Temp)) + ggtitle(&quot;월별 시계열 그래프 : facet_grid() 함수 이용&quot;) + facet_grid(Month ~ .) # facet_grid() 함수 이용 Figure 13.27: 월별 시계열 그래프 : facet_grid() 함수 이용 13.3.4.3 facet_wrap() 함수 이용 # 월별 시계열 그래프 : facet_wrap() 함수 이용 ggplot(airquality, aes(x = Time, y = Temp, group = Month, colour = Month)) + geom_line(linetype = &quot;dotted&quot;, size = 1) + geom_point(size = 1.5, shape = 19) + ylim(50, max(airquality$Temp)) + ggtitle(&quot;월별 시계열 그래프 : facet_wrap() 함수 이용&quot;) + facet_wrap( ~ Month) # facet_wrap() 함수 이용 Figure 13.28: 월별 시계열 그래프 : facet_wrap() 함수 이용 Go Top 13.3.5 Theme의 사용 히스토그램에서 Theme을 사용하였듯이, 시계열 그래프에서도 Theme을 사용할 수 있습니다. 다음의 예는 앞서 작성한 월별 시계열 그래프에 히스토그램에서 Theme으로 사용한 ggplot2::theme_classic() + 이하 부분을 복사해서 붙여 넣기한 것입니다. # 웗별 시계열 그래프 : Theme의 사용 ggplot(airquality, aes(x = Time, y = Temp, group = Month, colour = Month)) + geom_line(linetype = &quot;dotted&quot;, size = 1) + geom_point(size = 1.5, shape = 19) + ylim(50, max(airquality$Temp)) + ggtitle(&quot;웗별 시계열 그래프 : Theme의 사용&quot;) + ggplot2::theme_classic() + # 그래프 테마 지정 ggplot2::theme(axis.title.x = element_text(size = 10, face = &quot;italic&quot;, color = &quot;gray&quot;, angle = 0, vjust = 0.5), axis.title.y = element_text(size = 10, face = &quot;bold.italic&quot;, color = &quot;gray&quot;, angle = 0, vjust = 0.5)) + # X축과 Y축의 서식 스타일 지정 ggplot2::scale_y_continuous(labels = scales::comma) # Y 값의 천단위에 콤마 표시 ## Scale for &#39;y&#39; is already present. Adding another scale for &#39;y&#39;, which will ## replace the existing scale. Figure 13.29: 웗별 시계열 그래프 : Theme의 사용 Go Top 자세한 내용은 ? airquality로 확인할 수 있습니다. ? linetype으로 선 모양의 설정 값을 확인할 수 있습니다. (0 = blank, 1 = solid, 2 = dashed, 3 = dotted, 4 = dotdash, 5 = longdash, 6 = twodash) "],["이차원-밀도-그래프.html", "13.4 이차원 밀도 그래프", " 13.4 이차원 밀도 그래프 2개의 연속형 변수를 가지고 그릴 수 있는 그래프 중에 이차원 밀도 그래프 (2D Density Plot) 을 ggplot2의 stat_density2d() 함수를 이용하여 그려보겠습니다. 이차원 밀도 그래프 (2D Density Plot)은 2D 커널 밀도 추정치를 구해서 같은 추정치를 선으로 연결한 그래프 입니다. 우리가 일상 생활 중에 자주 쉽게 접하는 이차원 밀도 그래프의 예로는 지도의 등고선이나 일기예보할 때 쓰는 등압선이 있습니다. [ 기상청 등압선 얘시 ] * 출처: 기상청, http://www.kma.go.kr/weather/images/analysischart.jsp 13.4.1 데이터 세트 이번에 R로 예를 들 데이터는 뉴욕의 기상을 1973년 5월부터 9월까지 매일 측정한 airquality 데이터 프레임에서 5월달과 7월달 두 달의 Wind, Temp를 사용하겠습니다. (airquality는 시계열 데이터이고, 이전 포스팅에서 airquality 데이터 프레임을 사용하여 ggplot2로 시계열 그래프 그래프 그리는 법을 설명하였으니 참고하시기 바랍니다) 먼저, airquality의 데이터 구조를 살펴보고, 5월달과 7월달 데이터만 선별해서 새로운 데이터 프레임을 만들어보겠습니다. library(ggplot2) # airquality 구조 str(airquality) ## &#39;data.frame&#39;: 153 obs. of 11 variables: ## $ Ozone : int 41 36 12 18 NA 28 23 19 8 NA ... ## $ Solar.R : int 190 118 149 313 NA NA 299 99 19 194 ... ## $ Wind : num 7.4 8 12.6 11.5 14.3 14.9 8.6 13.8 20.1 8.6 ... ## $ Temp : int 67 72 74 62 56 66 65 59 61 69 ... ## $ Month : Factor w/ 5 levels &quot;5&quot;,&quot;6&quot;,&quot;7&quot;,&quot;8&quot;,..: 1 1 1 1 1 1 1 1 1 1 ... ## $ Day : int 1 2 3 4 5 6 7 8 9 10 ... ## $ Month.ch_temp: chr &quot;5&quot; &quot;5&quot; &quot;5&quot; &quot;5&quot; ... ## $ Day.ch_temp : chr &quot;1&quot; &quot;2&quot; &quot;3&quot; &quot;4&quot; ... ## $ Month.ch : chr &quot;05&quot; &quot;05&quot; &quot;05&quot; &quot;05&quot; ... ## $ Day.ch : chr &quot;01&quot; &quot;02&quot; &quot;03&quot; &quot;04&quot; ... ## $ Time : Date, format: &quot;2021-05-01&quot; &quot;2021-05-02&quot; ... # 5월과 7월만 선택 airquality_May_July &lt;- subset(airquality, select = c(Month, Day, Wind, Temp), subset = (Month %in% c(5, 7))) head(airquality_May_July) ## Month Day Wind Temp ## 1 5 1 7.4 67 ## 2 5 2 8.0 72 ## 3 5 3 12.6 74 ## 4 5 4 11.5 62 ## 5 5 5 14.3 56 ## 6 5 6 14.9 66 tail(airquality_May_July) ## Month Day Wind Temp ## 87 7 26 8.6 82 ## 88 7 27 12.0 86 ## 89 7 28 7.4 88 ## 90 7 29 7.4 86 ## 91 7 30 7.4 83 ## 92 7 31 9.2 81 Go Top 이제 이차원 밀도 그래프 (2D Density Plot)을 그려보겠습니다. 그리고 5월과 7월달의 Month를 색깔로 구분하여 보겠습니다. 13.4.2 aes()에 범주형 변수 지정하기 이때 조심해야 할 것이 있습니다. aes() 에 shape이나 colour 에는 범주형 변수(factor)가 들어가야 합니다. 만약 연속형 변수가 들어가면 “Error: A continuous variable can not be mapped to shape” 라는 에러 메시지가 뜹니다. # 2차원 밀도 그래프 : 모양과 색깔로 구분 # 연속형 변수라서 error ggplot(data = airquality_May_July, aes(x = Wind, y = Temp, shape = Month)) + geom_point() + stat_density2d() + ggtitle(&quot;2차원 밀도 그래프 : 모양과 색깔로 구분&quot;) Month를 Month.ch라는 새로운 문자형 변수로 변환해, 이를 사용해서 이차원 밀도 그래프를 Month별로 모양과 색깔을 구분해서 그려보겠습니다. # Month를 문자형 변수로 변환 airquality_May_July &lt;- transform(airquality_May_July, Month.ch = as.character(Month)) sapply(airquality_May_July, class) ## Month Day Wind Temp Month.ch ## &quot;factor&quot; &quot;integer&quot; &quot;numeric&quot; &quot;integer&quot; &quot;character&quot; head(airquality_May_July) ## Month Day Wind Temp Month.ch ## 1 5 1 7.4 67 5 ## 2 5 2 8.0 72 5 ## 3 5 3 12.6 74 5 ## 4 5 4 11.5 62 5 ## 5 5 5 14.3 56 5 ## 6 5 6 14.9 66 5 Go Top 13.4.3 커널 밀도 추정치 계산 stat_density2d() 함수로 커널 밀도 추정치를 계산해서 2차원 밀도 그래프를 그리면, # 2차원 밀도 그래프 : Month별 모양 구분 ggplot(data=airquality_May_July, aes(x = Wind, y = Temp, shape = Month.ch)) + geom_point(size = 4) + stat_density2d() + ggtitle(&quot;2차원 밀도 그래프 : Month별 모양 구분&quot;) Go Top 13.4.4 라벨 추가 이번에는 (범례가 있기는 합니다만) 사용자의 가독성을 조금 더 높여주기 위해 2차원 밀도 그래프의 5월, 7월 두 집단의 중앙 부위에 “년/월”을 annotate()의 “text”로 라벨을 추가해 보겠습니다. # 2차원 밀도 그래프 : Month별 색깔로 구분, 년/월 라벨 추가 ggplot(data=airquality_May_July, aes(x = Wind, y = Temp, shape = Month.ch)) + stat_density2d() + ggtitle(&quot;2차원 밀도 그래프 : Month별 색깔로 구분, 년/월 라벨 추가&quot;) + annotate(&quot;text&quot;, x=11, y=65, label=&quot;May, 1973&quot;, alpha=0.5) + annotate(&quot;text&quot;, x=9, y= 83, label=&quot;July, 1973&quot;, alpha=0.5) Go Top 13.4.5 등고선 효과 추가하기 그림이 조금 재미가 없네요… 등고선에 그래디언트 효과를 줘서 히트맵 형태로 표현을 해 보겠습니다. stat_density2d() 함수 내에 aes() 함수를 이용하여 등고선 효과를 추가합니다. 그리고, scale_fill_gradient() 함수와 scale_alpha() 함수도 추가해 줍니다. # 2차원 밀도 그래프 : 등고선 효과 ggplot(data=airquality_May_July, aes(x = Wind, y = Temp, shape = Month.ch)) + stat_density2d(aes( fill = ..level.., alpha = ..level..), size = 0.01, bins = 20, # 등고선 간격 조절 geom = &quot;polygon&quot;) + scale_fill_gradient(low = &quot;green&quot;, high = &quot;red&quot;) + scale_alpha(range = c(0, 0.5), guide = FALSE) + ggtitle(&quot;2차원 밀도 그래프 : 등고선 효과&quot;) + annotate(&quot;text&quot;, x=11, y=65, label=&quot;May, 1973&quot;, alpha=1.5, color = &quot;blue&quot;) + annotate(&quot;text&quot;, x=9, y= 83, label=&quot;July, 1973&quot;, alpha=1.5, color = &quot;blue&quot;) 그래도 뭔가 불만이 있네요.. 등고선을 없애고 부드럽게 표현해 보겠습니다. ggplot() 함수 내의 colour = Month.ch을 제거하고 다시 한번 더 그려보지요… # 2차원 밀도 그래프 : 등고선 효과 ggplot(data=airquality_May_July, aes(x = Wind, y = Temp)) + stat_density2d( aes(fill = ..level.., alpha = ..level..), size = 0.01, bins = 20, # 등고선 간격 조절 geom = &quot;polygon&quot;) + scale_fill_gradient(low = &quot;green&quot;, high = &quot;red&quot;) + scale_alpha(range = c(0, 0.5), guide = FALSE) + ggtitle(&quot;2차원 밀도 그래프 : 등고선 효과&quot;) + annotate(&quot;text&quot;, x=11, y=65, label=&quot;May, 1973&quot;, alpha=1.5, color = &quot;blue&quot;) + annotate(&quot;text&quot;, x=9, y= 83, label=&quot;July, 1973&quot;, alpha=1.5, color = &quot;blue&quot;) 참고로 aes() 함수 내의 bins는 등고선 간의 간격 갯수라고 이해하면 좋겠습니다. 간격의 갯수가 많아질수록 등고선의 간격이 좁아지겠지요…. bins의 값을 5, 10, 15, 20, 25, 30 등으로 수정하면서 다시 그려보기 바랍니다. Go Top 13.4.6 facet_wrap() 함수 이용 한번 더 해 보지요… 이번에는 앞에서 제거한 Month.ch 변수를 facet_wrap() 함수 안에 추가해서 그림을 다시 그려보겠습니다. 그러면 5월과 7월의 지도가 따로 그려지겠지요… # 2차원 밀도 그래프 : facet_wrap() 함수 이용 ggplot(data=airquality_May_July, aes(x=Wind, y=Temp)) + # geom_point(size=4) + stat_density2d( aes(fill = ..level.., alpha = ..level..), size = 0.01, bins = 20, # 등고선 간격 조절 geom = &quot;polygon&quot;) + scale_fill_gradient(low = &quot;green&quot;, high = &quot;red&quot;) + scale_alpha(range = c(0, 0.5), guide = FALSE) + ggtitle(&quot;2D desity plot of Wind and Tmep, at1973. May/July by Colour&quot;) + annotate(&quot;text&quot;, x=11, y=65, label=&quot;May, 1973&quot;, alpha=1.5, color = &quot;blue&quot;) + annotate(&quot;text&quot;, x=9, y= 83, label=&quot;July, 1973&quot;, alpha=1.5, color = &quot;blue&quot;) + facet_wrap(vars(Month.ch)) Go Top "],["클리브랜드-점-그래프-1.html", "13.5 클리브랜드 점 그래프", " 13.5 클리브랜드 점 그래프 예전 포스팅 중에서 일변량 연속형 변수에 대해 ggplot2로 막대 그래프 그리는 법을 소개했었는데요, 막대 그래프의 훌륭한 대안으로서 점 그래프(Dot Plot)이 있습니다. Cleveland and McGill (1984) 이 “Graphical Methods for Data Presentation: Full Scale Breaks, Dot Charts, and Multibased Logging.” 이라는 논문에서 막대 그래프 대비 점 그래프가 데이터 해석, 가독성에서 가지는 우수성을 소개하면서 Cleveland Dot Plot 이라고도 많이 불리는 그래프입니다. 13.5.1 데이터 세트 분석에 활용할 데이터는 MASS 패키지 내 Cars93 데이터 프레임에서, 차종(Type), 모델(Model), Max.Price, Min.Price의 4개 변수를 사용하겠으며, 관측치 개수가 많아서 화면 하나에 전부 뿌리기에는 너무 많으므로 차종(Type)의 Level 중에서 “Large,” “Midsize,” “Small” 만 선별하고 “Compact,” “Sproty,” “Van”은 제외하도록 하겠습니다. library(MASS) str(Cars93) ## &#39;data.frame&#39;: 93 obs. of 27 variables: ## $ Manufacturer : Factor w/ 32 levels &quot;Acura&quot;,&quot;Audi&quot;,..: 1 1 2 2 3 4 4 4 4 5 ... ## $ Model : Factor w/ 93 levels &quot;100&quot;,&quot;190E&quot;,&quot;240&quot;,..: 49 56 9 1 6 24 54 74 73 35 ... ## $ Type : Factor w/ 6 levels &quot;Compact&quot;,&quot;Large&quot;,..: 4 3 1 3 3 3 2 2 3 2 ... ## $ Min.Price : num 12.9 29.2 25.9 30.8 23.7 14.2 19.9 22.6 26.3 33 ... ## $ Price : num 15.9 33.9 29.1 37.7 30 15.7 20.8 23.7 26.3 34.7 ... ## $ Max.Price : num 18.8 38.7 32.3 44.6 36.2 17.3 21.7 24.9 26.3 36.3 ... ## $ MPG.city : int 25 18 20 19 22 22 19 16 19 16 ... ## $ MPG.highway : int 31 25 26 26 30 31 28 25 27 25 ... ## $ AirBags : Factor w/ 3 levels &quot;Driver &amp; Passenger&quot;,..: 3 1 2 1 2 2 2 2 2 2 ... ## $ DriveTrain : Factor w/ 3 levels &quot;4WD&quot;,&quot;Front&quot;,..: 2 2 2 2 3 2 2 3 2 2 ... ## $ Cylinders : Factor w/ 6 levels &quot;3&quot;,&quot;4&quot;,&quot;5&quot;,&quot;6&quot;,..: 2 4 4 4 2 2 4 4 4 5 ... ## $ EngineSize : num 1.8 3.2 2.8 2.8 3.5 2.2 3.8 5.7 3.8 4.9 ... ## $ Horsepower : int 140 200 172 172 208 110 170 180 170 200 ... ## $ RPM : int 6300 5500 5500 5500 5700 5200 4800 4000 4800 4100 ... ## $ Rev.per.mile : int 2890 2335 2280 2535 2545 2565 1570 1320 1690 1510 ... ## $ Man.trans.avail : Factor w/ 2 levels &quot;No&quot;,&quot;Yes&quot;: 2 2 2 2 2 1 1 1 1 1 ... ## $ Fuel.tank.capacity: num 13.2 18 16.9 21.1 21.1 16.4 18 23 18.8 18 ... ## $ Passengers : int 5 5 5 6 4 6 6 6 5 6 ... ## $ Length : int 177 195 180 193 186 189 200 216 198 206 ... ## $ Wheelbase : int 102 115 102 106 109 105 111 116 108 114 ... ## $ Width : int 68 71 67 70 69 69 74 78 73 73 ... ## $ Turn.circle : int 37 38 37 37 39 41 42 45 41 43 ... ## $ Rear.seat.room : num 26.5 30 28 31 27 28 30.5 30.5 26.5 35 ... ## $ Luggage.room : int 11 15 14 17 13 16 17 21 14 18 ... ## $ Weight : int 2705 3560 3375 3405 3640 2880 3470 4105 3495 3620 ... ## $ Origin : Factor w/ 2 levels &quot;USA&quot;,&quot;non-USA&quot;: 2 2 2 2 2 1 1 1 1 1 ... ## $ Make : Factor w/ 93 levels &quot;Acura Integra&quot;,..: 1 2 4 3 5 6 7 9 8 10 ... table(Cars93$Type) ## ## Compact Large Midsize Small Sporty Van ## 16 11 22 21 14 9 # Model, Type, Max.Price, Min.Price 변수만 선택 # Type 중에서 Large, Midsize, Small만 선택 (Compact, Sortry, Van은 제외) Cars93_P &lt;- subset(Cars93, select = c(Model, Type, Min.Price, Max.Price), subset = (Type %in% c(&quot;Large&quot;, &quot;Midsize&quot;, &quot;Small&quot;))) str(Cars93_P) ## &#39;data.frame&#39;: 54 obs. of 4 variables: ## $ Model : Factor w/ 93 levels &quot;100&quot;,&quot;190E&quot;,&quot;240&quot;,..: 49 56 1 6 24 54 74 73 35 79 ... ## $ Type : Factor w/ 6 levels &quot;Compact&quot;,&quot;Large&quot;,..: 4 3 3 3 3 2 2 3 2 3 ... ## $ Min.Price: num 12.9 29.2 30.8 23.7 14.2 19.9 22.6 26.3 33 37.5 ... ## $ Max.Price: num 18.8 38.7 44.6 36.2 17.3 21.7 24.9 26.3 36.3 42.7 ... head(Cars93_P) ## Model Type Min.Price Max.Price ## 1 Integra Small 13 19 ## 2 Legend Midsize 29 39 ## 4 100 Midsize 31 45 ## 5 535i Midsize 24 36 ## 6 Century Midsize 14 17 ## 7 LeSabre Large 20 22 13.5.2 클리브랜드 점 그래프 그리기 geom_point() 함수를 사용하여 클리브랜드 점 그래프(Cleveland dot plot)을 그려보겠습니다. aes(y = reorder(Model, Max.Price)) 를 사용해서 y축에 사용할 Model 을 Max.Price 를 기준으로 정렬을 하였기 때문에 아래처럼 Max.Price가 높은 것부터 낮은 것으로 정렬이 된 채로 점 그래프가 제시되었습니다. aes(shape = Type) 을 적용하여서 Type(Large, Midsize, Small) 별로 모양(shape)을 달리해서 제시하였습니다. # Cleveland dot plot of Max Price of Models with different shape by Type library(ggplot2) ggplot(Cars93_P, aes(x = Max.Price, y = reorder(Model, Max.Price), shape = Type)) + geom_point(size = 3, colour = &quot;blue&quot;) + theme_bw() + # background 색 없애기 theme(panel.grid.major.x = element_blank(), # x축 선 없애기 panel.grid.minor.x = element_blank(), panel.grid.major.y = element_line(colour=&quot;grey90&quot;, linetype=&quot;dashed&quot;)) + ggtitle(&quot;Cleveland dot plot of Max.Price of Models with different shape by Type&quot;) Go Top 13.5.3 facet_grid() 함수 이용 다음으로, Type(Large, Midsize, Small) 별로 facet_grid(Type ~ ., scales=\"free_y\", space=\"free_y\") 을 적용하여 면을 분할을 한 클리브랜드 점 그래프(Cleveland dot plot)을 그려보겠습니다. 면 분할해서 그리려면 위의 예처럼 ggplot2 내 aes(reorder)로는 안되구요, 먼저 Type과 Max.Price 순서대로 데이터셋을 따로 정렬해서 요인(factor)으로 levels 를 지정해서 변환해주어야 합니다. 그래프는 상대적으로 쉬운데, 데이터셋 정렬/요인변환이 어려울 수 있겠습니다. # Type, Max.Price 순서대로 정렬 Model_Order &lt;- Cars93_P$Model[order(Cars93_P$Type, # Large, Midsize, Small 순서 -Cars93_P$Max.Price, # 높은것에서 낮은 순서 decreasing=TRUE)] # Model_Order를 요인(factor)으로 변환 Cars93_P$Model &lt;- factor(Cars93_P$Model, levels=Model_Order) # Type별로 면 분할, Max.Price 순서대로 정렬된 Cleveland dot plot ggplot(Cars93_P, aes(x = Max.Price, y = Model)) + geom_point(size = 3, aes(colour = Type)) + theme_bw() + theme(panel.grid.major.y = element_blank(), panel.grid.minor.y = element_blank()) + facet_grid(Type ~ ., scales=&quot;free_y&quot;, space=&quot;free_y&quot;) + ggtitle(&quot;Cleveland dot plot of Max.Price of Models with Facets of Type&quot;) Go Top 13.5.4 변수의 추가와 모양 변경하기 다음으로, 차종(Type)별로 면 분할은 유지하면서 위의 Max.Price 에 더해서 Min.Price 를 추가하고 모양(shape)을 다르게 제시해보겠습니다. 이것도 데이터 셋을 따로 미리 손을 봐줘야 합니다. reshape 패키지의 melt() 함수를 사용해서 Max.Price, Min.Price 두 값을 Price_cd (Max.Price, Min.Price)와 Price (value) 의 두개 변수로 녹여서 데이터 구조를 ggplot2의 geom_point()에 사용할 수 있도록 변경하여야 합니다. (reshape 패키지의 melt(), cast() 함수는 여기서 자세히 설명하기가 힘든데요, 따로 알아보시면 좋겠습니다) #-------- # Min.Price 추가 # melt # install.packages(&quot;reshape&quot;) library(reshape) ## ## Attaching package: &#39;reshape&#39; ## The following object is masked from &#39;package:dplyr&#39;: ## ## rename ## The following objects are masked from &#39;package:tidyr&#39;: ## ## expand, smiths Cars93_P_melt &lt;- melt(Cars93_P, idvars = c(&quot;Type&quot;, &quot;Model&quot;)) ## Using Model, Type as id variables head(Cars93_P_melt) ## Model Type variable value ## 1 Integra Small Min.Price 13 ## 2 Legend Midsize Min.Price 29 ## 3 100 Midsize Min.Price 31 ## 4 535i Midsize Min.Price 24 ## 5 Century Midsize Min.Price 14 ## 6 LeSabre Large Min.Price 20 # 변수명 변경 Cars93_P_melt &lt;- rename(Cars93_P_melt, c(variable = &quot;Price_cd&quot;, value = &quot;Price&quot;)) head(Cars93_P_melt) ## Model Type Price_cd Price ## 1 Integra Small Min.Price 13 ## 2 Legend Midsize Min.Price 29 ## 3 100 Midsize Min.Price 31 ## 4 535i Midsize Min.Price 24 ## 5 Century Midsize Min.Price 14 ## 6 LeSabre Large Min.Price 20 # Type별로 면 분할, Max.Price 순서대로 정렬, Min.Price추가된 Cleveland dot plot ggplot(Cars93_P_melt, aes(x = Price, y = Model)) + geom_segment(aes(yend=Model, xend=0)) + # 점까지만 선 그리기 geom_point(size=3, aes(shape = Price_cd)) + # Price_cd로 모양 구분 theme_bw() + # backgroud 색 없애기 theme(panel.grid.major.y = element_blank(), # y축 없애기 panel.grid.minor.y = element_blank()) + # y축 없애기 facet_grid(Type ~ ., scales=&quot;free_y&quot;, space=&quot;free_y&quot;) + # Type별로 면 분할 ggtitle(&quot;Cleveland dot plot of Max, Min Price of Models with Facets of Type&quot;) Go Top 위의 세번째 그래프처럼 Max.Price와 Min.Price를 같은 그래프에 그리는데, 만약 이것을 막대 그래프로 그린다고 상상해 보세요. 막대그래프로 그린다면 지저분하고 해석, 가독성이 클리브랜드 점 그래프 대비 떨어질겁니다. [Reference] Cleveland, William S. 1984. “Graphical Methods for Data Presentation: Full Scale Breaks, Dot Charts, and Multibased Logging.” The American Statistician, 38:270-280. Dot Plots: A Useful Alternative to Bar Charts, Naomi B. Robbins, Ph.D. March 7, 2006 "],["누적-영역-그래프.html", "13.6 누적 영역 그래프", " 13.6 누적 영역 그래프 시간의 흐름에 따른 그룹/집단 별 관측값 혹은 비율의 변화를 누적해서 볼 수 있는 그래프가 누적 영역 그래프 (Stacked Area Plot) 입니다. 아마 엑셀에서 많이 보았을 법한 그래프일 것이라고 생각합니다. 2007년부터 2014년까지의 한국 수/출입 무역량 (단위: 1 B$) 데이터를 가지고 수출과 수입으로 구분하여서 ggplot2의 geom_area() 함수를 사용하여 누적 영역 그래프(Stacked Area Plot) 를 그려보도록 하겠습니다. 아래는 2007년부터 2014년까지의 한국 수/출입 무역량 (단위: 1 B$) 데이터를 링크해두었습니다. 13.6.1 데이터 전처리 ( 한국 수/출입 무역량 데이터 다운로드 trade_stat_07_14.csv) * 출처 : 국가무역통계 KOSIS, http://kosis.kr/statisticsList/statisticsList_01List.jsp?vwcd=MT_ZTITLE&amp;parmTabId=M_01_01#SubCont) 그래프를 그리기에 딱 맞는 형식이 아니므로 csv 데이터를 불러들인 다음에 -&gt; sqldf 패키지를 활용해 Year 단위로 수출입 실적을 집계 -&gt; 이때 단위를 1000$ -&gt; 1B$ 로 바꿔주기 위해 1,000,000 으로 나눠줌 을 써 데이터를 필요에 맞게 집계해보겠습니다. trade_stat &lt;- read.csv(&quot;data/trade_stat_07_14.csv&quot;, # 경로 설정 header = TRUE) trade_stat &lt;- transform(trade_stat, Year = substr(Time, 1, 4)) sapply(trade_stat, class) ## Time export_amt import_amt Year ## &quot;numeric&quot; &quot;integer&quot; &quot;integer&quot; &quot;character&quot; # install.packages(&quot;sqldf&quot;) library(sqldf) ## Loading required package: gsubfn ## Loading required package: proto ## Loading required package: RSQLite # 한국 수/출입 무역금액, 단위: 1B$ trade_stat_Year &lt;- sqldf(&#39;select Year, sum(export_amt)/100000 as exp_amt_Year, sum(import_amt)/100000 as imp_amt_Year from trade_stat group by Year order by Year &#39;) trade_stat_Year ## Year exp_amt_Year imp_amt_Year ## 1 2007 3714 3568 ## 2 2008 4220 4352 ## 3 2009 3635 3230 ## 4 2010 4663 4252 ## 5 2011 5552 5244 ## 6 2012 5478 5195 ## 7 2013 5596 5155 ## 8 2014 5726 5255 여기까지 했는데도 누적 영역 그래프를 그리기에 딱 맞는 데이터 형태가 아니라서 reshape 패키지의 melt() 함수를 사용하여 데이터를 현재의 가로로 늘어져있는 exp_amt_Year, imp_amt_Year 변수를 -&gt; 세로로 세워서 데이터 구조를 변경해보겠습니다. (wide form의 테이블을 long form의 테이블로 변환) 그 다음에 variable -&gt; trade_cd (수입, 수출 구분 코드), value -&gt; amount_B (무역금액, 단위 : 1B$) 로 변수명을 변경하였습니다. # 데이터 구조 녹이기(melt) - 세로로 세우기 (Long Form) library(reshape) trade_stat_Year_melt &lt;- melt(trade_stat_Year, idvars = c(&quot;Year&quot;)) ## Using Year as id variables trade_stat_Year_melt ## Year variable value ## 1 2007 exp_amt_Year 3714 ## 2 2008 exp_amt_Year 4220 ## 3 2009 exp_amt_Year 3635 ## 4 2010 exp_amt_Year 4663 ## 5 2011 exp_amt_Year 5552 ## 6 2012 exp_amt_Year 5478 ## 7 2013 exp_amt_Year 5596 ## 8 2014 exp_amt_Year 5726 ## 9 2007 imp_amt_Year 3568 ## 10 2008 imp_amt_Year 4352 ## 11 2009 imp_amt_Year 3230 ## 12 2010 imp_amt_Year 4252 ## 13 2011 imp_amt_Year 5244 ## 14 2012 imp_amt_Year 5195 ## 15 2013 imp_amt_Year 5155 ## 16 2014 imp_amt_Year 5255 # 변수명 변경 trade_stat_Year_melt &lt;- rename(trade_stat_Year_melt, c(variable=&quot;trade_cd&quot;, value=&quot;amount_B&quot;)) trade_stat_Year_melt ## Year trade_cd amount_B ## 1 2007 exp_amt_Year 3714 ## 2 2008 exp_amt_Year 4220 ## 3 2009 exp_amt_Year 3635 ## 4 2010 exp_amt_Year 4663 ## 5 2011 exp_amt_Year 5552 ## 6 2012 exp_amt_Year 5478 ## 7 2013 exp_amt_Year 5596 ## 8 2014 exp_amt_Year 5726 ## 9 2007 imp_amt_Year 3568 ## 10 2008 imp_amt_Year 4352 ## 11 2009 imp_amt_Year 3230 ## 12 2010 imp_amt_Year 4252 ## 13 2011 imp_amt_Year 5244 ## 14 2012 imp_amt_Year 5195 ## 15 2013 imp_amt_Year 5155 ## 16 2014 imp_amt_Year 5255 Go Top 13.6.2 누적영역 그래프 그리기 이제 드디어 누적 영역 그래프를 그릴 데이터 셋 준비가 다 되었군요. ggplot2의 geom_area() 함수를 사용하여 우선 값 기준으로 그리고, 다음으로 비율 기준으로도 그려보겠습니다. geom_area(colour=NA)로 하고 geom_line(position=\"stack\")으로 해서 양 옆에 선은 트여주고, 영역 간 경계선은 그려주었습니다. # 누적 영역 그래프 그리기 ggplot(trade_stat_Year_melt, aes(x=Year, y=amount_B, fill=trade_cd, group=trade_cd)) + geom_area(colour=NA, alpha=0.5) + # alpha 투명도 scale_fill_brewer(palette=&quot;Blues&quot;) + geom_line(position=&quot;stack&quot;, size=0.3) + ggtitle(&quot;Stacked Area Plot of Trade (Import, Export) from 2007 to 2014&quot;) Go Top 13.6.3 누적영역 순서 바꾸기 aes(arder=desc()) 를 사용하여 위의 영역 구분 그룹의 순서를 바꿀 수도 있습니다. 위의 예제에서는 exp_amt_Year (수출액)이 아래에 위치했습니다만, 아래 예제에서는 exp_amt_Year(수출액)이 위로 위치가 바뀌었음을 알 수 있습니다. # 누적 영역 순서 바꾸기 library(plyr) # desc() 함수 사용 위해 필요 ## ------------------------------------------------------------------------------ ## You have loaded plyr after dplyr - this is likely to cause problems. ## If you need functions from both plyr and dplyr, please load plyr first, then dplyr: ## library(plyr); library(dplyr) ## ------------------------------------------------------------------------------ ## ## Attaching package: &#39;plyr&#39; ## The following objects are masked from &#39;package:reshape&#39;: ## ## rename, round_any ## The following objects are masked from &#39;package:dplyr&#39;: ## ## arrange, count, desc, failwith, id, mutate, rename, summarise, ## summarize ## The following object is masked from &#39;package:purrr&#39;: ## ## compact ggplot(trade_stat_Year_melt, aes(x=Year, y=amount_B, fill=trade_cd, group=trade_cd, order=desc(trade_cd))) + # 누적 영역 순서 내림차순 정렬 geom_area(colour=NA, alpha=0.5) + # alpha 투명도 scale_fill_brewer(palette=&quot;Blues&quot;) + geom_line(position=&quot;stack&quot;, size=0.3) + ggtitle(&quot;Stacked Area Plot of Trade (Import, Export) from 2007 to 2014&quot;) Go Top 13.6.4 비율 기준의 누적영역 그래프 이번에는 비율 기준으로 해서 누적 영역 그래프를 그려보겠습니다. 이를 위해서는 데이터셋에서 Year 별로 비율을 계산해주어야 합니다. 데이터 프레임에서 사칙연산을 써가면서 transform() 함수로 step-by-step 해나갈 수도 있는데요, plyr패키지의 ddply() 함수를 사용하면 놀랍도록 간편하게 원하는 비율 값을 구할 수 있습니다. 13.6.4.1 비율 계산하기 #----- # 비율 누적 영역 그래프 그리기 # 비율 계산하기 # install.packages(&quot;plyr&quot;) library(plyr) trade_stat_Year_melt_prop &lt;- ddply(trade_stat_Year_melt, &quot;Year&quot;, transform, trade_prop = round(100*amount_B/sum(amount_B),1)) trade_stat_Year_melt_prop ## Year trade_cd amount_B trade_prop ## 1 2007 exp_amt_Year 3714 51 ## 2 2007 imp_amt_Year 3568 49 ## 3 2008 exp_amt_Year 4220 49 ## 4 2008 imp_amt_Year 4352 51 ## 5 2009 exp_amt_Year 3635 53 ## 6 2009 imp_amt_Year 3230 47 ## 7 2010 exp_amt_Year 4663 52 ## 8 2010 imp_amt_Year 4252 48 ## 9 2011 exp_amt_Year 5552 51 ## 10 2011 imp_amt_Year 5244 49 ## 11 2012 exp_amt_Year 5478 51 ## 12 2012 imp_amt_Year 5195 49 ## 13 2013 exp_amt_Year 5596 52 ## 14 2013 imp_amt_Year 5155 48 ## 15 2014 exp_amt_Year 5726 52 ## 16 2014 imp_amt_Year 5255 48 13.6.4.2 비율 누적 영역 그래프 위의 trade_prop 변수를 활용해서 비율 누적 영역 그래프(Propostion stacked area plot)을 그려보도록 하겠습니다. 값을 기준으로 했을 때와 script는 동일하며, y값 자리에 trade_prop (수출입 무역 비율) 변수로 바꾸어주기만 하면 됩니다. 그래프 뒤에 단위 격자가 보이도록 geom_area(alpha=0.5) 로 해서 약간 투명하게 처리했습니다. # 비율 누적 영역 그래프 그리기 library(plyr) # desc() 함수 사용 위해 필요 ggplot(trade_stat_Year_melt_prop, aes(x=Year, y=trade_prop, fill=trade_cd, group=trade_cd, order=desc(trade_cd))) + # 누적 영역 순서 내림차순 정렬 geom_area(colour=NA, alpha=0.5) + # alpha 투명도 scale_fill_brewer(palette=&quot;Blues&quot;) + geom_line(position=&quot;stack&quot;, size=0.3) + ggtitle(&quot;Stacked Area Plot of Trade Proportion (Import, Export) from 2007 to 2014&quot;) Go Top "],["상관계수-행렬-그래프.html", "13.7 상관계수 행렬 그래프", " 13.7 상관계수 행렬 그래프 다수의 변수간 상관관계를 파악하려고 할 때, 회귀분석에서 종속변수와 독립변수간 선형관계를 파악하거나 독립변수간 다중공선성을 파악하려고 할 때 사용하는 분석 기법이 상관계수 행렬이며, 시각화 방법이 산포도 행렬과 상관계수 행렬 Plot (correlation matrix plot) 입니다. 이번 절에서는 상관계수 행렬 Plot을 중심으로 해서 corrplot 패키지 사용법을 알아보겠습니다. 13.7.1 데이터 세트 예제로 사용한 데이터는 뉴욕의 1973년도 공기의 질을 측정한 airquality 데이터셋의 Ozone, Solar.R, Wind, Temp 4개의 변수가 되겠습니다. str(airquality) ## &#39;data.frame&#39;: 153 obs. of 11 variables: ## $ Ozone : int 41 36 12 18 NA 28 23 19 8 NA ... ## $ Solar.R : int 190 118 149 313 NA NA 299 99 19 194 ... ## $ Wind : num 7.4 8 12.6 11.5 14.3 14.9 8.6 13.8 20.1 8.6 ... ## $ Temp : int 67 72 74 62 56 66 65 59 61 69 ... ## $ Month : Factor w/ 5 levels &quot;5&quot;,&quot;6&quot;,&quot;7&quot;,&quot;8&quot;,..: 1 1 1 1 1 1 1 1 1 1 ... ## $ Day : int 1 2 3 4 5 6 7 8 9 10 ... ## $ Month.ch_temp: chr &quot;5&quot; &quot;5&quot; &quot;5&quot; &quot;5&quot; ... ## $ Day.ch_temp : chr &quot;1&quot; &quot;2&quot; &quot;3&quot; &quot;4&quot; ... ## $ Month.ch : chr &quot;05&quot; &quot;05&quot; &quot;05&quot; &quot;05&quot; ... ## $ Day.ch : chr &quot;01&quot; &quot;02&quot; &quot;03&quot; &quot;04&quot; ... ## $ Time : Date, format: &quot;2021-05-01&quot; &quot;2021-05-02&quot; ... 13.7.1.1 결측값 처리 상관계수 분석을 할 때 결측값이 있으면 NA 값이 나오게 되므로 사전에 결측값을 처리하는 것이 필요합니다. Ozone과 Solar.R이 결측값이 각각 37개, 7개 있다보니 아래처럼 상관계수가 NA가 나왔습니다. # Month, Day는 빼기 airquality_1 &lt;- airquality[,c(1:4)] # 결측값 확인 sum(is.na(airquality_1$Ozone)) # 37 ## [1] 37 sum(is.na(airquality_1$Solar.R)) # 7 ## [1] 7 sum(is.na(airquality_1$Wind)) # 0 ## [1] 0 sum(is.na(airquality_1$Temp)) # 0 ## [1] 0 # 결측값 있는 상태에서 상관계수 계산했을 때 cor(airquality_1) ## Ozone Solar.R Wind Temp ## Ozone 1 NA NA NA ## Solar.R NA 1 NA NA ## Wind NA NA 1.00 -0.46 ## Temp NA NA -0.46 1.00 na.omit() 함수를 사용하여 결측값이 있는 행 전체를 삭제한 후에 상관계수를 구해보면 아래와 같습니다. # 결측값 있는 행 전체 삭제 airquality_2 &lt;- na.omit(airquality_1) str(airquality_2) ## &#39;data.frame&#39;: 111 obs. of 4 variables: ## $ Ozone : int 41 36 12 18 23 19 8 16 11 14 ... ## $ Solar.R: int 190 118 149 313 299 99 19 256 290 274 ... ## $ Wind : num 7.4 8 12.6 11.5 8.6 13.8 20.1 9.7 9.2 10.9 ... ## $ Temp : int 67 72 74 62 65 59 61 69 66 68 ... ## - attr(*, &quot;na.action&quot;)= &#39;omit&#39; Named int [1:42] 5 6 10 11 25 26 27 32 33 34 ... ## ..- attr(*, &quot;names&quot;)= chr [1:42] &quot;5&quot; &quot;6&quot; &quot;10&quot; &quot;11&quot; ... sum(is.na(airquality_2$Ozone)) # 0 ## [1] 0 sum(is.na(airquality_2$Solar.R)) # 0 ## [1] 0 # 상관계수 계산 airquality_cor &lt;- cor(airquality_2) airquality_cor ## Ozone Solar.R Wind Temp ## Ozone 1.00 0.35 -0.61 0.70 ## Solar.R 0.35 1.00 -0.13 0.29 ## Wind -0.61 -0.13 1.00 -0.50 ## Temp 0.70 0.29 -0.50 1.00 corrplot 패키지의 corrplot() 함수는 상관계수 행렬 데이터셋을 가지고 그래프를 그리므로 아래처럼 결측값을 제거한 후의 데이터셋을 가지고 미리 상관계수 행렬을 계산해두어야 합니다. 13.7.1.2 패키지 설치 corrplot 패키지는 별도의 설치 및 호출이 필요한 패키지이므로 아래의 절차를 거칩니다. # install.packages(&quot;corrplot&quot;) library(corrplot) ## corrplot 0.84 loaded Go Top 13.7.2 상관계수 행렬 그리기 13.7.2.1 산포도 행렬 그림 산포도 행렬 그림 (scatter matrix plot)을 복습해보자면 아래와 같습니다. # scatter plot matrix plot(airquality_2) 13.7.2.2 상관계수 행렬 그리기 correlation plot의 method 에는 method = c(\"circle\", \"square\", \"ellipse\", \"number\", \"shade\", \"color\", \"pie\") 등이 있으며, method별로 하나씩 예를 들어보겠습니다. 13.7.2.2.1 method=\"circle\" corrplot(airquality_cor, method=&quot;circle&quot;) 13.7.2.2.2 method=\"square\" corrplot(airquality_cor, method=&quot;square&quot;) 13.7.2.2.3 method=\"ellipse\" corrplot(airquality_cor, method=&quot;ellipse&quot;) 13.7.2.2.4 method=\"number\" corrplot(airquality_cor, method=&quot;number&quot;) 13.7.2.2.5 method=\"shade\" corrplot(airquality_cor, method=&quot;shade&quot;) 13.7.2.2.6 method=\"color\" corrplot(airquality_cor, method=&quot;color&quot;) 13.7.2.2.7 method=\"pie\" corrplot(airquality_cor, method=&quot;pie&quot;) 마지막으로 method=\"shade\", 상관관계 방향성 제시, 대각선 값 미제시, 상관계수 숫지 검정색으로 해서 추가해서 corrplot을 그려보겠습니다. order 는 FPC(First Principle Component), hclust(hierarchical clustering), AOE(Angular Order of Engenvectors) 등이 있으며, 정렬 기준을 지정해주면 같은 색깔 끼리 뭉쳐서 보일 수 있도록 정렬을 시켜줘서 보기에, 해석하기에 더 좋게 보여줍니다. # corrplot corrplot(airquality_cor, method=&quot;shade&quot;, # 색 입힌 사각형 addshade=&quot;all&quot;, # 상관관계 방향선 제시 # shade.col=NA, # 상관관계 방향선 미제시 tl.col=&quot;red&quot;, # 라벨 색 지정 tl.srt=30, # 위쪽 라벨 회전 각도 diag=FALSE, # 대각선 값 미제시 addCoef.col=&quot;black&quot;, # 상관계수 숫자 색 order=&quot;FPC&quot; # &quot;FPC&quot;: First Principle Component # &quot;hclust&quot; : hierarchical clustering # &quot;AOE&quot; : Angular Order of Eigenvectors ) Go Top "],["산포도-행렬-그리기.html", "13.8 산포도 행렬 그리기", " 13.8 산포도 행렬 그리기 산포도는 두 변수간의 관계를 파악하는데 굉장히 유용한 시각화 방법입니다. 그리고 산포도 행렬은 다수의 변수들 간의 관계를 한눈에 파악하는데 유용한 시각화 방법입니다. ggplot2로 두 변수만 가지고 산포도는 유연하게 그릴 수 있는데요, 3개 이상의 변수를 가지고 산포도 행렬을 그리기는 매우 힘이 듭니다. (프로그래밍을 해야 합니다) 따라서 산포도 행렬은 plot() 함수를 써서 한번에 그리는 것이 제일 편합니다. 이번 절에서는 Base Graphics 패키지 내에 pairs() 함수를 이용해서 산포도 행렬에 몇 가지 사용자 정의 함수를 추가하여 히스토그램도 집어 넣고 상관계수 숫자도 포함시키는 방법을 소개하겠습니다. 산포도 행렬에 많은 추가 정보를 담을 수 있어서 매우 보기에 좋고 유용합니다. 사용자 정의 함수는 pairs() 도움말(help)을 참조하였습니다. 13.8.1 데이터 세트 13.8.1.1 변수의 선택 예제로 사용한 데이터는 뉴욕의 1973년도 공기의 질을 측정한 airquality 데이터셋의 Ozone, Solar.R, Wind, Temp 4개의 변수가 되겠습니다. str(airquality) ## &#39;data.frame&#39;: 153 obs. of 11 variables: ## $ Ozone : int 41 36 12 18 NA 28 23 19 8 NA ... ## $ Solar.R : int 190 118 149 313 NA NA 299 99 19 194 ... ## $ Wind : num 7.4 8 12.6 11.5 14.3 14.9 8.6 13.8 20.1 8.6 ... ## $ Temp : int 67 72 74 62 56 66 65 59 61 69 ... ## $ Month : Factor w/ 5 levels &quot;5&quot;,&quot;6&quot;,&quot;7&quot;,&quot;8&quot;,..: 1 1 1 1 1 1 1 1 1 1 ... ## $ Day : int 1 2 3 4 5 6 7 8 9 10 ... ## $ Month.ch_temp: chr &quot;5&quot; &quot;5&quot; &quot;5&quot; &quot;5&quot; ... ## $ Day.ch_temp : chr &quot;1&quot; &quot;2&quot; &quot;3&quot; &quot;4&quot; ... ## $ Month.ch : chr &quot;05&quot; &quot;05&quot; &quot;05&quot; &quot;05&quot; ... ## $ Day.ch : chr &quot;01&quot; &quot;02&quot; &quot;03&quot; &quot;04&quot; ... ## $ Time : Date, format: &quot;2021-05-01&quot; &quot;2021-05-02&quot; ... # 1~4번째 변수만 선택 airquality_1 &lt;- airquality[,c(1:4)] str(airquality_1) ## &#39;data.frame&#39;: 153 obs. of 4 variables: ## $ Ozone : int 41 36 12 18 NA 28 23 19 8 NA ... ## $ Solar.R: int 190 118 149 313 NA NA 299 99 19 194 ... ## $ Wind : num 7.4 8 12.6 11.5 14.3 14.9 8.6 13.8 20.1 8.6 ... ## $ Temp : int 67 72 74 62 56 66 65 59 61 69 ... 13.8.1.2 결측치의 처리 결측값이 있으면 상관계수를 구할 때 NA 값이 나오므로, 결측값 여부 확인하고 결측값이 있는 행은 삭제한 후에 산포도 행렬을 그려보겠습니다. # 결측값 개수 확인 sum(is.na(airquality_1$Ozone)) # 37 ## [1] 37 sum(is.na(airquality_1$Solar.R)) # 7 ## [1] 7 sum(is.na(airquality_1$Wind)) # 0 ## [1] 0 sum(is.na(airquality_1$Temp)) # 0 ## [1] 0 # 결측값 있는 상태에서 상관계수 계산했을 때 cor(airquality_1) ## Ozone Solar.R Wind Temp ## Ozone 1 NA NA NA ## Solar.R NA 1 NA NA ## Wind NA NA 1.00 -0.46 ## Temp NA NA -0.46 1.00 # 결측값 있는 행 전체 삭제 airquality_2 &lt;- na.omit(airquality_1) str(airquality_2) ## &#39;data.frame&#39;: 111 obs. of 4 variables: ## $ Ozone : int 41 36 12 18 23 19 8 16 11 14 ... ## $ Solar.R: int 190 118 149 313 299 99 19 256 290 274 ... ## $ Wind : num 7.4 8 12.6 11.5 8.6 13.8 20.1 9.7 9.2 10.9 ... ## $ Temp : int 67 72 74 62 65 59 61 69 66 68 ... ## - attr(*, &quot;na.action&quot;)= &#39;omit&#39; Named int [1:42] 5 6 10 11 25 26 27 32 33 34 ... ## ..- attr(*, &quot;names&quot;)= chr [1:42] &quot;5&quot; &quot;6&quot; &quot;10&quot; &quot;11&quot; ... sum(is.na(airquality_2$Ozone)) # 0 ## [1] 0 sum(is.na(airquality_2$Solar.R)) # 0 ## [1] 0 Go Top 13.8.2 사용자 정의 함수 만들기 13.8.2.1 대각선에 히스트그램 추가하는 함수 산포도 행렬의 대각선에 히스토그램을 추가하는 사용자 정의 함수입니다. pairs() 도움말(help)에 나와있는 사용자 정의함수 그대로 가져왔습니다. 아래 사용자 정의 함수를 복사해서 사용하시기 바랍니다. ## put histograms on the diagonal panel.hist &lt;- function(x, ...) { usr &lt;- par(&quot;usr&quot;); on.exit(par(usr)) par(usr = c(usr[1:2], 0, 1.5) ) h &lt;- hist(x, plot = FALSE) breaks &lt;- h$breaks; nB &lt;- length(breaks) y &lt;- h$counts; y &lt;- y/max(y) rect(breaks[-nB], 0, breaks[-1], y, col = &quot;cyan&quot;, ...) } # source: help(pairs) 13.8.2.2 산포도 행렬 위쪽에 상관계수 숫자 삽입하는 함수 정의 다음으로 산포도 행렬의 위쪽에 상관계수 숫자를 집어넣는 사용자 정의 함수입니다. 이 또한 pairs() 도움말(help)에 나와있는 사용자 정의함수 그대로 가져왔습니다. 아래 사용자 정의 함수를 카피해서 사용하시기 바랍니다. ## put (absolute) correlations on the upper panels, ## with size proportional to the correlations. panel.cor &lt;- function(x, y, digits = 2, prefix = &quot;&quot;, cex.cor, ...) { usr &lt;- par(&quot;usr&quot;); on.exit(par(usr)) par(usr = c(0, 1, 0, 1)) r &lt;- abs(cor(x, y)) txt &lt;- format(c(r, 0.123456789), digits = digits)[1] txt &lt;- paste0(prefix, txt) if(missing(cex.cor)) cex.cor &lt;- 0.8/strwidth(txt) text(0.5, 0.5, txt, cex = cex.cor * r) } # source : help(pairs) 13.8.2.3 산포도에 선형 회귀선 추가하는 사용자 정의 함수 다음으로 산포도에 선형 회귀선을 추가하는 사용자 정의 함수입니다. 이는 R Graphics Cookbook (원스턴 챙 지음, 이제원 옮김)을 참조하였습니다. 아래 사용자 정의 함수를 카피해서 사용하시기 바랍니다. ## put linear regression line on the scatter plot panel.lm &lt;- function(x, y, col=par(&quot;col&quot;), bg=NA, pch=par(&quot;pch&quot;), cex=1, col.smooth=&quot;black&quot;, ...) { points(x, y, pch=pch, col=col, bg=bg, cex=cex) abline(stats::lm(y~x), col=col.smooth, ...) } Go Top 13.8.3 산포도 행렬 그리기 이제 준비가 다 되었습니다. airquality의 4개 변수 간의 산포도 행렬, 상관계수 숫자, 히스토그램을 하나의 도표로 나타내보겠습니다. ## 산포도 행렬(scatter-plot matrix), 상관계수(correlation), 히스토그램(histogram) pairs(airquality_2, lower.panel = panel.lm, # 아래쪽 산포도에 선형 직선 추가 upper.panel = panel.cor, # 위쪽에는 상관계수 숫자 (상관계수에 크기 비례) diag.panel = panel.hist, # 대각선에는 히스토그램 pch=&quot;*&quot;, # 점 모양은 * 로 main = &quot;scatter-plot matrix, correlation coef., histogram&quot; ) 13.8.3.1 그룹별로 점의 색깔 달리하기 보너스로, pairs() 함수를 사용해서 범주(그룹)별로 점의 색깔을 달리하는 방법도 소개하겠습니다. 이 역시 pairs() 함수 도움말(help)에 있는 R script 를 가져왔습니다. 도움말(help)이 정말 도움이 많이 됩니다. ^^ 사용한 데이터는 그 유명한 Iris 데이터가 되겠습니다. # 범주(그룹)을 색깔로 구분하여 산포도 행렬 그리기 pairs(iris[1:4], main = &quot;Anderson&#39;s Iris Data -- 3 species&quot;, pch = 21, bg = c(&quot;red&quot;, &quot;green3&quot;, &quot;blue&quot;)[unclass(iris$Species)]) * R script source : help(pairs) Go Top "],["히트맵.html", "13.9 히트맵", " 13.9 히트맵 x축과 y축으로 나타낸 그래프 혹은 2차원의 지도 위에 특정 연속형 변수의 값에 따라 색깔을 조금씩 다르게 하여 정보를 보여주는 시각화 방법으로 히트맵(Heat map)이 많이 사용됩니다. R ggplot2 패키지에서는 **geom_tile(), geom_raster() 함수를 사용해서 쉽고 편하게 히트맵(Heat map)**을 그릴 수 있습니다. 이번 절에서는 히트맵(Heat map)을 그리고, 축의 항목 위치를 바꾸어 보는 것을 예를 들어보이겠습니다. 아래 보시는 것은 구글에 히트맵(Heat map) 이라는 키워드로 나온 이미지들인데요, 평소에 알게 모르게 히트맵을 우리가 많이 접하고 있었다는 것을 알 수 있을 것입니다. 13.9.1 히드맵의 예 [히트맵 (Heat map) 예시 ] * 이미지 출처 : 구글(www.google.co.kr) 13.9.2 데이터 세트 MASS 패키지에 내장되어 있는 Cars93 데이터 프레임이며, 차종(Type), 실린더(Cylinders) 별 고속도로연비(MPG.highway) 를 사용하여 히트맵(Heat map)을 그려보겠습니다. library(MASS) str(Cars93) ## &#39;data.frame&#39;: 93 obs. of 27 variables: ## $ Manufacturer : Factor w/ 32 levels &quot;Acura&quot;,&quot;Audi&quot;,..: 1 1 2 2 3 4 4 4 4 5 ... ## $ Model : Factor w/ 93 levels &quot;100&quot;,&quot;190E&quot;,&quot;240&quot;,..: 49 56 9 1 6 24 54 74 73 35 ... ## $ Type : Factor w/ 6 levels &quot;Compact&quot;,&quot;Large&quot;,..: 4 3 1 3 3 3 2 2 3 2 ... ## $ Min.Price : num 12.9 29.2 25.9 30.8 23.7 14.2 19.9 22.6 26.3 33 ... ## $ Price : num 15.9 33.9 29.1 37.7 30 15.7 20.8 23.7 26.3 34.7 ... ## $ Max.Price : num 18.8 38.7 32.3 44.6 36.2 17.3 21.7 24.9 26.3 36.3 ... ## $ MPG.city : int 25 18 20 19 22 22 19 16 19 16 ... ## $ MPG.highway : int 31 25 26 26 30 31 28 25 27 25 ... ## $ AirBags : Factor w/ 3 levels &quot;Driver &amp; Passenger&quot;,..: 3 1 2 1 2 2 2 2 2 2 ... ## $ DriveTrain : Factor w/ 3 levels &quot;4WD&quot;,&quot;Front&quot;,..: 2 2 2 2 3 2 2 3 2 2 ... ## $ Cylinders : Factor w/ 6 levels &quot;3&quot;,&quot;4&quot;,&quot;5&quot;,&quot;6&quot;,..: 2 4 4 4 2 2 4 4 4 5 ... ## $ EngineSize : num 1.8 3.2 2.8 2.8 3.5 2.2 3.8 5.7 3.8 4.9 ... ## $ Horsepower : int 140 200 172 172 208 110 170 180 170 200 ... ## $ RPM : int 6300 5500 5500 5500 5700 5200 4800 4000 4800 4100 ... ## $ Rev.per.mile : int 2890 2335 2280 2535 2545 2565 1570 1320 1690 1510 ... ## $ Man.trans.avail : Factor w/ 2 levels &quot;No&quot;,&quot;Yes&quot;: 2 2 2 2 2 1 1 1 1 1 ... ## $ Fuel.tank.capacity: num 13.2 18 16.9 21.1 21.1 16.4 18 23 18.8 18 ... ## $ Passengers : int 5 5 5 6 4 6 6 6 5 6 ... ## $ Length : int 177 195 180 193 186 189 200 216 198 206 ... ## $ Wheelbase : int 102 115 102 106 109 105 111 116 108 114 ... ## $ Width : int 68 71 67 70 69 69 74 78 73 73 ... ## $ Turn.circle : int 37 38 37 37 39 41 42 45 41 43 ... ## $ Rear.seat.room : num 26.5 30 28 31 27 28 30.5 30.5 26.5 35 ... ## $ Luggage.room : int 11 15 14 17 13 16 17 21 14 18 ... ## $ Weight : int 2705 3560 3375 3405 3640 2880 3470 4105 3495 3620 ... ## $ Origin : Factor w/ 2 levels &quot;USA&quot;,&quot;non-USA&quot;: 2 2 2 2 2 1 1 1 1 1 ... ## $ Make : Factor w/ 93 levels &quot;Acura Integra&quot;,..: 1 2 4 3 5 6 7 9 8 10 ... 13.9.3 히트맵 그리기 ggplot2는 별도의 설치 및 호출이 필요하므로 아래의 절차를 먼저 거치고 히트맵을 그려보겠습니다. 13.9.3.1 패키지 설치 library(ggplot2) 13.9.3.2 히트맵 그리기 x축에 차종(Type), y축에 실린더개수(Cylinders)별로 고속도로연비(MPG.highway)에 따라서 색을 달리하여 히트맵을 geom_tile() 함수를 사용해 그려보겠습니다. # Type, Cylinders 별 MPG.highway Heatmap : geom_tile() a1 &lt;- ggplot(Cars93, aes(x=Type, y=Cylinders, fill=MPG.highway)) + geom_tile() a1 13.9.3.3 차의 크기를 고려한 히트맵 위의 히트맵을 보면 x축에 차종(Type)이 차의 크기 순서가 아니라 알파벳 순서로 되어 있다보니 색깔이 경향성이 없이 무작위하게 채워져있어 보입니다. x축을 차의 크기를 감안한 순서대로, 즉, “Small,” “Compact,” “Midsize,” “Sporty,” “Large,” “Van” 의 순서대로 scale_x_discrete(limits=...) 를 사용해 바꾸어보겠습니다. # x축 순서 바꾸기 : scale_x_discrete(limits=...) a2 &lt;- a1 + scale_x_discrete(limits=c(&quot;Small&quot;, &quot;Compact&quot;, &quot;Midsize&quot;, &quot;Sporty&quot;, &quot;Large&quot;, &quot;Van&quot;)) a2 위의 히트맵을 보니 크기가 작을 수록, 실린더 개수가 작을 수록 고속도로 연비가 높으며, 그 반대는 고속도로 연비가 낮아짐을 한눈에 단박에 파악할 수 있게 되었습니다. Go Top 13.9.3.4 geom_raster() 함수를 이용한 히트맵 이번에는 geom_raster() 함수를 사용해 히트맵을 그려보겠습니다. 결과적으로 geom_tile()과 차이가 거의 없다는 것을 알 수 있습니다. # Type, Cylinders 별 MPG.highway Heatmap : geom_raster() ggplot(Cars93, aes(x=Type, y=Cylinders, fill=MPG.highway)) + geom_raster() + scale_x_discrete(limits=c(&quot;Small&quot;, &quot;Compact&quot;, &quot;Midsize&quot;, &quot;Sporty&quot;, &quot;Large&quot;, &quot;Van&quot;)) 13.9.3.5 연속형 숫자 데이터의 히트맵 연속형 숫자형 값을 가지는 히트맵의 색상을 scale_fill_gradient(low = \"colour 1\", high = \"colour 2\") 옵션을 사용해서 다르게 설정해보도록 하겠습니다. (kusscd 님, 댓글로 방법 공유해주셔서 감사합니다 ^^) ggplot(Cars93, aes(x=Type, y=Cylinders, fill=MPG.highway)) + # filling with numeric value geom_tile() + scale_x_discrete(limits = c(&quot;Small&quot;, &quot;Compact&quot;, &quot;Midsize&quot;, &quot;Sporty&quot;, &quot;Large&quot;, &quot;Van&quot;)) + scale_fill_gradient(low = &quot;yellow&quot;, high = &quot;red&quot;) + ggtitle(&quot;Heatmap of MPG.highway by Type &amp; Cylinders&quot;) 13.9.3.6 범주형 문자 데이터의 히트맵 다음으로, 범주형 자료로 히트맵의 색상을 채우는 경우에 scale_fill_manual(values = c(\"colour 1\", \"colour 2\", ...) 을 옵션을 사용해서 색상을 사용자가 직접 지정해주는 방법을 2개 범주를 가지는 간단한 예시를 들어서 설명하겠습니다. my.df &lt;- data.frame(XCoord = c(1, 1, 2, 3, 3, 4, 4, 5, 5, 5), YCoord = c(1, 4, 3, 1, 3, 1, 5, 2, 3, 5), Seg = c(&quot;A&quot;, &quot;A&quot;, &quot;A&quot;, &quot;A&quot;, &quot;B&quot;, &quot;A&quot;, &quot;B&quot;, &quot;B&quot;, &quot;B&quot;, &quot;B&quot;)) ggplot(my.df, aes(x=XCoord, y=YCoord, fill=Seg)) + # filling with categorical value geom_tile(colour=&quot;white&quot;) + scale_fill_manual(values = c(&quot;blue&quot;, &quot;red&quot;)) + ggtitle(&quot;Heatmap with 2 categories with scale_fill_manual()&quot;) Go Top 참고자료 https://rfriend.tistory.com/67?category=605866 https://rfriend.tistory.com/68?category=605866 https://rfriend.tistory.com/93?category=605866 https://rfriend.tistory.com/69 https://rfriend.tistory.com/81?category=605866 https://rfriend.tistory.com/70?category=605866 https://rfriend.tistory.com/71 https://rfriend.tistory.com/72?category=605866 https://rfriend.tistory.com/84?category=605866 https://rfriend.tistory.com/85?category=605866 https://rfriend.tistory.com/92?category=605866 https://rfriend.tistory.com/86?category=605866 https://rfriend.tistory.com/87?category=605866 https://rfriend.tistory.com/88?category=605866 https://rfriend.tistory.com/73?category=605866 https://rfriend.tistory.com/74?category=605866 https://rfriend.tistory.com/75?category=605866 https://rfriend.tistory.com/76?category=605866 https://rfriend.tistory.com/82?category=605866 https://rfriend.tistory.com/83?category=605866 https://rfriend.tistory.com/94?category=605866 https://rfriend.tistory.com/485 "],["개-이상-변수의-다변량-그래프.html", "14 3개 이상 변수의 다변량 그래프", " 14 3개 이상 변수의 다변량 그래프 실전 업무에서는 다변량 데이터(multivariate data set)를 사용하는 경우가 다반사입니다. 그리고 분석업무 초반에 탐색적 분석을 수행할 때 시각화를 통해 변수들 간의 관계, 패턴을 탐색하는 분석 기법이 굉장히 유용합니다. 하지만 다변량 데이터 중에서도 특히 3개 이상의 변수를 가지는 다변량 데이터의 경우 그동안 소개해드렸던 히스토그램, 막대그림, 박스 그림, 산포도, 선그림/시계열 그림 등을 활용해서 2차원 평면에 나타낼 수 없는 한계가 있습니다. (물론, 색깔이라든지 모양을 데이터 그룹 별로 달리하면 3차원, 4차원의 정보를 시각화할 수 있기는 합니다만…) 변수 3개 이상의 다변량 데이터를 2차원 평면에 효과적으로 시각화할 수 있는 방법으로 레이더 차트 (radar chart) or 거미줄 그림(spider plot) 별 그래프 (레이더 차트와 유사, 중심점 다름) 평행 좌표 그림 (parallel coordinate plot) [3차원 산포도 (3 dimensional scatter plot)] [체르노프 얼굴그림 (Chernoff faces)] [산포도 행렬(scatter plot matrix)] [모자이크 그림(mosaic plot)] "],["레이더-차트radar-chart-or-거미줄-그림spider-plot.html", "14.1 레이더 차트(radar chart), or 거미줄 그림(spider plot)", " 14.1 레이더 차트(radar chart), or 거미줄 그림(spider plot) 이번 포스팅에서는 (1) 레이더 차트 (radar chart)에 대해서 소개하겠습니다. 방사형의 레이더 차트가 마치 거미줄을 닮아서 거미줄 그림 (spider plot)이라고도 부릅니다. 별 그림 (star plot) 도 레이더 차트와 형태는 거의 유사한데요, 약간 현태가 다른 점이 있고 stars 라는 R 패키지가 별도로 있고 해서 다음번에 따로 설명을 드리겠습니다. 14.1.1 데이터 세트 R 실습에 사용할 데이터는 MASS 패키지에 내장되어 있는 Cars93 데이터프레임입니다. 분석 대상 변수로는 차 유형(Type), 가격(Price), 고속도로연비(MPG.highway), 마력(Horsepower), 분당회전수RPM(RPM), 길이(Length), 무게(Weight) 등의 7개 변수입니다. library(MASS) str(Cars93) ## &#39;data.frame&#39;: 93 obs. of 27 variables: ## $ Manufacturer : Factor w/ 32 levels &quot;Acura&quot;,&quot;Audi&quot;,..: 1 1 2 2 3 4 4 4 4 5 ... ## $ Model : Factor w/ 93 levels &quot;100&quot;,&quot;190E&quot;,&quot;240&quot;,..: 49 56 9 1 6 24 54 74 73 35 ... ## $ Type : Factor w/ 6 levels &quot;Compact&quot;,&quot;Large&quot;,..: 4 3 1 3 3 3 2 2 3 2 ... ## $ Min.Price : num 12.9 29.2 25.9 30.8 23.7 14.2 19.9 22.6 26.3 33 ... ## $ Price : num 15.9 33.9 29.1 37.7 30 15.7 20.8 23.7 26.3 34.7 ... ## $ Max.Price : num 18.8 38.7 32.3 44.6 36.2 17.3 21.7 24.9 26.3 36.3 ... ## $ MPG.city : int 25 18 20 19 22 22 19 16 19 16 ... ## $ MPG.highway : int 31 25 26 26 30 31 28 25 27 25 ... ## $ AirBags : Factor w/ 3 levels &quot;Driver &amp; Passenger&quot;,..: 3 1 2 1 2 2 2 2 2 2 ... ## $ DriveTrain : Factor w/ 3 levels &quot;4WD&quot;,&quot;Front&quot;,..: 2 2 2 2 3 2 2 3 2 2 ... ## $ Cylinders : Factor w/ 6 levels &quot;3&quot;,&quot;4&quot;,&quot;5&quot;,&quot;6&quot;,..: 2 4 4 4 2 2 4 4 4 5 ... ## $ EngineSize : num 1.8 3.2 2.8 2.8 3.5 2.2 3.8 5.7 3.8 4.9 ... ## $ Horsepower : int 140 200 172 172 208 110 170 180 170 200 ... ## $ RPM : int 6300 5500 5500 5500 5700 5200 4800 4000 4800 4100 ... ## $ Rev.per.mile : int 2890 2335 2280 2535 2545 2565 1570 1320 1690 1510 ... ## $ Man.trans.avail : Factor w/ 2 levels &quot;No&quot;,&quot;Yes&quot;: 2 2 2 2 2 1 1 1 1 1 ... ## $ Fuel.tank.capacity: num 13.2 18 16.9 21.1 21.1 16.4 18 23 18.8 18 ... ## $ Passengers : int 5 5 5 6 4 6 6 6 5 6 ... ## $ Length : int 177 195 180 193 186 189 200 216 198 206 ... ## $ Wheelbase : int 102 115 102 106 109 105 111 116 108 114 ... ## $ Width : int 68 71 67 70 69 69 74 78 73 73 ... ## $ Turn.circle : int 37 38 37 37 39 41 42 45 41 43 ... ## $ Rear.seat.room : num 26.5 30 28 31 27 28 30.5 30.5 26.5 35 ... ## $ Luggage.room : int 11 15 14 17 13 16 17 21 14 18 ... ## $ Weight : int 2705 3560 3375 3405 3640 2880 3470 4105 3495 3620 ... ## $ Origin : Factor w/ 2 levels &quot;USA&quot;,&quot;non-USA&quot;: 2 2 2 2 2 1 1 1 1 1 ... ## $ Make : Factor w/ 93 levels &quot;Acura Integra&quot;,..: 1 2 4 3 5 6 7 9 8 10 ... 14.1.2 데이터 전처리 14.1.2.1 차 유형별 분할표 작성 먼저 table() 함수를 사용하여 차 유형별 분할표를 만들어보았습니다. 6종류의 차 유형별로 10~20여대씩 분포하고 있음을 알 수 있습니다. # cross tabulation by car type table(Cars93$Type) ## ## Compact Large Midsize Small Sporty Van ## 16 11 22 21 14 9 14.1.2.2 차 유형별 평균 구하기 다음으로, 차 유형(Type)별로 가격(Price), 고속도로연비(MPG.highway), 마력(Housepower), 분당회전수RPM(RPM), 길이(Length), 무게(Weight) 등 6개 변수별 평균(mean)을 구해보겠습니다. doBy package 의 summaryBy() 함수를 사용하면 연속형변수의 다변량 데이터에 일괄적으로 요약통계량을 편리하게 계산할 수 있습니다. Base package가 아니므로 install.packages(\"doBy\")로 설치하시고, library(doBy)로 호출한 후에 summaryBy() 함수의 FUN = c(mean, min, max, sd, ...) 처럼 원하는 통계량 함수를 입력하면 됩니다. 이번에는 평균만 사용할 것이므로 아래 예에서는 FUN = c(mean) 만 입력하였습니다. # mean of multivariates by Car Type # install.packages(&quot;doBy&quot;) library(doBy) ## ## Attaching package: &#39;doBy&#39; ## The following object is masked from &#39;package:dplyr&#39;: ## ## order_by mean_by_Type &lt;- summaryBy(MPG.highway + RPM + Horsepower + Weight + Length + Price ~ Type, data=Cars93, FUN = c(mean)) mean_by_Type ## Type MPG.highway.mean RPM.mean Horsepower.mean Weight.mean Length.mean ## 1 Compact 30 5362 131 2918 182 ## 2 Large 27 4673 179 3695 205 ## 3 Midsize 27 5336 173 3400 193 ## 4 Small 35 5633 91 2313 167 ## 5 Sporty 29 5393 160 2900 175 ## 6 Van 22 4744 149 3831 186 ## Price.mean ## 1 18 ## 2 24 ## 3 27 ## 4 10 ## 5 19 ## 6 19 14.1.3 레이더 차트 그리기 14.1.3.1 패키지 설치 다음으로, 레이더 차트(radar chart)를 그리려면 fmsb Package 를 사용합니다. install.packages(\"fmsb\")로 설치하고, library(fmsb)로 호출해보겠습니다. # install.packages(&quot;fmsb&quot;) library(fmsb) ## ## Attaching package: &#39;fmsb&#39; ## The following object is masked from &#39;package:vcd&#39;: ## ## oddsratio 14.1.3.2 radarchart() 함수 fmsb Package의 radarchart() 함수를 사용하기 위한 데이터 형태는 데이터 구조는 Dataframe 첫번째 행(1st row)에 최대값(max value) 두번째 행(2nd row)에 최소값(min value) 세번째 행부터는 원래의 관측값 이 오도록 데이터를 전처리해주어야 합니다. 14.1.3.3 radrchart() 함수를 사용하기 위한 데이터 준비 [ fmsb Package의 radrchart() 함수 사용하기 위한 데이터 준비 ] 14.1.3.3.1 사용자 정의 함수 만들기 R 사용자정의함수로 첫번째 행에 최대값, 두번째 행에 최소값이 오도록 하여 Dataframe으로 묶는 명령어는 아래와 같습니다. # manipulating dataset for radar chart # data frame includes possible maximum values as row 1 # and possible minimum values as row 2 df_radarchart &lt;- function(df) { df &lt;- data.frame(df) dfmax &lt;- apply(df, 2, max) dfmin &lt;- apply(df, 2, min) as.data.frame(rbind(dfmax, dfmin, df)) } 14.1.3.3.2 변수의 표준화 사용자정의함수에 더하여 scale() 함수를 사용해서 6개의 변수를 표준화 하였습니다. # maximum value as row 1, minimum value as row 2 : user-defined function df_radarchart # standardization : scale() mean_by_Type_scale &lt;- df_radarchart(scale(mean_by_Type[,c(2:7)])) mean_by_Type_scale ## MPG.highway.mean RPM.mean Horsepower.mean Weight.mean Length.mean Price.mean ## 1 1.61 1.14 0.986 1.14 1.533 1.279 ## 2 -1.42 -1.33 -1.730 -1.51 -1.319 -1.634 ## 11 0.36 0.44 -0.502 -0.45 -0.187 -0.260 ## 21 -0.34 -1.33 0.986 0.91 1.533 0.781 ## 3 -0.34 0.38 0.790 0.39 0.603 1.279 ## 4 1.61 1.14 -1.730 -1.51 -1.319 -1.634 ## 5 0.12 0.52 0.393 -0.48 -0.711 -0.058 ## 6 -1.42 -1.15 0.064 1.14 0.081 -0.108 14.1.3.4 레이더 차트 그리기 드디어 radarchart() 함수를 사용해서 레이더 차트를 그려보겠습니다. 각 옵션에 대한 기능은 아래 R 명령어에 부가설명을 달아놓았습니다. 범례는 legend() 함수를 사용해서 왼쪽 상단에 추가하였습니다. # radar chart (or spider plot) radarchart(df = mean_by_Type_scale, # The data frame to be used to draw radarchart seg = 6, # The number of segments for each axis pty = 16, # A vector to specify point symbol: Default 16 (closed circle) pcol = 1:6, # A vector of color codes for plot data plty = 1:6, # A vector of line types for plot data plwd = 2, # A vector of line widths for plot data title = c(&quot;radar chart by Car Types&quot;) # putting title at the top-middle ) # adding legend legend(&quot;topleft&quot;, legend = mean_by_Type$Type, col = c(1:6), lty = c(1:6), lwd = 2) 선의 형태(plty)나 선의 색깔(pcol)을 프로그래밍 편하라고 1:6 이라고 했는데요, 원하는 선 모양이나 색깔을 순서대로 지정할 수 있습니다. 다음번 포스팅에서는 별 그림(star graph)에 대해서 알아보겠습니다. "],["별-그래프.html", "14.2 별 그래프", " 14.2 별 그래프 이번 포스팅에서는 (2) 별 그래프 (star graph)에 대해서 소개하겠습니다. graphics Package의 stars() 함수를 사용하겠습니다. graphics Package는 base Package로서 R 설치할 때 기본으로 설치되므로 stars() 함수를 사용하기 위해 추가로 별도 패키지 설치는 필요하지 않습니다. stars() 함수는 dataframe 이나 matrix 형태의 데이터셋을 사용합니다. scale = TRUE 옵션을 사용하면 (minimum value) 0 ~ (maximum value) 1 사이의 값으로 다변량 변수들의 값을 표준화해줍니다. 별 그래프(star graph)의 기본 원리는 중심점(center point)으로 부터 각 관측치별/ 각 변수별로 거리(distance) 혹은 반지름(radius)이 얼마나 떨어져있는가를 시각화한 것입니다. 14.2.1 데이터 세트 실습을 위해서 MASS Package에 내장된 Cars93 dataframe을 사용하겠습니다. 이전 포스팅 레이더 차트(radar chart) 와 비교하기 쉽도록 이번에도 차종(Type), 가격(Price), 고속도로연비(MPG.highway), 마력(Horsepower), 분당회전수(RPM), 길이(Length), 무게(Weight) 의 7개 변수를 똑같이 사용하겠습니다. library(MASS) str(Cars93) ## &#39;data.frame&#39;: 93 obs. of 27 variables: ## $ Manufacturer : Factor w/ 32 levels &quot;Acura&quot;,&quot;Audi&quot;,..: 1 1 2 2 3 4 4 4 4 5 ... ## $ Model : Factor w/ 93 levels &quot;100&quot;,&quot;190E&quot;,&quot;240&quot;,..: 49 56 9 1 6 24 54 74 73 35 ... ## $ Type : Factor w/ 6 levels &quot;Compact&quot;,&quot;Large&quot;,..: 4 3 1 3 3 3 2 2 3 2 ... ## $ Min.Price : num 12.9 29.2 25.9 30.8 23.7 14.2 19.9 22.6 26.3 33 ... ## $ Price : num 15.9 33.9 29.1 37.7 30 15.7 20.8 23.7 26.3 34.7 ... ## $ Max.Price : num 18.8 38.7 32.3 44.6 36.2 17.3 21.7 24.9 26.3 36.3 ... ## $ MPG.city : int 25 18 20 19 22 22 19 16 19 16 ... ## $ MPG.highway : int 31 25 26 26 30 31 28 25 27 25 ... ## $ AirBags : Factor w/ 3 levels &quot;Driver &amp; Passenger&quot;,..: 3 1 2 1 2 2 2 2 2 2 ... ## $ DriveTrain : Factor w/ 3 levels &quot;4WD&quot;,&quot;Front&quot;,..: 2 2 2 2 3 2 2 3 2 2 ... ## $ Cylinders : Factor w/ 6 levels &quot;3&quot;,&quot;4&quot;,&quot;5&quot;,&quot;6&quot;,..: 2 4 4 4 2 2 4 4 4 5 ... ## $ EngineSize : num 1.8 3.2 2.8 2.8 3.5 2.2 3.8 5.7 3.8 4.9 ... ## $ Horsepower : int 140 200 172 172 208 110 170 180 170 200 ... ## $ RPM : int 6300 5500 5500 5500 5700 5200 4800 4000 4800 4100 ... ## $ Rev.per.mile : int 2890 2335 2280 2535 2545 2565 1570 1320 1690 1510 ... ## $ Man.trans.avail : Factor w/ 2 levels &quot;No&quot;,&quot;Yes&quot;: 2 2 2 2 2 1 1 1 1 1 ... ## $ Fuel.tank.capacity: num 13.2 18 16.9 21.1 21.1 16.4 18 23 18.8 18 ... ## $ Passengers : int 5 5 5 6 4 6 6 6 5 6 ... ## $ Length : int 177 195 180 193 186 189 200 216 198 206 ... ## $ Wheelbase : int 102 115 102 106 109 105 111 116 108 114 ... ## $ Width : int 68 71 67 70 69 69 74 78 73 73 ... ## $ Turn.circle : int 37 38 37 37 39 41 42 45 41 43 ... ## $ Rear.seat.room : num 26.5 30 28 31 27 28 30.5 30.5 26.5 35 ... ## $ Luggage.room : int 11 15 14 17 13 16 17 21 14 18 ... ## $ Weight : int 2705 3560 3375 3405 3640 2880 3470 4105 3495 3620 ... ## $ Origin : Factor w/ 2 levels &quot;USA&quot;,&quot;non-USA&quot;: 2 2 2 2 2 1 1 1 1 1 ... ## $ Make : Factor w/ 93 levels &quot;Acura Integra&quot;,..: 1 2 4 3 5 6 7 9 8 10 ... 14.2.2 데이터 처리 14.2.2.1 요약 통계량 구하기 93개의 차량 관측치가 있는데요, 이것을 6개의 차종(Type)을 기준으로 평균 통계량으로 요약한 후에, 차종별로 6개의 평균치 다변량 변수를 가지고 별 그래프를 그려보겠습니다. # cross tabulation by Car Type table(Cars93$Type) ## ## Compact Large Midsize Small Sporty Van ## 16 11 22 21 14 9 # mean of multivariates by Car Type # install.packages(&quot;doBy&quot;) library(doBy) mean_by_Type &lt;- summaryBy(MPG.highway + RPM + Horsepower + Weight + Length + Price ~ Type, data=Cars93, FUN = c(mean)) mean_by_Type ## Type MPG.highway.mean RPM.mean Horsepower.mean Weight.mean Length.mean ## 1 Compact 30 5362 131 2918 182 ## 2 Large 27 4673 179 3695 205 ## 3 Midsize 27 5336 173 3400 193 ## 4 Small 35 5633 91 2313 167 ## 5 Sporty 29 5393 160 2900 175 ## 6 Van 22 4744 149 3831 186 ## Price.mean ## 1 18 ## 2 24 ## 3 27 ## 4 10 ## 5 19 ## 6 19 14.2.2.2 라벨링하기 stars() 함수에서는rownames 를 가져다가 labeling 을 합니다. 현재 rownames 는 1, 2,…, 6 의 숫자로 되어있으므로, 이를 차종(Type) 이름으로 변경하도록 하겠습니다. # creating row names with Type rownames(mean_by_Type) &lt;- mean_by_Type$Type mean_by_Type ## Type MPG.highway.mean RPM.mean Horsepower.mean Weight.mean ## Compact Compact 30 5362 131 2918 ## Large Large 27 4673 179 3695 ## Midsize Midsize 27 5336 173 3400 ## Small Small 35 5633 91 2313 ## Sporty Sporty 29 5393 160 2900 ## Van Van 22 4744 149 3831 ## Length.mean Price.mean ## Compact 182 18 ## Large 205 24 ## Midsize 193 27 ## Small 167 10 ## Sporty 175 19 ## Van 186 19 위에서 rownames() 로 뭐가 바뀌었나 잘 모를수도 있는데요, 아래에 화면 캡쳐한 그래프를 참고하시기 바랍니다. 제일 왼쪽에 rowname 이 숫자에서 차종(Type)으로 바뀐게 보이지요? 14.2.2.3 변수명 바꾸기 doBy Package로 요약통계량을 생성하면 변수명 뒤에 자동으로 통계량 이름이 따라 붙습니다. 이번 예제의 경우에는 평균을 구했으므로 MPG.highway.mean, RPM.mean, … 이런 식으로요. 변수명이 너무 길다보니 나중에 labeling 할 때 옆으로 삐죽 튀어나가서 보기 싫어서요, 변수명을 좀더 짧게 변경해보겠습니다. 변수명 뒤에 .mean 을 생략하고 사용하겠습니다. 위에 rownames() 함수는 stars() 함수를 사용하려면 꼭 해줘야 하는 것이구요, 아래의 renames()는 필수사항은 아닙니다. # renaming of variables library(reshape) mean_by_Type &lt;- rename(mean_by_Type, c(MPG.highway.mean = &quot;MPG.highway&quot;, RPM.mean = &quot;RPM&quot;, Horsepower.mean = &quot;Horsepower&quot;, Weight.mean = &quot;Weight&quot;, Length.mean = &quot;Length&quot;, Price.mean = &quot;Price&quot; ) ) mean_by_Type ## Type MPG.highway RPM Horsepower Weight Length Price ## Compact Compact 30 5362 131 2918 182 18 ## Large Large 27 4673 179 3695 205 24 ## Midsize Midsize 27 5336 173 3400 193 27 ## Small Small 35 5633 91 2313 167 10 ## Sporty Sporty 29 5393 160 2900 175 19 ## Van Van 22 4744 149 3831 186 19 14.2.3 별 그래프 그리기 이제 드디어 데이터셋이 준비가 되었습니다. stars() 함수를 사용해서 별 그래프를 그려보겠습니다. 14.2.3.1 stars() 함수의 형식 stars(x, …) 의 x 자리에는 dataframe 이나 matrix 형태의 다변량 데이터셋 이름을 입력하면 됩니다. locations = NULL, nrow = 2, ncol = 4 옵션은 행이 2줄, 열이 4줄인 square layout 으로 배열하라는 뜻입니다. scale = TRUE 는 변수별로 단위(scale)가 달라서 들쭉날쭉한 값들을 변수별로 모두 최소값 0 ~ 최대값 1 사이로 변수별 값들을 표준화(standardization) 합니다. full = TRUE 로 지정하면 360도의 전체 원으로 그래프를 그립니다. full = FALSE 로 지정하면 1180도짜리 반원(semi-circle)으로 그래프가 그려집니다. radius = TRUE 로 지정하면 반지름 선이 그려집니다. 만약 radius = FALSE 로 하면 반지름 선이 안그려지는데요, 보기에 좀 휑~합니다. ^^’ frame.plot = TRUE 로 하면 그래프의 외곽에 네모 박스 선으로 테두리가 쳐집니다. main 은 제목을 입력하는 옵션입니다. sub 는 부제목 입력하는 옵션이구요. cex 는 글자 크기 지정하는 옵션인데요, default 가 1이고 숫자가 커질 수록 글자 크기가 커집니다. lwd 는 선 두께 (line width) 지정하는 옵션입니다. default 가 1이며, 숫자가 커질 수록 선이 두꺼워집니다. key.loc = c(7.5, 1.5) 는 x, y 좌표 위치에 각 변수들의 이름(unit key)을 범례로 집어넣습니다. 말로 설명해놓긴 했는데요, 잘 이해가 안갈수도 있겠습니다. 아래에 stars() 함수를 복사해놓고서 옵션마다 하나씩 ‘#’을 붙여가면서 실행을 해보시기 바랍니다. 그러면’#’을 붙이기 전과 비교가 될테고, 옵션별 기능을 바로 확인할 수 있습니다. # star plot stars(mean_by_Type[, 2:7], # dataframe or matrix locations = NULL, # locations = NULL, the segment plots will be placed in a rectangular grid nrow = 2, # number of rows at a square layout (w/locations = NULL) ncol = 4, # number of columns at a square layout (w/locations = NULL) scale = TRUE, # the columns are scaled independently (max in each column: 1, min: 0) full = TRUE, # TRUE: occupy a full circle, FALSE : semi-circle radius = TRUE, # the radii corresponding to each variable in the data will be drawn frame.plot = TRUE, # if TRUE, the plot region is framed main = &quot;Star plot - means of multivariate by Car Type&quot;, # a main title for the plot cex = 1, # size of label character (by default, cex = 1) # labels = NULL # if NULL, no attempt is made to construct labels lwd = 1, # line width (by default, lwd = 1) key.loc = c(7.5, 1.5) # vector with x and y coordinates of the unit key ) 14.2.3.2 stars() 함수로 레이터 차트 그리기 이전 포스팅에서 소개했던 레이더 차트 or 거미줄 그림(radar chart, or spider plot)도 stars() 함수로 그릴 수 있습니다. 별 그래프(star plot)이 개별 관측치마다 location을 부여하여 하나씩 다변량 그래프를 그린 것이라면, 레이더 차트(radar chart) or 거미줄 그림(spider plot)은 하나의 공통된 location을 중심점으로 하여 관측치들을 중첩하여 그린 다변량 그래프입니다. locations = c(0, 0)으로 중심점을 한개로 통일하였고, key.loc = c(0, 0) 으로 똑 같이 지정해주어서 이 중심점 좌표를 기준으로 변수명을 labeling 할 수 있게 하였습니다. radius = FALSE 로 바꾸어서 반지름 선은 표시하지 않게끔 하였습니다. 6개 차종(Type)의 그래프가 중첩이 되다 보니 radius = TRUE 로 했더니 선이 겹쳐서 아예 안보이는게 있어서요. 관측치들의 다변량 변수 간에 존재하는 패턴에 대해서 관심이 있는 분석가라면 아무래도 그룹별로 선 색깔을 달리하여 그린 레이더 차트 (or 거미줄 그림)가 별 그래프(star chart)보다는 좀더 유용한 편입니다. col.lines = c(1:6) 옵션으로 6개 차종(Type)별 색깔을 구분하였습니다. 범례(legend)는 legend(x= , y= , ...) 함수로 추가를 하였습니다. x, y 좌표는 몇 번 숫자를 넣어보고 시행착오를 거치면서 적당한 좌표를 찾아나가야 합니다. “topright,” “topleft” 이런 식으로 범례 좌표를 지정했더니 레이더 차트랑 자꾸 겹쳐서요. ^^; # radar chart (or spider chart) stars(mean_by_Type[, 2:7], locations = c(0, 0), key.loc = c(0, 0), scale = TRUE, radius = FALSE, cex = 1, lty = 2, col.lines = c(1:6), lwd = 2, main = &quot;radar chart - means of multivariate by Car Type&quot; ) legend(x=1, y=1, legend = mean_by_Type$Type, lty = 2, col = c(1:6), lwd = 2) 위에 stars() 함수로 레이더 차트를 그리기는 했는데요, 이전 포스팅에서 fmsb Package의 radarchart() 함수로 그린 radar chart 보다는 가독성이 좀 떨어져보입니다. 여러 개의 그룹을 레이더 차트 (radar chart)로 보려면 fmsb Package의 radarchart() 함수를 사용하고, 개별 그룹 단위로 분리해서 보려면 graphics Package의 stars() 함수로 별 그림 (star plot)을 그려서 보면 좋을 것 같습니다. 다음 번에는 평행 좌표 그림 (parallel coordinate plot)에 대해서 알아보겠습니다. 14.2.4 나이팅게일 차트 14.2.4.1 나이팅 게일 차트 소개 나이팅 게일의 사망원인 도표 이번 포스팅에서는 비주얼라이즈디스에서 제공하는 데이터를 가지고 스타차트, 나이팅게일 차트를 만드는 과정을 살펴보겠습니다. 먼저 R-Studio를 실행하고, 데이터를 불러오는 것으로 시작합니다. 14.2.4.2 데이터 불러오기 crime &lt;- read.csv(&quot;http://datasets.flowingdata.com/crimeRatesByState-formatted.csv&quot;) 이렇게 R-studio에서 데이터를 확인 할 수 있습니다. 14.2.4.3 데이터 전처리 다음으로는 스타차트 명령어를 사용하기 전에, 데이터를 다듬는 과정입니다. 불러온 데이터를 살펴보면 이렇게 첫 번째 열이 주의 이름이 아니라, 숫자로 설정되어 있습니다. 이를 주 이름으로 변경하도록 하겠습니다. row.names(crime) &lt;- crime$state crime &lt;- crime[,2:7] 이렇게 첫 번째 열이 원하던 대로 주 이름으로 변경되었습니다. 14.2.4.4 stars() 함수로 차트 그리기 이제 스타차트를 생성하는 명령어를 입력해봅니다. stars(crime) 스타차트의 모양새를 갖추긴 했지만, 뭔가 균형도 안맞고 복잡해 보입니다. 이를 조정하기 위해 flip.labels변수를 조정해 줍니다. stars(crime, flip.labels=FALSE) flip.labels설정을 기본값인 TRUE에서 FALSE로 변경한 결과입니다. 이전보다 확실이 안정된 느낌입니다. 그리고 key.loc=c(6, 2)를 지정해 준다. stars(crime, flip.labels=FALSE, key.loc=c(6, 2)) 그 다음 이 스타차트를 절반만 사용해서 표시하는 방법으로 full = FALSE를 지정해 준다. stars(crime, flip.labels=FALSE, key.loc=c(6, 2), full=FALSE) 이처럼 이전 명령어에서 ’full’을 FALSE로 설정해 주면 됩니다. 실행하면 plot창에서 확인 하실 수 있습니다. 그리고 그 다음으로 살펴볼 것은 ’나이팅게일 차트’입니다. 14.2.4.5 나이팅 게일 차트 그리기 지금까지 사용한 명령어에서 다른 부분을 추가하면 나이팅게일차트로 표현이 가능합니다. stars(crime, flip.labels=FALSE, key.loc=c(6, 2), draw.segments=TRUE) draw.segments 부분을 TRUE로 설정해주면 이렇게 알록달록 나이팅게일차트를 얻을 수 있습니다.^^ 만들어진 차트를 일러스트레이터를 이용해서 보정해보면 좋은 결과가 있을 것 같습니다^^. "],["평행-좌표-그림-parallel-coordinate-plot.html", "14.3 평행 좌표 그림 (parallel coordinate plot)", " 14.3 평행 좌표 그림 (parallel coordinate plot) 이번 절에서는 (3) 평행 좌표 그림 (parallel coordinate plot)에 대해서 소개하겠습니다. 14.3.1 데이터 세트 MASS Package의 parcoord() 함수를 사용하겠으며, 예제 데이터 역시 MASS Package에 내장된 Cars93 데이터 프레임의 차종(Type)별로 선모양(line type)과 색깔(color)을 달리하여 가격(Price), 고속도로연비(MPG.highway), 마력(Horsepower), 분당회전수(RPM), 길이(Length), 무게(Weight) 변수를 가지고 그래프를 그려보겠습니다. ##-------------------------------------- ## parallel coordinate plot ##-------------------------------------- library(MASS) str(Cars93) ## &#39;data.frame&#39;: 93 obs. of 27 variables: ## $ Manufacturer : Factor w/ 32 levels &quot;Acura&quot;,&quot;Audi&quot;,..: 1 1 2 2 3 4 4 4 4 5 ... ## $ Model : Factor w/ 93 levels &quot;100&quot;,&quot;190E&quot;,&quot;240&quot;,..: 49 56 9 1 6 24 54 74 73 35 ... ## $ Type : Factor w/ 6 levels &quot;Compact&quot;,&quot;Large&quot;,..: 4 3 1 3 3 3 2 2 3 2 ... ## $ Min.Price : num 12.9 29.2 25.9 30.8 23.7 14.2 19.9 22.6 26.3 33 ... ## $ Price : num 15.9 33.9 29.1 37.7 30 15.7 20.8 23.7 26.3 34.7 ... ## $ Max.Price : num 18.8 38.7 32.3 44.6 36.2 17.3 21.7 24.9 26.3 36.3 ... ## $ MPG.city : int 25 18 20 19 22 22 19 16 19 16 ... ## $ MPG.highway : int 31 25 26 26 30 31 28 25 27 25 ... ## $ AirBags : Factor w/ 3 levels &quot;Driver &amp; Passenger&quot;,..: 3 1 2 1 2 2 2 2 2 2 ... ## $ DriveTrain : Factor w/ 3 levels &quot;4WD&quot;,&quot;Front&quot;,..: 2 2 2 2 3 2 2 3 2 2 ... ## $ Cylinders : Factor w/ 6 levels &quot;3&quot;,&quot;4&quot;,&quot;5&quot;,&quot;6&quot;,..: 2 4 4 4 2 2 4 4 4 5 ... ## $ EngineSize : num 1.8 3.2 2.8 2.8 3.5 2.2 3.8 5.7 3.8 4.9 ... ## $ Horsepower : int 140 200 172 172 208 110 170 180 170 200 ... ## $ RPM : int 6300 5500 5500 5500 5700 5200 4800 4000 4800 4100 ... ## $ Rev.per.mile : int 2890 2335 2280 2535 2545 2565 1570 1320 1690 1510 ... ## $ Man.trans.avail : Factor w/ 2 levels &quot;No&quot;,&quot;Yes&quot;: 2 2 2 2 2 1 1 1 1 1 ... ## $ Fuel.tank.capacity: num 13.2 18 16.9 21.1 21.1 16.4 18 23 18.8 18 ... ## $ Passengers : int 5 5 5 6 4 6 6 6 5 6 ... ## $ Length : int 177 195 180 193 186 189 200 216 198 206 ... ## $ Wheelbase : int 102 115 102 106 109 105 111 116 108 114 ... ## $ Width : int 68 71 67 70 69 69 74 78 73 73 ... ## $ Turn.circle : int 37 38 37 37 39 41 42 45 41 43 ... ## $ Rear.seat.room : num 26.5 30 28 31 27 28 30.5 30.5 26.5 35 ... ## $ Luggage.room : int 11 15 14 17 13 16 17 21 14 18 ... ## $ Weight : int 2705 3560 3375 3405 3640 2880 3470 4105 3495 3620 ... ## $ Origin : Factor w/ 2 levels &quot;USA&quot;,&quot;non-USA&quot;: 2 2 2 2 2 1 1 1 1 1 ... ## $ Make : Factor w/ 93 levels &quot;Acura Integra&quot;,..: 1 2 4 3 5 6 7 9 8 10 ... 14.3.2 데이터 전처리 차종(Type)별로 선 모양(lty)과 선 색깔(col)을 다르게 하기 위해서 데이터 전처리를 해보겠습니다. 차종이 현재는 “Compact,” “Large” 등과 같이 character 로 되어있는데요, 1, 2, …, 6 의 numeric 으로 변환하겠습니다. # making Type_number variable to put line type and color by Car Type Cars93_1 &lt;- transform(Cars93, Type_no = ifelse(Type == &quot;Compact&quot;, 1, ifelse(Type == &quot;Large&quot;, 2, ifelse(Type == &quot;Midsize&quot;, 3, ifelse(Type == &quot;Small&quot;, 4, ifelse(Type == &quot;Sporty&quot;, 5, 6))))) ) # checking top 10 observations head(Cars93_1[,c(&quot;Type&quot;, &quot;Type_no&quot;)], n=10) ## Type Type_no ## 1 Small 4 ## 2 Midsize 3 ## 3 Compact 1 ## 4 Midsize 3 ## 5 Midsize 3 ## 6 Midsize 3 ## 7 Large 2 ## 8 Large 2 ## 9 Midsize 3 ## 10 Large 2 14.3.3 평행 좌표 그림 그리기 이제 준비가 되었네요. MASS Package의 parcoord() 함수를 사용해서 평행 좌표 그림(parallel coordinate plot)을 그려보겠습니다. Cars93_1[, c(\"MPG.highway\", \"RPM\", \"Horsepower\", \"Weight\", \"Length\", \"Price\")] 은 평행좌표그림을 그릴 대상 변수만 선별해 오는 명령문입니다. 위에서 Cars93_1 이라는 새로운 데이터 프레임에 Type_no 라는 numeric 변수를 만들었는데요, 선 유형(lty, line type)과 색깔(col, color)를 Cars93_1$Type_no 로 지정을 해줘서 차종(Type)에 따라서 선 유형과 색깔이 달라지게 했습니다. var.label = TRUE 옵션을 설정하면 각 변수별로 minimum value, maximum value 가 하단과 상단에 표기됩니다. main = \"parallel coordinate plot of Cars93 by Type\" 옵션은 그래프에 제목 넣을 때 사용합니다. 아래 그래프 상단 우측에 범례가 들어가 있는데요, legend() 함수를 사용해서 추가한 것입니다. # parallel coordinate plot library(MASS) parcoord(Cars93_1[, c(&quot;MPG.highway&quot;, &quot;RPM&quot;, &quot;Horsepower&quot;, &quot;Weight&quot;, &quot;Length&quot;, &quot;Price&quot;)], lty = Cars93_1$Type_no, col = Cars93_1$Type_no, var.label = TRUE, main = &quot;parallel coordinate plot of Cars93 by Type&quot;) # putting legend legend(&quot;topright&quot;, legend = c(&quot;Compact&quot;, &quot;Large&quot;, &quot;Midsize&quot;, &quot;Small&quot;, &quot;Sporty&quot;, &quot;Van&quot;), lty = c(1:6), col = c(1:6), lwd = 2, # line width cex = 0.7) # character size 다음번 포스팅에서는 3차원 산포도 (3 dimensional scatter plot)에 대해서 소개하도록 하겠습니다. "],["차원-산포도-3-dimensional-scatter-plot-scatterplot3d.html", "14.4 3차원 산포도 (3 dimensional scatter plot) : scatterplot3d()", " 14.4 3차원 산포도 (3 dimensional scatter plot) : scatterplot3d() 이번 포스팅에서는 (4) 3차원 산포도 (3 dimensional scatter plot)에 대해서 소개하겠습니다. 3차원 그래프를 그릴 수 있는 Package가 여러개 있는데요, 그 중에서도 3차원 scatter plot에 특화된 scatterplot3d Package 의 scatterplot3d() 함수를 설명해보겠습니다. 14.4.1 데이터 세트 예제로 사용할 데이터는 MASS Package에 내장된 Cars93 데이터 프레임의 고속도로연비(MPG.highway), 마력(Horsepower), 무게(Weight) 변수들입니다. ##---------------------------------------- ## 3 dimensional scatter plot ##---------------------------------------- library(MASS) str(Cars93) ## &#39;data.frame&#39;: 93 obs. of 27 variables: ## $ Manufacturer : Factor w/ 32 levels &quot;Acura&quot;,&quot;Audi&quot;,..: 1 1 2 2 3 4 4 4 4 5 ... ## $ Model : Factor w/ 93 levels &quot;100&quot;,&quot;190E&quot;,&quot;240&quot;,..: 49 56 9 1 6 24 54 74 73 35 ... ## $ Type : Factor w/ 6 levels &quot;Compact&quot;,&quot;Large&quot;,..: 4 3 1 3 3 3 2 2 3 2 ... ## $ Min.Price : num 12.9 29.2 25.9 30.8 23.7 14.2 19.9 22.6 26.3 33 ... ## $ Price : num 15.9 33.9 29.1 37.7 30 15.7 20.8 23.7 26.3 34.7 ... ## $ Max.Price : num 18.8 38.7 32.3 44.6 36.2 17.3 21.7 24.9 26.3 36.3 ... ## $ MPG.city : int 25 18 20 19 22 22 19 16 19 16 ... ## $ MPG.highway : int 31 25 26 26 30 31 28 25 27 25 ... ## $ AirBags : Factor w/ 3 levels &quot;Driver &amp; Passenger&quot;,..: 3 1 2 1 2 2 2 2 2 2 ... ## $ DriveTrain : Factor w/ 3 levels &quot;4WD&quot;,&quot;Front&quot;,..: 2 2 2 2 3 2 2 3 2 2 ... ## $ Cylinders : Factor w/ 6 levels &quot;3&quot;,&quot;4&quot;,&quot;5&quot;,&quot;6&quot;,..: 2 4 4 4 2 2 4 4 4 5 ... ## $ EngineSize : num 1.8 3.2 2.8 2.8 3.5 2.2 3.8 5.7 3.8 4.9 ... ## $ Horsepower : int 140 200 172 172 208 110 170 180 170 200 ... ## $ RPM : int 6300 5500 5500 5500 5700 5200 4800 4000 4800 4100 ... ## $ Rev.per.mile : int 2890 2335 2280 2535 2545 2565 1570 1320 1690 1510 ... ## $ Man.trans.avail : Factor w/ 2 levels &quot;No&quot;,&quot;Yes&quot;: 2 2 2 2 2 1 1 1 1 1 ... ## $ Fuel.tank.capacity: num 13.2 18 16.9 21.1 21.1 16.4 18 23 18.8 18 ... ## $ Passengers : int 5 5 5 6 4 6 6 6 5 6 ... ## $ Length : int 177 195 180 193 186 189 200 216 198 206 ... ## $ Wheelbase : int 102 115 102 106 109 105 111 116 108 114 ... ## $ Width : int 68 71 67 70 69 69 74 78 73 73 ... ## $ Turn.circle : int 37 38 37 37 39 41 42 45 41 43 ... ## $ Rear.seat.room : num 26.5 30 28 31 27 28 30.5 30.5 26.5 35 ... ## $ Luggage.room : int 11 15 14 17 13 16 17 21 14 18 ... ## $ Weight : int 2705 3560 3375 3405 3640 2880 3470 4105 3495 3620 ... ## $ Origin : Factor w/ 2 levels &quot;USA&quot;,&quot;non-USA&quot;: 2 2 2 2 2 1 1 1 1 1 ... ## $ Make : Factor w/ 93 levels &quot;Acura Integra&quot;,..: 1 2 4 3 5 6 7 9 8 10 ... 14.4.2 3차원 산포도 14.4.2.1 패키지 불러오기 library(scatterplot3d)로 패키지를 로딩합니다. # install.packages(&quot;scatterplot3d&quot;) library(scatterplot3d) 14.4.2.2 scatterplot3d() 함수의 형식 scatterplot3d(x, y, z, ...)로 3차원 그래프의 x, y, z 좌표(coordinate)를 지정해줍니다. 아래 예제에서는 x축에 무게(Weight), y축에는 마력(Horsepower), z축에는 연비(MPG.highway)를 할당하였습니다. type = \"h\" 는 수직선으로 표현하라는 옵션입니다. “p”는 점으로 표현, “l”은 선으로 표현하라는 의미입니다. 아래 예시의 경우는 3차원 공간에 나타내다 보니 “p”나 “l”보다는 “h”가 점과 x, y축 기준 수직선이 함께 보여서 인지하기에 더 수월하기에 type = \"h\"로 해서 그려보았습니다. scale.y = 0.7 은 x축과 z축을 기준으로 상대적으로 y축은 0.7 배로 해서 나타내라는 뜻입니다. 아래의 프로그램을 복사한 다음에 숫자를 바꿔서 한번 그려보시면 그래프가 어떻게 바뀌는지 금방 이해하실 겁니다. angle = 50 은 x와 y축의 각도를 뜻합니다. scale.y 와 angle 옵션의 숫자를 바꿔가면서 분석가가 원하는 길이, 각도가 나올 때까지 몇 번 trial and error 로 시도를 해보시면 됩니다. highlight.3d = TRUE 옵션은 y축의 좌표를 기준으로 색깔이 달라지게 하라는 의미입니다. 아래 그래프의 경우 y축 좌표 값이 작을 수록 빨간색, y축 좌표값이 클수록 검정색으로 자동으로 바뀌었습니다. 만약 highlight.ed = FALSE 라고 지정하면 그냥 y축 좌표값이 어떻게 되던간에 모두 검정색으로 나오게 되므로 3차원의 공간감을 나타내는데 부족함이 있습니다. 따라서 highlight.3d = TRUE 옵션 사용을 권장합니다. box = TRUE 옵션은 아래에 파란색(col.axis = \"blue\")으로 표시된 부분을 그리라는 뜻입니다. default 는 box = TRUE 이므로 별도로 명기하지 않아도 되며, 표기하기 싫을 때는 box = FALSE 라고 표기해야 겠지요. grid = TRUE 는 아래의 예에서 회색(col.grid = \"gray\")으로 표시된 부분을 나타낼지 정하는 옵션입니다. 이 역시 default 는 grid = TRUE 이므로 별도로 명기하지 않아도 되며, grid 를 제외하고 싶은 때는 grid = FALSE 라고 옵션을 부여하면 됩니다. mar = c(3, 4, 4, 3) 은 아래쪽, 왼쪽, 위쪽, 오른쪽의 순서대로 margin을 부여하는 옵션입니다. margin도 숫자를 조금씩 바꿔가면서 한번 시험해보시기 바랍니다. 그래프가 margin에 따라서 조금씩 바뀌는걸 알 수 있을 겁니다. 귀찮으면 그냥 default margin c(5.1, 4.1, 4.1, 2.1) 을 사용하면 되겠습니다(mar 옵션 미사용하면 default margin 적용됨). xlab, ylab, zlab 은 x축, y축, z축에 label 부여할 때 사용하는 옵션입니다. main = “xxx”은 제목 붙이는 옵션이구요. 14.4.2.3 3차원 산포도 그리기 x &lt;- Cars93$Weight y &lt;- Cars93$Horsepower z &lt;- Cars93$MPG.highway # 3 dimensional scatter plotting Cars93_3d &lt;- scatterplot3d(x, y, z, type = &quot;h&quot;, # &quot;p&quot; for point, &quot;l&quot; for line, &quot;h&quot; for vertical lines to x-y-plane pch=16, # symbol, character scale.y = 0.7, # scale of y axis related to x- and z axis angle = 50, # angle between x and y axis highlight.3d=TRUE, # points will be drawn in different colors related to y coordinates box = TRUE, # a logical value indicating whether a box should be drawn around the plot col.axis=&quot;blue&quot;, # the color to be used for axis grid = TRUE, # a logical value indicating whether a grid should be drawn on the plot col.grid=&quot;gray&quot;, # the color to be used for grid mar = c(3, 4, 4, 3), # margin : c(bottom, left, top, right) xlab = &quot;x_Weight&quot;, # label for the x ylab = &quot;y_Horsepower&quot;, # label for the y zlab = &quot;z_MPG.highway&quot;, # label for the z main=&quot;3 dimensional scatter plot of Cars93&quot;) # main title 14.4.2.4 색상 지정 혹시 색깔을 좀더 다양하게 해보고 싶다면 아래처럼 color 옵션을 사용하면 됩니다. rainbow color를 적용해보았습니다. 저는 위에서 그린 highlight.3d = TRUE 옵션이 아래의 color = rainbowcolor 로 화려하게 그린 그래프보다 시각적으로 더 인지하기에 좋아 보이네요. 아래 그림은 좀 어지럽게 느껴지구요. # using rainbow color dim(Cars93) ## [1] 93 27 rainbowcolor &lt;- rainbow(93) # number 93 indicate 93 observations of Cars93 dataframe Cars93_3d &lt;- scatterplot3d(x, y, z, type = &quot;h&quot;, # &quot;p&quot; for point, &quot;l&quot; for line, &quot;h&quot; for vertical lines to x-y-plane pch=16, # symbol, character scale.y = 0.7, # scale of y axis related to x- and z axis angle = 50, # angle between x and y axis color = rainbowcolor, # colors of points in the plot box = TRUE, # a logical value indicating whether a box should be drawn around the plot col.axis=&quot;blue&quot;, # the color to be used for axis grid = TRUE, # a logical value indicating whether a grid should be drawn on the plot col.grid=&quot;gray&quot;, # the color to be used for grid mar = c(3, 4, 4, 3), # margin : c(bottom, left, top, right) xlab = &quot;x_Weight&quot;, # label for the x ylab = &quot;y_Horsepower&quot;, # label for the y zlab = &quot;z_MPG.highway&quot;, # label for the z main=&quot;3 dimensional scatter plot of Cars93 - using rainbow color&quot;) # main title 14.4.2.5 회귀모형 표시하기 다음으로 Cars93_lm &lt;- lm(MPG.highway ~ Weight + Horsepower) 를 사용해서 x축 무게(Weight)와 y축 마력(Horsepower)와 z축 고속도로연비(MPG.highway) 간의 회귀모형을 적합시킨 후에, 3D scatter plot에 회귀평면(regression plane)을 그려보도록 하겠습니다. 보통 2차원 산포도를 그리고 선형회귀모형을 적합시킨 후에 선형회귀선을 2차원 산포도에 추가로 그려놓고는 했었을 것입니다. 아래 예시는 z ~ x + y 로 회귀모형을 적합시켜서 3차원 그래프로 그린 것인데요, 아무래도 2차원 그래프보다는 좀 이해하기가 어렵습니다. # Adding a regression plane to the &quot;scatterplot3d&quot; attach(Cars93) ## The following object is masked _by_ .GlobalEnv: ## ## Cylinders ## The following objects are masked from Cars93 (pos = 20): ## ## AirBags, Cylinders, DriveTrain, EngineSize, Fuel.tank.capacity, ## Horsepower, Length, Luggage.room, Make, Man.trans.avail, ## Manufacturer, Max.Price, Min.Price, Model, MPG.city, MPG.highway, ## Origin, Passengers, Price, Rear.seat.room, Rev.per.mile, RPM, ## Turn.circle, Type, Weight, Wheelbase, Width Cars93_lm &lt;- lm(MPG.highway ~ Weight + Horsepower) Cars93_3d$plane3d(Cars93_lm, lty.box = &quot;solid&quot;) ## Error in segments(x, z1, x + y.max * yx.f, z2 + yz.f * y.max, lty = ltya, : plot.new has not been called yet detach(Cars93) 위의 내용은 Error 발생…. https://stackoverflow.com/questions/20448539/add-yz-and-xz-grid-to-scatterplot3d https://data-se.netlify.app/2019/10/21/some-ways-for-plotting-3d-linear-models/ 14.4.3 영화 Minority Report 만약 위의 그래프를 톰크루즈가 주연으로 나왔던 영화 minority report 처럼 3차원 그래프를 상, 하, 좌, 우로 자유자재로 돌려볼 수 있다면 아마도 좀더 데이터의 분포 형태를 좀더 인지하기가 쉬울 것입니다. 아쉽게도 scatterplot3d Package는 이 기능을 지원하지 않는데요, 혹시 이 기능을 원하신다면 3D 그래프를 회전시키면서 볼 수 있는 다른 오픈소스를 찾아보셔야 할 거예요. [ 영화 Minority Report 의 한 장면 ] Youtube 동영상 : https://youtu.be/PJqbivkm0Ms scatterplot3d Package에 대해서 좀더 알고 싶은신 분, 다른 예제를 참고하고 싶으신 분은 아래의 Reference를 참고하시기 바랍니다. [Reference]https://cran.r-project.org/web/packages/scatterplot3d/scatterplot3d.pdf "],["체르노프-얼굴그림-chernoff-faces-aplpack-package-faces-함수.html", "14.5 체르노프 얼굴그림 (Chernoff faces) : aplpack package, faces() 함수", " 14.5 체르노프 얼굴그림 (Chernoff faces) : aplpack package, faces() 함수 이번 포스팅에서는 (5) 체르노프 얼굴그림 (Chernoff faces)에 대해서 소개하겠습니다. 체르노프 얼굴그림은 다변량 변수의 속성값들을 아래의 표에 나오는 것처럼 15가지의 얼굴의 생김새(얼굴 높이, 얼굴 넓이, 입 높이, 입 넓이…등) 특성에 매핑해서 얼굴 모양이 달라지게 하는 방식입니다. 얼굴 특성 (face characteristics) 다변량 변수 (multivariate mapping) 1. 얼굴의 높이 “height of face” “Price” 2. 얼굴의 넓이 “width of face” “MPG.highway” 3. 얼굴의 구조 “structure of face” “Horsepower” 4. 입의 높이 “height of mouth” “RPM” 5. 입의 넓이 “width of mouth” “Length” 6. 웃음 “smiling” “Weight” 7. 눈의 높이 “height of eyes” “Price” 8. 눈의 넓이 “width of eyes” “MPG.highway” 9. 머리카락 높이 “height of hair” “Horsepower” 10. 머리카락 넓이 “width of hair” “RPM” 11. 헤어스타일 “style of hair” “Length” 12. 코 높이 “height of nose” “Weight” 13. 코 넓이 “width of nose” “Price” 14. 귀 넓이 “width of ear” “MPG.highway” 15. 귀 높이 “height of ear” “Horsepower” 체르노프 얼굴그림은 얼굴 모양을 가지고 데이터 관측치들의 특성을 직관적으로 파악할 수 있다는 장점이 있습니다. 다만, 각 변수가 얼굴 모양의 어느 특성에 매핑이 되었는지를 확인하고자 한다면 앞서 살펴본 레이터 차트나 별그림, 평행좌표그림 등에 비해 불편한 편이고, 왠지 official한 느낌은 덜 듭니다. 그래서 저 같은 경우는 회사에서 보고서에 체르노프 얼굴그림을 사용해본 적은 아직까지는 없습니다. ^^; 그래도 다변량 데이터를 신속하게, 직관적으로 탐색적분석 하는 용도로는 알아듬직 하므로 이번 포스팅을 이어가 보겠습니다. 14.5.1 데이터 세트 예제에 사용할 데이터는 MASS Package에 내장되어있는 Cars93 dataframe을 사용하겠으며, 전체 93개의 관측치가 있는데요, 이를 모두 그리자니 너무 많아서요, 1번째 관측치부터 20번째 관측치까지만 사용하겠습니다. 체르노프 얼굴그림 그릴 때 사용할 변수로는 가격(\"Price\"), 고속도로연비(\"MPG.highway\"), 마력(\"Horsepower\"), RPM(\"RPM\"), 차길이(\"Length\"), 차무게(\"Weight\")의 5개 만 선별해서 사용하겠습니다. 아래처럼 Cars93_1 이라는 새로운 이름의 데이터프레임을 만들었습니다. # dataset preparation library(MASS) str(Cars93) ## &#39;data.frame&#39;: 93 obs. of 27 variables: ## $ Manufacturer : Factor w/ 32 levels &quot;Acura&quot;,&quot;Audi&quot;,..: 1 1 2 2 3 4 4 4 4 5 ... ## $ Model : Factor w/ 93 levels &quot;100&quot;,&quot;190E&quot;,&quot;240&quot;,..: 49 56 9 1 6 24 54 74 73 35 ... ## $ Type : Factor w/ 6 levels &quot;Compact&quot;,&quot;Large&quot;,..: 4 3 1 3 3 3 2 2 3 2 ... ## $ Min.Price : num 12.9 29.2 25.9 30.8 23.7 14.2 19.9 22.6 26.3 33 ... ## $ Price : num 15.9 33.9 29.1 37.7 30 15.7 20.8 23.7 26.3 34.7 ... ## $ Max.Price : num 18.8 38.7 32.3 44.6 36.2 17.3 21.7 24.9 26.3 36.3 ... ## $ MPG.city : int 25 18 20 19 22 22 19 16 19 16 ... ## $ MPG.highway : int 31 25 26 26 30 31 28 25 27 25 ... ## $ AirBags : Factor w/ 3 levels &quot;Driver &amp; Passenger&quot;,..: 3 1 2 1 2 2 2 2 2 2 ... ## $ DriveTrain : Factor w/ 3 levels &quot;4WD&quot;,&quot;Front&quot;,..: 2 2 2 2 3 2 2 3 2 2 ... ## $ Cylinders : Factor w/ 6 levels &quot;3&quot;,&quot;4&quot;,&quot;5&quot;,&quot;6&quot;,..: 2 4 4 4 2 2 4 4 4 5 ... ## $ EngineSize : num 1.8 3.2 2.8 2.8 3.5 2.2 3.8 5.7 3.8 4.9 ... ## $ Horsepower : int 140 200 172 172 208 110 170 180 170 200 ... ## $ RPM : int 6300 5500 5500 5500 5700 5200 4800 4000 4800 4100 ... ## $ Rev.per.mile : int 2890 2335 2280 2535 2545 2565 1570 1320 1690 1510 ... ## $ Man.trans.avail : Factor w/ 2 levels &quot;No&quot;,&quot;Yes&quot;: 2 2 2 2 2 1 1 1 1 1 ... ## $ Fuel.tank.capacity: num 13.2 18 16.9 21.1 21.1 16.4 18 23 18.8 18 ... ## $ Passengers : int 5 5 5 6 4 6 6 6 5 6 ... ## $ Length : int 177 195 180 193 186 189 200 216 198 206 ... ## $ Wheelbase : int 102 115 102 106 109 105 111 116 108 114 ... ## $ Width : int 68 71 67 70 69 69 74 78 73 73 ... ## $ Turn.circle : int 37 38 37 37 39 41 42 45 41 43 ... ## $ Rear.seat.room : num 26.5 30 28 31 27 28 30.5 30.5 26.5 35 ... ## $ Luggage.room : int 11 15 14 17 13 16 17 21 14 18 ... ## $ Weight : int 2705 3560 3375 3405 3640 2880 3470 4105 3495 3620 ... ## $ Origin : Factor w/ 2 levels &quot;USA&quot;,&quot;non-USA&quot;: 2 2 2 2 2 1 1 1 1 1 ... ## $ Make : Factor w/ 93 levels &quot;Acura Integra&quot;,..: 1 2 4 3 5 6 7 9 8 10 ... # sampling observations from 1st to 20th, selecting 5 variables Cars93_1 &lt;- Cars93[c(1:20),c(&quot;Price&quot;, &quot;MPG.highway&quot;, &quot;Horsepower&quot;, &quot;RPM&quot;, &quot;Length&quot;, &quot;Weight&quot;)] Cars93_1 ## Price MPG.highway Horsepower RPM Length Weight ## 1 16 31 140 6300 177 2705 ## 2 34 25 200 5500 195 3560 ## 3 29 26 172 5500 180 3375 ## 4 38 26 172 5500 193 3405 ## 5 30 30 208 5700 186 3640 ## 6 16 31 110 5200 189 2880 ## 7 21 28 170 4800 200 3470 ## 8 24 25 180 4000 216 4105 ## 9 26 27 170 4800 198 3495 ## 10 35 25 200 4100 206 3620 ## 11 40 25 295 6000 204 3935 ## 12 13 36 110 5200 182 2490 ## 13 11 34 110 5200 184 2785 ## 14 15 28 160 4600 193 3240 ## 15 16 29 110 5200 198 3195 ## 16 16 23 170 4800 178 3715 ## 17 17 20 165 4000 194 4025 ## 18 19 26 170 4200 214 3910 ## 19 38 25 300 5000 179 3380 ## 20 18 28 153 5300 203 3515 14.5.2 체로노프 얼굴그림 그리기 14.5.2.1 패키지 불러오기 체로노프 얼굴그림을 그리기 위해 R의 aplpack Package의 faces() 함수를 사용하겠습니다. install.package() 함수를 써서 설치하고, library() 함수로 호출해 보겠습니다. # install.packages(&quot;aplpack&quot;) library(aplpack) 14.5.2.2 faces() 함수의 형식 이제 faces() 함수로 체르노프 얼굴 그림을 그려보겠습니다. faces(dataset, face.type = 0/1/2, main = \"title\") 의 형식으로 사용합니다. face.type = 0 (line drawing faces)은 색깔 없이 선으로만 얼굴을 그립니다. face.type = 1 (the elements of the faces are painted)는 색깔도 같이 칠해서 얼굴을 그려줍니다. face.type = 2 (Santa Claus faces are drawn)는 산타클로스 얼굴에 색을 칠해서 그려주고요. 아래에 하나씩 예를 들어보겠습니다. 14.5.2.3 체르노프 얼굴 그림 그리기 14.5.2.3.1 face.type = 0 (line drawing faces) # face.type = 0 : line drawing faces faces(Cars93_1, face.type = 0, main = &quot;Chernoff faces: face.type = 0&quot;) ## effect of variables: ## modified item Var ## &quot;height of face &quot; &quot;Price&quot; ## &quot;width of face &quot; &quot;MPG.highway&quot; ## &quot;structure of face&quot; &quot;Horsepower&quot; ## &quot;height of mouth &quot; &quot;RPM&quot; ## &quot;width of mouth &quot; &quot;Length&quot; ## &quot;smiling &quot; &quot;Weight&quot; ## &quot;height of eyes &quot; &quot;Price&quot; ## &quot;width of eyes &quot; &quot;MPG.highway&quot; ## &quot;height of hair &quot; &quot;Horsepower&quot; ## &quot;width of hair &quot; &quot;RPM&quot; ## &quot;style of hair &quot; &quot;Length&quot; ## &quot;height of nose &quot; &quot;Weight&quot; ## &quot;width of nose &quot; &quot;Price&quot; ## &quot;width of ear &quot; &quot;MPG.highway&quot; ## &quot;height of ear &quot; &quot;Horsepower&quot; 14.5.2.3.2 face.type = 1 (the elements of the faces are painted) # face.type = 1 : the elements of the faces are painted faces(Cars93_1, face.type = 1, main = &quot;Chernoff faces: face.type = 1&quot;) ## effect of variables: ## modified item Var ## &quot;height of face &quot; &quot;Price&quot; ## &quot;width of face &quot; &quot;MPG.highway&quot; ## &quot;structure of face&quot; &quot;Horsepower&quot; ## &quot;height of mouth &quot; &quot;RPM&quot; ## &quot;width of mouth &quot; &quot;Length&quot; ## &quot;smiling &quot; &quot;Weight&quot; ## &quot;height of eyes &quot; &quot;Price&quot; ## &quot;width of eyes &quot; &quot;MPG.highway&quot; ## &quot;height of hair &quot; &quot;Horsepower&quot; ## &quot;width of hair &quot; &quot;RPM&quot; ## &quot;style of hair &quot; &quot;Length&quot; ## &quot;height of nose &quot; &quot;Weight&quot; ## &quot;width of nose &quot; &quot;Price&quot; ## &quot;width of ear &quot; &quot;MPG.highway&quot; ## &quot;height of ear &quot; &quot;Horsepower&quot; 14.5.2.3.3 face.type = 2 (Santa Claus faces are drawn) # face.type = 2 : Santa Claus faces are drawn faces(Cars93_1, face.type = 2, main = &quot;Chernoff faces: face.type = 2&quot;) ## effect of variables: ## modified item Var ## &quot;height of face &quot; &quot;Price&quot; ## &quot;width of face &quot; &quot;MPG.highway&quot; ## &quot;structure of face&quot; &quot;Horsepower&quot; ## &quot;height of mouth &quot; &quot;RPM&quot; ## &quot;width of mouth &quot; &quot;Length&quot; ## &quot;smiling &quot; &quot;Weight&quot; ## &quot;height of eyes &quot; &quot;Price&quot; ## &quot;width of eyes &quot; &quot;MPG.highway&quot; ## &quot;height of hair &quot; &quot;Horsepower&quot; ## &quot;width of hair &quot; &quot;RPM&quot; ## &quot;style of hair &quot; &quot;Length&quot; ## &quot;height of nose &quot; &quot;Weight&quot; ## &quot;width of nose &quot; &quot;Price&quot; ## &quot;width of ear &quot; &quot;MPG.highway&quot; ## &quot;height of ear &quot; &quot;Horsepower&quot; 산타클로스 얼굴은 정신이 하도 산만해서 관측치들간의 유사성이나 차이가 눈에 잘 안들어오네요. @@~ 14.5.2.3.4 체로노프 얼굴그림에 이름 추가하기 : labels = # putting labels as face names : labels faces(Cars93_1, face.type = 1, labels = Cars93[1:20,]$Model, main = &quot;putting labels as face names : labels = &quot;) ## effect of variables: ## modified item Var ## &quot;height of face &quot; &quot;Price&quot; ## &quot;width of face &quot; &quot;MPG.highway&quot; ## &quot;structure of face&quot; &quot;Horsepower&quot; ## &quot;height of mouth &quot; &quot;RPM&quot; ## &quot;width of mouth &quot; &quot;Length&quot; ## &quot;smiling &quot; &quot;Weight&quot; ## &quot;height of eyes &quot; &quot;Price&quot; ## &quot;width of eyes &quot; &quot;MPG.highway&quot; ## &quot;height of hair &quot; &quot;Horsepower&quot; ## &quot;width of hair &quot; &quot;RPM&quot; ## &quot;style of hair &quot; &quot;Length&quot; ## &quot;height of nose &quot; &quot;Weight&quot; ## &quot;width of nose &quot; &quot;Price&quot; ## &quot;width of ear &quot; &quot;MPG.highway&quot; ## &quot;height of ear &quot; &quot;Horsepower&quot; 14.5.3 산포도에 체르노프 얼굴그림 겹쳐 그르기 먼저 산포도를 plot() 함수를 사용해서 그립니다. 그 다음에 faces() 함수로 체르노프 얼굴그림을 실행시킵니다. 이때 scale = TRUE, plot = FALSE 옵션을 사용해줍니다. 그래프는 화면에 안나타나구요, (3)번 스텝에서 그래프가 그려질 수 있도록 데이터가 준비된 상태입니다. plot.faces() 함수를 사용해서 산포도 위에 (2)번에서 생성해 놓은 체르노프 얼굴그림을 겹쳐서 그려줍니다. width 와 height 는 x축과 y축의 단위를 보고서 trial &amp; error 를 해보면서 숫자를 조금씩 바꿔가면서 그려본 후에 가장 마음에 드는 걸로 선택하면 되겠습니다. 체르노프 얼굴그림을 산포도에 겹쳐서 그리니 제법 유용한 다차원 그래프이지 않은가요? ^^ # Overlapping Chernoff faces over scatter plot (MPG.highway*Weight) plot(Cars93_1[,c(&quot;MPG.highway&quot;, &quot;Weight&quot;)], bty=&quot;n&quot;, # To make a plot with no box around the plot area main = &quot;Chernoff faces of Cars93&quot;) Cars93_1_faces &lt;- faces(Cars93_1, scale = TRUE, plot=FALSE) ## effect of variables: ## modified item Var ## &quot;height of face &quot; &quot;Price&quot; ## &quot;width of face &quot; &quot;MPG.highway&quot; ## &quot;structure of face&quot; &quot;Horsepower&quot; ## &quot;height of mouth &quot; &quot;RPM&quot; ## &quot;width of mouth &quot; &quot;Length&quot; ## &quot;smiling &quot; &quot;Weight&quot; ## &quot;height of eyes &quot; &quot;Price&quot; ## &quot;width of eyes &quot; &quot;MPG.highway&quot; ## &quot;height of hair &quot; &quot;Horsepower&quot; ## &quot;width of hair &quot; &quot;RPM&quot; ## &quot;style of hair &quot; &quot;Length&quot; ## &quot;height of nose &quot; &quot;Weight&quot; ## &quot;width of nose &quot; &quot;Price&quot; ## &quot;width of ear &quot; &quot;MPG.highway&quot; ## &quot;height of ear &quot; &quot;Horsepower&quot; plot.faces(Cars93_1_faces, Cars93_1[,c(&quot;MPG.highway&quot;)], Cars93_1[,c(&quot;Weight&quot;)], width = 2, height = 250) 체르노프 얼굴그림에 대해서 좀더 알고 싶은 분은 아래의 Reference를 참고하시기 바랍니다. [ Reference ] http://www.inside-r.org/packages/cran/aplpack/docs/faces 14.5.4 pairs() 함수를 사용한 산포도 행렬 그리기 14.5.5 R 모자이크 그림: vcd패키지 mosaic() 함수 "],["연속확률분포-곡선.html", "15 연속확률분포 곡선", " 15 연속확률분포 곡선 통계에서 빼놓을 수 없는 기본 개념 중의 하나가 확률입니다. 모집단에서 표본을 추출할 때 랜덤 샘플링, 층화 랜덤 샘플링 등과 같이 확률을 사용합니다. 추정과 검정에서도 확률분포를 사용합니다. 회귀분석, 판별분석 등에서도 변수가 정규분포를 따르고 있는지 검정합니다. 시뮬레이션을 할 때 모집단의 확률분포에 따라 난수를 발생시키기도 합니다. 특히, 통계를 좀 공부했던 분이라면 정규분포는 알고 있을 듯 합니다. 하지만, 그 외에 분포들은 들어는 봤어도 모양이 어떻게 생겼는지, 어떤 때 사용하는 것인지 정확히 모르고 있는 경우가 더 많을 듯 합니다. R ggplot2를 활용해서 연속확률분포 곡선을 그려보면 분포별로 모양을 이해하는데 도움이 되겠지요. 그리고 모수에 따라서 모양이 어떻게 바뀌는지도 확인해 볼 수 있겠구요. 이번 포스팅에서는 주로 ’d’로 시작하는 밀도 함수 (Density Function) 에 대해서 정규분포(norm), t-분포(t), 카이제곱분포(chisq), 지수분포(exp), F분포(f), 감마분포(gamma), 균등분포(unif) 등의 분포에 대해서 ggplot2로 그리는 방법을 소개해보겠습니다. "],["연속확률분포-함수.html", "15.1 연속확률분포 함수", " 15.1 연속확률분포 함수 [ 연속확률분포 종류별 / 함수 종류별 ggplot2 그리기 함수 종합표 ] 분포 밀도 함수d 누적분포 함수p 분위수 함수 q 난수 발생 r 정규분포 norm() dnorm() pnorm() qnorm() rnorm() t-분포 t() dt() pt() qt() rt() 카이제곱분포 chisq() dchisq() pchisq() qchisq() rchisq() 지수분포 exp() dexp() pexp() qexp() rexp() F분포 f() df() pf() qf() rf() 감마분포 gamma() dgamma() pgamma() qgamma() rgamma() 균등분포 unif() dunif() punif() qunif() runif() "],["패키지-불러오기-2.html", "패키지 불러오기", " 패키지 불러오기 ggplot2는 별도의 설치 및 호출이 필요한 패키지이므로 아래의 절차를 먼저 실행합니다. # install.packages(&quot;ggplot2&quot;) library(ggplot2) "],["정규분포-함수.html", "15.2 정규분포 함수", " 15.2 정규분포 함수 15.2.1 정규분포 확률밀도곡선 : stat_function(fun = dnorm) # 정규분포 : fun = dnorm ggplot(data.frame(x=c(-3,3)), aes(x=x)) + stat_function(fun=dnorm, colour=&quot;blue&quot;, size=1) + ggtitle(&quot;Normal Distribution&quot;) 15.2.2 정규분포의 특정 구간에만 색깔 넣기 # 함수 특정 구간에 색깔 넣기 dnorm_range &lt;- function(x) { y &lt;- dnorm(x) y[x &lt; -1 | x &gt; 2] &lt;- NA # 이 범위에는 색깔 없음 return(y) } ggplot(data.frame(x=c(-3,3)), aes(x=x)) + stat_function(fun=dnorm, colour=&quot;blue&quot;, size=1) + stat_function(fun=dnorm_range, geom=&quot;area&quot;, fill=&quot;grey&quot;, alpha=0.5) + ggtitle(&quot;Normal Distribution of x~N(0,1) with colour from -1 to 2&quot;) 15.2.3 누적정규분포 (Cummulative Normal Distribution) : stat_function(fun = pnorm) # 누적정규분포 : fun = pnorm ggplot(data.frame(x=c(-3,3)), aes(x=x)) + stat_function(fun=pnorm, colour=&quot;black&quot;, size=1.5) + ggtitle(&quot;Cumulative Normal Distribution of x~N(0,1)&quot;) 15.2.4 정규분포 : 평균과 분산 지정 # 정규분포: 평균과 분산 지정 ggplot(data.frame(x = c(-5, 5)), aes(x=x)) + stat_function(fun=dnorm, args=list(mean=2, sd=1), colour=&quot;black&quot;, size=1.5) + geom_vline(xintercept=2, colour=&quot;grey&quot;, linetype=&quot;dashed&quot;, size=1) + # 평균에 세로 직선 추가 geom_text(x=0, y=0.3, label=&quot;x = N(2, 1)&quot;) + ggtitle(&quot;Normal Distribution of x~N(2,1)&quot;) "],["t-분포-t-distribution-stat-functionfun-dt.html", "15.3 t-분포 (t-Distribution) : stat_function(fun = dt)", " 15.3 t-분포 (t-Distribution) : stat_function(fun = dt) # t-분포 : fun = dt ggplot(data.frame(x=c(-3,3)), aes(x=x)) + stat_function(fun=dt, args=list(df=2), colour=&quot;red&quot;, size=2) + ggtitle(&quot;t-Distribution of df=2&quot;) "],["카이제곱분포-확률밀도곡선-stat-functionfun-dchisq.html", "15.4 카이제곱분포 확률밀도곡선 : stat_function(fun = dchisq)", " 15.4 카이제곱분포 확률밀도곡선 : stat_function(fun = dchisq) # 카이제곱분포 : fun = dchisq ggplot(data.frame(x=c(0,10)), aes(x=x)) + stat_function(fun=dchisq, args=list(df=1), colour=&quot;black&quot;, size=1.2) + geom_text(x=0.6, y=1, label=&quot;df=1&quot;) + stat_function(fun=dchisq, args=list(df=2), colour=&quot;blue&quot;, size=1.2) + geom_text(x=0, y=0.55, label=&quot;df=2&quot;) + stat_function(fun=dchisq, args=list(df=3), colour=&quot;red&quot;, size=1.2) + geom_text(x=0.5, y=0.05, label=&quot;df=3&quot;) + ggtitle(&quot;Chisq-Distribution&quot;) "],["지수분포-exponential-distribution-stat-functionfun-dexp.html", "15.5 지수분포 (Exponential Distribution) : stat_function(fun = dexp)", " 15.5 지수분포 (Exponential Distribution) : stat_function(fun = dexp) # 지수분포 : fun = dexp ggplot(data.frame(x=c(0,10)), aes(x=x)) + stat_function(fun=dexp, colour=&quot;brown&quot;, size=1.5) + ggtitle(&quot;Exponential Distribution&quot;) "],["f-분포-f-distribution-stat-functionfun-df.html", "15.6 F 분포 (F Distribution) : stat_function(fun = df)", " 15.6 F 분포 (F Distribution) : stat_function(fun = df) # F분포 : fun = df ggplot(data.frame(x=c(0,5)), aes(x=x)) + stat_function(fun = stats::df, args=list(df1=9, df2=9), colour=&quot;blue&quot;, size=0.5) + stat_function(fun=stats::df, args=list(df1=10, df2=30), colour=&quot;red&quot;, size=0.5) + stat_function(fun=stats::df, args=list(df1=50, df2=100), colour=&quot;yellow&quot;, size=0.5) + annotate(&quot;segment&quot;, x=3, xend=3.5, y=1.4, yend=1.4, colour=&quot;blue&quot;, size=0.5) + annotate(&quot;segment&quot;, x=3, xend=3.5, y=1.2, yend=1.2, colour=&quot;red&quot;, size=0.5) + annotate(&quot;segment&quot;, x=3, xend=3.5, y=1.0, yend=1.0, colour=&quot;yellow&quot;, size=0.5) + annotate(&quot;text&quot;, x=4.3, y=1.4, label=&quot;F(df1=9, df2=9)&quot;) + annotate(&quot;text&quot;, x=4.3, y=1.2, label=&quot;F(df1=10, df2=30)&quot;) + annotate(&quot;text&quot;, x=4.3, y=1.0, label=&quot;F(df1=50, df2=100)&quot;) + ggtitle(&quot;F Distribution&quot;) "],["감마-분포-gamma-distribution-stat-functionfun-dgamma.html", "15.7 감마 분포 (Gamma Distribution) : stat_function(fun = dgamma)", " 15.7 감마 분포 (Gamma Distribution) : stat_function(fun = dgamma) # 감마 분포 : fun = dgamma ggplot(data.frame(x=c(0, 400)), aes(x=x)) + stat_function(fun=dgamma, args=list(shape=5, rate=0.05), colour=&quot;green&quot;) + ggtitle(&quot;Gamma Distribution of (shape=5, rate=0.05)&quot;) "],["일양-분포-uniform-distribution-stat-functionfun-dunif.html", "15.8 일양 분포 (Uniform Distribution) :stat_function(fun = dunif)", " 15.8 일양 분포 (Uniform Distribution) :stat_function(fun = dunif) # 균등분포 : fun = dunif ggplot(data.frame(x=c(-2,20)), aes(x=x)) + stat_function(fun=dunif, args=list(min = 0, max = 10), colour=&quot;black&quot;, size=1) + ggtitle(&quot;Uniform Distribution of (min=1, max=10)&quot;) 덤으로, 상용로그분포와 사인 함수, 코사인 함수 곡선도 그려보겠습니다. "],["상용로그-분포-common-logarithm-distribution-stat-functionfun-log10.html", "15.9 상용로그 분포 (Common Logarithm Distribution) : stat_function(fun = log10)", " 15.9 상용로그 분포 (Common Logarithm Distribution) : stat_function(fun = log10) # 상용로그분포 : fun = log10 ggplot(data.frame(x=c(0,100)), aes(x=x)) + stat_function(fun=log10, colour=&quot;black&quot;, size=1.5) + geom_vline(xintercept=10, colour=&quot;grey&quot;, linetype=&quot;dashed&quot;, size=1) + geom_vline(xintercept=100, colour=&quot;grey&quot;, linetype=&quot;dashed&quot;, size=1) + ggtitle(&quot;Common Logarithm Distribution&quot;) "],["사인-함수-곡선sine-function-curve-코사인-함수-곡선cosine-function-curve-stat-functionfun-sin-stat-fuctionfun-cos.html", "15.10 사인 함수 곡선(Sine Function Curve), 코사인 함수 곡선(Cosine Function Curve) : stat_function(fun = sin), stat_fuction(fun = cos)", " 15.10 사인 함수 곡선(Sine Function Curve), 코사인 함수 곡선(Cosine Function Curve) : stat_function(fun = sin), stat_fuction(fun = cos) # 사인 함수 : fun = sin, 코사인 함수 : fun = cos ggplot(data.frame(x=c(0,6.28)), aes(x=x)) + stat_function(fun=sin, colour=&quot;blue&quot;, size=1) + geom_text(x=0.2, y=0, label=&quot;sine curve&quot;) + stat_function(fun=cos, colour=&quot;yellow&quot;, size=1) + geom_text(x=0.2, y=1, label=&quot;cosine curve&quot;) + geom_vline(xintercept=3.14, colour=&quot;grey&quot;, linetype=&quot;dashed&quot;, size=1) + # pi값에 세로 직선 추가 geom_vline(xintercept=6.28, colour=&quot;grey&quot;, linetype=&quot;dashed&quot;, size=1) + # 2pi값에 세로 직선 추가 ggtitle(&quot;Sine(blue curve), Cosine(yellow curve) Function&quot;) "],["동적-그래프.html", "16 동적 그래프", " 16 동적 그래프 이번 포스팅에서는 Rstudio 에 manipulate 패키지를 설치해서 동적으로 그래프를 조작하는 방법을 소개하겠습니다. (참고로, R에는 shiny, plotly, rpivotTable 등 동적 그래프, 피봇테이블 지원하는 패키지가 여럿 있습니다) 그동안 소개했던 그래프/시각화 방법이 한번 그리고 나면 세팅이 된 상태에서 한번 그려지고 끝입니다. 옵션이나 대상 객체를 바꾸고 싶으면 프로그램 script 창으로 가서 프로그래을 손봐야 하는 번거로움이 있어야 했습니다. 하지만, 이번에 소개하는 manipulate 패키지를 활용한 Rstudio 내에서의 동적 그래프 (Interactive Plotting in Rstudio with manipulate package) 를 보시면 편하고 신기하다는 생각을 하게 될 것 같습니다. manipulate 패키지를 활용하면 동적 그래프 짜는 프로그램이 어렵지도 않습니다. 아래의 3개 유형과 이들을 조합한 4번째 예제를 순서대로 소개하겠습니다. 한국말로 번역하려니 쉽지가 않아서 영어 그대로 표기합니다. ^^; Slider Control) Picker Control) Checkbox Control) Combining Controls 이 기능을 RStudio에서 사용하려면, R 마크다운 문서를 ’Chunk Output in Console’를 선택해 주어야 한다. 그러면 Plots 창에 표시가 된다. "],["데이터-세트-20.html", "16.1 데이터 세트", " 16.1 데이터 세트 실습에 사용할 데이터는 MASS 패키지에 내장된 Cars93 데이터 프레임의 차종(Type), 가격(Price), 고속도로연비(MPG.highway), 무게(Weight) 변수를 사용하겠습니다. library(MASS) str(Cars93) ## &#39;data.frame&#39;: 93 obs. of 27 variables: ## $ Manufacturer : Factor w/ 32 levels &quot;Acura&quot;,&quot;Audi&quot;,..: 1 1 2 2 3 4 4 4 4 5 ... ## $ Model : Factor w/ 93 levels &quot;100&quot;,&quot;190E&quot;,&quot;240&quot;,..: 49 56 9 1 6 24 54 74 73 35 ... ## $ Type : Factor w/ 6 levels &quot;Compact&quot;,&quot;Large&quot;,..: 4 3 1 3 3 3 2 2 3 2 ... ## $ Min.Price : num 12.9 29.2 25.9 30.8 23.7 14.2 19.9 22.6 26.3 33 ... ## $ Price : num 15.9 33.9 29.1 37.7 30 15.7 20.8 23.7 26.3 34.7 ... ## $ Max.Price : num 18.8 38.7 32.3 44.6 36.2 17.3 21.7 24.9 26.3 36.3 ... ## $ MPG.city : int 25 18 20 19 22 22 19 16 19 16 ... ## $ MPG.highway : int 31 25 26 26 30 31 28 25 27 25 ... ## $ AirBags : Factor w/ 3 levels &quot;Driver &amp; Passenger&quot;,..: 3 1 2 1 2 2 2 2 2 2 ... ## $ DriveTrain : Factor w/ 3 levels &quot;4WD&quot;,&quot;Front&quot;,..: 2 2 2 2 3 2 2 3 2 2 ... ## $ Cylinders : Factor w/ 6 levels &quot;3&quot;,&quot;4&quot;,&quot;5&quot;,&quot;6&quot;,..: 2 4 4 4 2 2 4 4 4 5 ... ## $ EngineSize : num 1.8 3.2 2.8 2.8 3.5 2.2 3.8 5.7 3.8 4.9 ... ## $ Horsepower : int 140 200 172 172 208 110 170 180 170 200 ... ## $ RPM : int 6300 5500 5500 5500 5700 5200 4800 4000 4800 4100 ... ## $ Rev.per.mile : int 2890 2335 2280 2535 2545 2565 1570 1320 1690 1510 ... ## $ Man.trans.avail : Factor w/ 2 levels &quot;No&quot;,&quot;Yes&quot;: 2 2 2 2 2 1 1 1 1 1 ... ## $ Fuel.tank.capacity: num 13.2 18 16.9 21.1 21.1 16.4 18 23 18.8 18 ... ## $ Passengers : int 5 5 5 6 4 6 6 6 5 6 ... ## $ Length : int 177 195 180 193 186 189 200 216 198 206 ... ## $ Wheelbase : int 102 115 102 106 109 105 111 116 108 114 ... ## $ Width : int 68 71 67 70 69 69 74 78 73 73 ... ## $ Turn.circle : int 37 38 37 37 39 41 42 45 41 43 ... ## $ Rear.seat.room : num 26.5 30 28 31 27 28 30.5 30.5 26.5 35 ... ## $ Luggage.room : int 11 15 14 17 13 16 17 21 14 18 ... ## $ Weight : int 2705 3560 3375 3405 3640 2880 3470 4105 3495 3620 ... ## $ Origin : Factor w/ 2 levels &quot;USA&quot;,&quot;non-USA&quot;: 2 2 2 2 2 1 1 1 1 1 ... ## $ Make : Factor w/ 93 levels &quot;Acura Integra&quot;,..: 1 2 4 3 5 6 7 9 8 10 ... "],["패키지-불러오기-3.html", "16.2 패키지 불러오기", " 16.2 패키지 불러오기 먼저, manipulate 패키지를 별도 설치하고 호출해 보겠습니다. # install.packages(&quot;manipulate&quot;) library(manipulate) ## ## Attaching package: &#39;manipulate&#39; ## The following object is masked from &#39;package:aplpack&#39;: ## ## slider "],["slider-control.html", "16.3 Slider Control", " 16.3 Slider Control slider(start point, end point, step= , initial = ) 의 형태로 슬라이더 조작 옵션을 설정하고, 이 옵션 객체를 그래프의 조작하고자 하는 부분에 할당을 하면 됩니다. 말이 좀 어려운데요, 아래 히스토그램에서 Bin size 를 3부터 100까지의 범위 내에서 5 씩 증가하게끔 해놓고, 처음 만들어졌을 때의 디폴트는 20으로 설정한 예제입니다. 동적 그래프의 특성을 직관적으로 이해할 수 있도록 화면캡쳐와 함께 동영상 캡쳐도 해서 올립니다. 왼쪽의 슬라이드 바를 좌우로 조절할 때마다 우측 plots 창의 히스토그램이 어떻게 바뀌는지 확인해보기 바랍니다. library(MASS) ## Slider Control manipulate( hist(Cars93$Price, breaks = bin_slider), bin_slider=slider(3,100, step=5, initial = 20)) ## Error in manipulate(hist(Cars93$Price, breaks = bin_slider), bin_slider = slider(3, : The manipulate package must be run from within RStudio "],["picker-control.html", "16.4 Picker Control", " 16.4 Picker Control 히스토그램에 대상 변수를 선택할 수 있는 Picker Control 예제입니다. ## Picker Control manipulate( hist(Cars93[, continuous_variable], freq = FALSE, main = continuous_variable), continuous_variable = picker(&quot;MPG.highway&quot;, &quot;Weight&quot;, &quot;Price&quot;)) ## Error in manipulate(hist(Cars93[, continuous_variable], freq = FALSE, : The manipulate package must be run from within RStudio 산포도의 x축, 무게(Weight)과 y축, 고속도로연비(MPG.highway)은 정해져있고, 차종(Type)별로 산포도를 보고 싶을 때 차종(Type)을 왼쪽의 Picker Control 상자로 만들어서 바로 바로 차종별로 선택해 가면서 산포도를 보는 프로그램 예제입니다. manipulate( plot(MPG.highway ~ Weight, data=Cars93[Cars93$Type == Type,]), Type = picker(&quot;Compact&quot;, &quot;Large&quot;, &quot;Midsize&quot;, &quot;Small&quot;, &quot;Sporty&quot;, &quot;Van&quot;)) ## Error in manipulate(plot(MPG.highway ~ Weight, data = Cars93[Cars93$Type == : The manipulate package must be run from within RStudio "],["checkbox-control.html", "16.5 Checkbox Control", " 16.5 Checkbox Control 아래는 Box Plot 에서 IQR(Inter Quartile Range)의 1.5배 기준으로 계산된 Outlier 를 포함시켜서 제시를 할지 아니면 제외시킬지를 Checkbox 로 선택할 수 있게 한 예제입니다. ## Checkbox Control manipulate( boxplot(Price ~ Type, data = Cars93, outline = outline), outline = checkbox(FALSE, &quot;Show outliers&quot;)) ## Error in manipulate(boxplot(Price ~ Type, data = Cars93, outline = outline), : The manipulate package must be run from within RStudio "],["combining-controls.html", "16.6 Combining Controls", " 16.6 Combining Controls 이번에는 Picker Control과 Slider Control 두 개를 함께 사용해 보는 예제입니다. Picker Control 로 대상 변수를 선택할 수 있게 하였고, Slider Control 로 Histogram 의 Bin size 를 조절할 수 있도록 해보았습니다. ## Combining Controls manipulate( hist(Cars93[, continuous_variable], breaks = bin_slider, freq = FALSE, main = continuous_variable), continuous_variable = picker(&quot;MPG.highway&quot;, &quot;Weight&quot;, &quot;Price&quot;), bin_slider = slider(5,50, step=5, initial = 10) ) ## Error in manipulate(hist(Cars93[, continuous_variable], breaks = bin_slider, : The manipulate package must be run from within RStudio 참고자료 https://rfriend.tistory.com/166?category=605866 https://rfriend.tistory.com/167?category=605866 http://www.bloter.net/archives/270142 https://visualize.tistory.com/35 https://rfriend.tistory.com/168?category=605866 https://rfriend.tistory.com/169 https://rfriend.tistory.com/170 https://rfriend.tistory.com/83 https://rfriend.tistory.com/71 https://rfriend.tistory.com/95?category=605866 https://rfriend.tistory.com/97?category=605866 "]]
