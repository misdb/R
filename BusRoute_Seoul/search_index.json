[["index.html", "Open API - Seoul Bus Information with R Open API를 이용한 서울특별시 버스 정보 조회 및 시각화", " Open API - Seoul Bus Information with R Dae Ho Kim 2020-12-06 Open API를 이용한 서울특별시 버스 정보 조회 및 시각화 data.go.kr에서 제공하는 서울특별시 버스 정보 조회 서비스를 이용하여, 버스 노선 정보의 조회와 운행 중인 실시간 버스 위치 조회 서비스를 이용하여, 이를 시각화한다. 노선 버스의 노선 ID 확인하기 노선별 정류소 정보 조회 노선별 정류소 정보 시각화 운행 중인 버스의 실시간 위치 정보 조회 운행 중인 버스의 실시간 위치 시각화 "],["Bus-ID.html", "Chapter 1 버스 노선의 노선 ID 확인 패키지 불러오기 1.1 서울시 운행중인 노선 번호와 노선 ID 확인 1.2 402번 버스 노선의 노선 ID 확인", " Chapter 1 버스 노선의 노선 ID 확인 data.go.kr의 Open API 활용 방법을 학습하기 위해, 현재 서울시에서 운행중인 버스 노선에 대한 정보 조회 방법을 예로 들어본다. (노선정보조회 서비스 Open API 활용가이드 P. 10) 패키지 불러오기 library(XML) library(ggmap) ## Loading required package: ggplot2 ## Google&#39;s Terms of Service: https://cloud.google.com/maps-platform/terms/. ## Please cite ggmap if you use it! See citation(&quot;ggmap&quot;) for details. library(tidyverse) ## -- Attaching packages --------------------------------------- tidyverse 1.3.0 -- ##  tibble 3.0.4  dplyr 1.0.2 ##  tidyr 1.1.2  stringr 1.4.0 ##  readr 1.4.0  forcats 0.5.0 ##  purrr 0.3.4 ## -- Conflicts ------------------------------------------ tidyverse_conflicts() -- ## x dplyr::filter() masks stats::filter() ## x dplyr::lag() masks stats::lag() 1.1 서울시 운행중인 노선 번호와 노선 ID 확인 먼저 Open API를 사용하기 위해 data.go.kr에서 발급받은 API Key를 인증받는다. 1.1.1 API Key 인증받기 API_key &lt;- &quot;XNamCEPA1y........w2oz2Hqld26g%3D%3D&quot; # data.go.kr에서 발급받은 API_key 입력 1.1.2 노선정보 조회 (노선정보조회 서비스 Open API 활용가이드 P. 10, (3) getBusRouteList 상세기능 명세) 1.1.2.1 조회할 노선번호 노선번호(busRtNm)를 공란으로 한다. 즉, 서울시에 운행중인 모든 노선정보를 조회한다. busRtNm &lt;- &quot;&quot; # 검색할 노선버스 번호를 빈문자로 정한다. 1.1.2.2 노선정보 조회 서비스 URL 노선정보조회 서비스 url을 입력한다. 기본 url : “http://ws.bus.go.kr/api/rest/busRouteInfo/getBusRouteList?ServiceKey=” &amp;strSrcg : busRtNm url &lt;- &quot;http://ws.bus.go.kr/api/rest/busRouteInfo/getBusRouteList?ServiceKey=&quot; srch_url &lt;- paste(url, API_key, &quot;&amp;strSrch=&quot;, busRtNm, sep= &quot;&quot;) 1.1.2.3 노선정보를 조회 xmlParse() 함수를 이용하여 노선정보 데이터를 다운로드하여, xmlfile에 대입한다. xmlfile &lt;- xmlParse(srch_url) # 해당 url에 데이터를 요구(request)하고, # 그 결과(response)를 xmlfile 변수에 저장한다. # xmlRoot(xmlfile) # xmlfile 변수의 내용을 출력한다. 1.1.2.4 조회한 정보를 데이터 프레임 형태로 변환 xmlToDataFrmae() 함수를 이용하여, xmlfile을 데이터 프레임 형태로 변환하여 df 변수에 대입한다. 이제 df 변수는 서울시에서 운행 중인 모든 노선 정보를 담고 있다. df &lt;- xmlToDataFrame(getNodeSet(xmlfile, &quot;//itemList&quot;)) # xml 형식을 데이터프레임으로 변환. str(df) # 노선정보조회 서비스 Open API 활용 가이드 : p. 10-11 (2) 응답메시지 명세 참고... ## &#39;data.frame&#39;: 1179 obs. of 13 variables: ## $ busRouteId : chr &quot;100100506&quot; &quot;100100507&quot; &quot;100100513&quot; &quot;100100373&quot; ... ## $ busRouteNm : chr &quot;6006&quot; &quot;6009&quot; &quot;6100&quot; &quot;6101&quot; ... ## $ corpNm : chr &quot;서울공항리무진 02-577-1343&quot; &quot;서울공항리무진 02-577-1343&quot; &quot;한국도심공항 02-551-0077&quot; &quot;한국도심공항 02-551-0077&quot; ... ## $ edStationNm: chr &quot;인천공항&quot; &quot;인천공항&quot; &quot;인천공항&quot; &quot;김포공항&quot; ... ## $ firstBusTm : chr &quot;20201206065000&quot; &quot;20201206065000&quot; &quot;20201206053000&quot; &quot;20201206051000&quot; ... ## $ firstLowTm : chr &quot; &quot; &quot;20200302000000&quot; &quot; &quot; &quot;20190812000000&quot; ... ## $ lastBusTm : chr &quot;20201206202000&quot; &quot;20201206150500&quot; &quot;20201206154000&quot; &quot;20201206204000&quot; ... ## $ lastBusYn : chr &quot; &quot; &quot; &quot; &quot; &quot; &quot; &quot; ... ## $ lastLowTm : chr &quot; &quot; &quot;20200302000000&quot; &quot;20191105000000&quot; &quot;20190812000000&quot; ... ## $ length : chr &quot;178.7&quot; &quot;147&quot; &quot;206&quot; &quot;90&quot; ... ## $ routeType : chr &quot;1&quot; &quot;1&quot; &quot;1&quot; &quot;1&quot; ... ## $ stStationNm: chr &quot;몽촌토성역&quot; &quot;푸른마을아파트앞&quot; &quot;망우역&quot; &quot;수락터미널&quot; ... ## $ term : chr &quot;630&quot; &quot;630&quot; &quot;180&quot; &quot;70&quot; ... 서울시에 운행 중인 버스 노선이 1172개임을 확인할 수 있다. 컬럼의 갯수는 13개 : 이들에 대한 자세한 내용은 “노선정보조회 서비스 Open API 활용 가이드 : p. 10-11 (2) 응답메시지 명세 참고…” 1.1.2.5 노선정보 확인 서울시에 운행 중인 “모든 노선정보”를 확인한다. df %&gt;% head ## busRouteId busRouteNm corpNm edStationNm firstBusTm ## 1 100100506 6006 서울공항리무진 02-577-1343 인천공항 20201206065000 ## 2 100100507 6009 서울공항리무진 02-577-1343 인천공항 20201206065000 ## 3 100100513 6100 한국도심공항 02-551-0077 인천공항 20201206053000 ## 4 100100373 6101 한국도심공항 02-551-0077 김포공항 20201206051000 ## 5 100100508 6300 서울공항리무진 02-577-1343 인천공항 20201206064000 ## 6 100100568 6707A KAL리무진 02-2667-0386 인천공항 20201206044000 ## firstLowTm lastBusTm lastBusYn lastLowTm length routeType ## 1 20201206202000 178.7 1 ## 2 20200302000000 20201206150500 20200302000000 147 1 ## 3 20201206154000 20191105000000 206 1 ## 4 20190812000000 20201206204000 20190812000000 90 1 ## 5 20201206145500 20200324000000 201.4 1 ## 6 20200617000000 20201206223000 20180112000000 130 1 ## stStationNm term ## 1 몽촌토성역 630 ## 2 푸른마을아파트앞 630 ## 3 망우역 180 ## 4 수락터미널 70 ## 5 고덕동 630 ## 6 김포공항 70 그 중에 busRouteNm 컬럼은 버스 노선 번호를, 그리고 busRouteId 컬럼은 노선 ID를 보여준다. head(df$busRouteNm) # 버스 노선 번호 출력 ## [1] &quot;6006&quot; &quot;6009&quot; &quot;6100&quot; &quot;6101&quot; &quot;6300&quot; &quot;6707A&quot; head(df$busRouteId) # 노선 ID 출력 ## [1] &quot;100100506&quot; &quot;100100507&quot; &quot;100100513&quot; &quot;100100373&quot; &quot;100100508&quot; &quot;100100568&quot; 1.2 402번 버스 노선의 노선 ID 확인 df 변수의 busRouteNm == 402인 busRouteId (컬럼 번호 1)를 찾으면 된다. busID &lt;- df[df$busRouteNm == &quot;402&quot;, 1] busID ## [1] &quot;100100063&quot; "],["Bus-Route.html", "Chapter 2 버스 노선의 정류소 정보 조회 패키지 불러오기 2.1 노선별 정류소 정보 다운로드 하기", " Chapter 2 버스 노선의 정류소 정보 조회 다운받은 버스 노선의 노선 ID를 이용하여 Google 지도에 버스 노선의 경로를 시각화한다. 즉, 구글 맵에 버스 노선의 정류장들을 선으로 연결해서 표시해 보기로 한다. 패키지 불러오기 library(XML) library(ggmap) library(tidyverse) 2.1 노선별 정류소 정보 다운로드 하기 (노선정보조회 서비스 Open API 활용가이드 P. 10, (3) getBusRouteList 상세기능 명세) 402번 버스의 노선 ID를 확인하였다. 버스 노선의 정류장을 선으로 연결하기 위헤 특정 노선을 선택하고, 그 노선의 정류장 이름과 위치 정보를 확인한다. 2.1.1 API Key 인증받기 API_key &lt;- &quot;XNamCEPA1y........w2oz2Hqld26g%3D%3D&quot; # data.go.kr에서 발급받은 API_key 입력 2.1.2 정류소 정보 조회 2.1.2.1 노선 ID 확인 노선번호 402번 버스의 노선 ID는 busID에 저장되어 있다. busRouteId &lt;- busID 2.1.2.2 노선별 경유 정류소 정보 조회 서비스 URL. 노선별 경유 정류소 조회 서비스를 이용하여, 노선ID에 해당하는 경유 정류소 목록을 조회한다 (노선정보조회 서비스 Open API 활용가이드 P. 13, (4) getStaionsByRouteList 상세기능 명세 참고) (Call Back) url = “http://ws.bus.go.kr/api/rest/busRouteInfo/getStaionByRoute” serviceKey = API_key busRouteId = busID 서비스 url을 다음과 같이 설정하고, srch_url 변수에 대입한다. url &lt;- &quot;http://ws.bus.go.kr/api/rest/busRouteInfo/getStaionByRoute&quot; serviceKey &lt;- API_key srch_url &lt;- paste0(url, &quot;?ServiceKey=&quot;, API_key, &quot;&amp;busRouteId=&quot;, busRouteId) 2.1.2.3 노선별 경유 정류소 정보 조회 xmlParse() 함수를 이용하여 노선별 정류소 정보를 다운로드하여, xmlfile에 대입한다. xmlfile &lt;- xmlParse(srch_url) # xmlRoot(xmefile) 2.1.2.4 조회한 정보를 데이터 프레임 형태로 변환 xmlToDataFrmae() 함수를 이용하여, xmlfile을 데이터 프레임 형태로 변환하여 df_route 변수에 대입한다. 이제 df_path 변수는 busID에 수록된 노선이 운행하는 정류소 정보를 담고 있다. df_path &lt;- xmlToDataFrame(getNodeSet(xmlfile, &quot;//itemList&quot;)) str(df_path) ## &#39;data.frame&#39;: 108 obs. of 20 variables: ## $ arsId : chr &quot;24446&quot; &quot;24448&quot; &quot;24464&quot; &quot;24467&quot; ... ## $ beginTm : chr &quot;04:00&quot; &quot;04:05&quot; &quot;04:08&quot; &quot;04:08&quot; ... ## $ busRouteId : chr &quot;100100063&quot; &quot;100100063&quot; &quot;100100063&quot; &quot;100100063&quot; ... ## $ busRouteNm : chr &quot;402&quot; &quot;402&quot; &quot;402&quot; &quot;402&quot; ... ## $ direction : chr &quot;광화문&quot; &quot;광화문&quot; &quot;광화문&quot; &quot;광화문&quot; ... ## $ gpsX : chr &quot;127.1359435567&quot; &quot;127.1333059577&quot; &quot;127.131555&quot; &quot;127.1291283788&quot; ... ## $ gpsY : chr &quot;37.4806401323&quot; &quot;37.4809413424&quot; &quot;37.481607&quot; &quot;37.4805494955&quot; ... ## $ lastTm : chr &quot;23:59&quot; &quot;00:04&quot; &quot;00:06&quot; &quot;00:06&quot; ... ## $ posX : chr &quot;212022.43167104843&quot; &quot;211789.1230600006&quot; &quot;211634.17106410407&quot; &quot;211419.7317364646&quot; ... ## $ posY : chr &quot;442370.28669265006&quot; &quot;442403.3799425196&quot; &quot;442477.0334311831&quot; &quot;442359.3799282368&quot; ... ## $ routeType : chr &quot;3&quot; &quot;3&quot; &quot;3&quot; &quot;3&quot; ... ## $ sectSpd : chr &quot;0&quot; &quot;32&quot; &quot;29&quot; &quot;30&quot; ... ## $ section : chr &quot;0&quot; &quot;123605241&quot; &quot;123604916&quot; &quot;123605062&quot; ... ## $ seq : chr &quot;1&quot; &quot;2&quot; &quot;3&quot; &quot;4&quot; ... ## $ station : chr &quot;123000354&quot; &quot;123000356&quot; &quot;123000372&quot; &quot;123000375&quot; ... ## $ stationNm : chr &quot;장지공영차고지&quot; &quot;아이코리아&quot; &quot;송파글마루도서관.버들어린이집&quot; &quot;문현고등학교&quot; ... ## $ stationNo : chr &quot;24446&quot; &quot;24448&quot; &quot;24464&quot; &quot;24467&quot; ... ## $ transYn : chr &quot;N&quot; &quot;N&quot; &quot;N&quot; &quot;N&quot; ... ## $ fullSectDist: chr &quot;0&quot; &quot;794&quot; &quot;356&quot; &quot;576&quot; ... ## $ trnstnid : chr &quot;101900006&quot; &quot;101900006&quot; &quot;101900006&quot; &quot;101900006&quot; ... busID 노선의 정류소 정보가 109개임을 확인할 수 있다. 컬럼의 갯수는 20개 : 이들에 대한 자세한 내용은 “노선정보조회 서비스 Open API 활용가이드 P. 14, (4) getStaionsByRouteList 응답 메시지 명세 참고.” 2.1.2.5 분석용 데이터 세트의 생성 df_path 컬럼 중 정류소 이름을 나타내는 stationNm 컬럼과, 위치정보를 나타내는 gpsX, gpsY 컬럼을 선택하여 station 데이터 세트를 생성한다. gpsX : 경도 -&gt; 숫자형으로 변환 -&gt; 컬럼명을 lon으로 변경 gpsY : 위도 -&gt; 숫자형으로 변환 -&gt; 컬럼명을 ’lat’으로 변경 gpsX &lt;- as.numeric(df_path$gpsX) gpsY &lt;- as.numeric(df_path$gpsY) station &lt;- data.frame(stationNm = df_path$stationNm, lon = gpsX, lat = gpsY) str(station) ## &#39;data.frame&#39;: 108 obs. of 3 variables: ## $ stationNm: chr &quot;장지공영차고지&quot; &quot;아이코리아&quot; &quot;송파글마루도서관.버들어린이집&quot; &quot;문현고등학교&quot; ... ## $ lon : num 127 127 127 127 127 ... ## $ lat : num 37.5 37.5 37.5 37.5 37.5 ... 2.1.2.6 데이터 세트의 저장 write_rds(station, &quot;data/station.rds&quot;) "],["Bus-Route-Visualization.html", "Chapter 3 버스 노선의 정류소 정보 시각화 패키지 불러오기 3.1 버스 정류소 위치를 Marker로 표시하기 3.2 버스 정류소 위치에 정류소 이름 표시하기", " Chapter 3 버스 노선의 정류소 정보 시각화 다운받은 버스 노선 정류소 데이터 세트인 station을 이용하여 Google 지도에 노선의 정류소 경로를 시각화한다. 즉, 구글 맵에 버스 노선의 정류소들을 선으로 연결해서 표시해 보기로 한다. 패키지 불러오기 library(XML) library(ggmap) library(tidyverse) 3.1 버스 정류소 위치를 Marker로 표시하기 3.1.1 Google API 인증 register_google(key=&quot;API Key&quot;) # https://console.cloud.google.com 에서 확인 3.1.2 버스 위치의 중심점 찾기 station 데이터 세트에서 위치정보 컬럼만 선택하여, gc 에 대입한다. 그리고 버스 정류소의 중심 위치를 확인하여 cen에 대입한다. station &lt;- read_rds(&quot;data/station.rds&quot;) gc &lt;- station[, 2:3] # lon, lat 컬럼만 추출 cen &lt;- sapply(gc, mean) # 차량위치의 중심점 3.1.3 구글 지도 정보 가져오기 get_googlemap() 함수를 이용하여 구글 지도 정보를 가져온다. 그 결과는 map에 대입한다. map &lt;- get_googlemap(center = cen, maptype = &quot;roadmap&quot;, zoom = 11, marker = gc) ## Source : https://maps.googleapis.com/maps/api/staticmap?center=37.504825,127.052821&amp;zoom=11&amp;size=640x640&amp;scale=2&amp;maptype=roadmap&amp;markers=37.48064,127.135944%7C37.480941,127.133306%7C37.481607,127.131555%7C37.480549,127.129128%7C37.479116,127.124773%7C37.478255,127.121259%7C37.479148,127.119361%7C37.478254,127.113801%7C37.476757,127.1098%7C37.476098,127.107685%7C37.482016,127.105161%7C37.484552,127.104674%7C37.487189,127.100736%7C37.48535,127.097246%7C37.484528,127.093353%7C37.484399,127.090989%7C37.483489,127.08475%7C37.482913,127.080583%7C37.483809,127.069211%7C37.486708,127.067471%7C37.488434,127.066416%7C37.489313,127.068449%7C37.489949,127.070599%7C37.492414,127.072487%7C37.495767,127.066974%7C37.493859,127.061498%7C37.49256,127.05858%7C37.491586,127.056523%7C37.489736,127.052466%7C37.488145,127.048961%7C37.486164,127.044562%7C37.485251,127.037969%7C37.486653,127.033097%7C37.491087,127.030987%7C37.494993,127.029112%7C37.500785,127.02637%7C37.506367,127.023728%7C37.512972,127.020607%7C37.524552,127.015683%7C37.532866,127.008338%7C37.536442,127.00573%7C37.541578,127.00354%7C37.545795,127.002202%7C37.544437,127.00204%7C37.541621,126.996235%7C37.542704,126.99279%7C37.54485,126.990932%7C37.546397,126.98584%7C37.54869,126.98432%7C37.552282,126.980835%7C37.555737,126.980093%7C37.556627,126.976711%7C37.558613,126.976205%7C37.562358,126.976574%7C37.567357,126.977432%7C37.566212,126.976836%7C37.562145,126.975905%7C37.555388,126.972762%7C37.558001,126.973628%7C37.558558,126.975672%7C37.556198,126.976626%7C37.552044,126.981134%7C37.548395,126.984167%7C37.54626,126.985632%7C37.544673,126.990733%7C37.542505,126.992917%7C37.540892,126.997312%7C37.541175,127.003178%7C37.535491,127.005729%7C37.514489,127.019939%7C37.507226,127.023032%7C37.501817,127.025438%7C37.496042,127.028401%7C37.491895,127.030405%7C37.487667,127.032432%7C37.484769,127.037419%7C37.485919,127.044978%7C37.487972,127.04938%7C37.489168,127.052111%7C37.491182,127.056547%7C37.492577,127.059611%7C37.493678,127.06206%7C37.495605,127.067708%7C37.492262,127.072156%7C37.490243,127.070593%7C37.489554,127.068378%7C37.488489,127.066123%7C37.48653,127.067244%7C37.4845,127.0682%7C37.482472,127.079579%7C37.482805,127.082122%7C37.483383,127.085975%7C37.483863,127.089107%7C37.484321,127.093769%7C37.485281,127.097607%7C37.486848,127.10185%7C37.48485,127.103602%7C37.482655,127.104399%7C37.475659,127.107295%7C37.476668,127.110393%7C37.477818,127.113478%7C37.478943,127.119043%7C37.478215,127.121195%7C37.479007,127.124888%7C37.480632,127.129475%7C37.481598,127.131337%7C37.48096,127.13364%7C37.480357,127.135903&amp;key=xxx 3.1.4 구글 지도 그리기 gmap &lt;- ggmap(map) 3.2 버스 정류소 위치에 정류소 이름 표시하기 3.2.1 구글 지도 정보 가져오기 map1 &lt;- get_googlemap(center = cen, maptype = &quot;roadmap&quot;, zoom = 11) ## Source : https://maps.googleapis.com/maps/api/staticmap?center=37.504825,127.052821&amp;zoom=11&amp;size=640x640&amp;scale=2&amp;maptype=roadmap&amp;key=xxx 3.2.2 정류소 위치를 점으로 표시하기 geom_point() 함수를 이용하여 정류소의 위치에 점을 찍는다. ggmap(map1) + geom_point(data = station, # 데이터 세트 aes(x= lon, y = lat), # 위치 정보 size = 1, # 점의 크기 colour = &#39;blue&#39;) # 점의 색깔 3.2.3 정류소 이름을 표시하기 geom_text() 함수를 이용하여 station 데이터 세트의 stationNm 컬럼을 label의 인수로 지정하여 지도를 그린다. ggmap(map1) + geom_point(data = station, # 데이터 세트 aes(x= lon, y = lat), # 위치 정보 size = 1, # 점의 크기 colour = &#39;blue&#39;) + # 점의 색깔 geom_text(data = station, # 데이터 세트 aes(x = lon, y = lat), # 위치 정보 size = 2, # 글자의 크기 label = station$stationNm, # 정류소 이름 color = &quot;red&quot;) 3.2.4 정류소를 선으로 연결하기 ggmap(map1) + geom_point(data = station, # 데이터 세트 aes(x= lon, y = lat), # 위치 정보 size = 1, # 점의 크기 colour = &#39;blue&#39;) + # 점의 색깔 # 정류소 이름 # geom_text(data = station, # 데이터 세트 # aes(x = lon, y = lat), # 위치 정보 # size = 2, # 글자의 크기 # label = station$stationNm, # 정류소 이름 # color = &quot;red&quot;) + geom_path(data = station, aes(x = lon, y = lat), color = &quot;red&quot;, alpha = .5, lwd = 1) "],["Bus-Location.html", "Chapter 4 노선 버스의 실시간 위치 확인 패키지 불러오기 4.1 특정 노선의 실시간 위치", " Chapter 4 노선 버스의 실시간 위치 확인 data.go.kr의 Open API 활용 방법을 학습하기 위해, 두 번째로 서울시에서 운행중인 버스의 실시간 위치 정보 조회 방법을 알아보기로 한다. (버스위치정보조회 서비스 Open API 활용가이드 P. 8 참고) 패키지 불러오기 library(XML) library(ggmap) library(tidyverse) 4.1 특정 노선의 실시간 위치 먼저 Open API를 사용하기 위해 data.go.kr에서 발급받은 API Key를 인증받는다. 4.1.1 API Key 인증받기 API_key &lt;- &quot;XNamCEPA1y........w2oz2Hqld26g%3D%3D&quot; # data.go.kr에서 발급받은 API_key 입력 4.1.2 실시간 버스 위치 정보 조회 (버스위치정보조회 서비스 Open API 활용가이드 P. 8 참고) 4.1.2.1 조회할 노선 ID 노선번호(busRtNm)를 공란으로 한다. 즉, 서울시에 운행중인 모든 노선정보를 조회한다. busRtNm &lt;- busID # 검색할 노선버스 번호를 빈문자로 정한다. 4.1.2.2 노선정보 조회 서비스 URL 노선정보조회 서비스 url을 입력한다. 기본 url : “http://ws.bus.go.kr/api/rest/buspos/getBusPosByRtid?ServiceKey=” &amp;busRouteId= : 버스 노선 ID -&gt; busRtNm url &lt;- &quot;http://ws.bus.go.kr/api/rest/buspos/getBusPosByRtid?ServiceKey=&quot; srch_url &lt;- paste(url, API_key, &quot;&amp;busRouteId=&quot;, busRtNm, sep= &quot;&quot;) 4.1.2.3 실시간 위치 정보 조회 xmlParse() 함수를 이용하여 실시간 위치 정보 데이터를 다운로드하여, xmlfile에 대입한다. xmlfile &lt;- xmlParse(srch_url) # 해당 url에 데이터를 요구(request)하고, # 그 결과(response)를 xmlfile 변수에 저장한다. # xmlRoot(xmlfile) # xmlfile 변수의 내용을 출력한다. 4.1.2.4 조회한 정보를 데이터 프레임 형태로 변환 xmlToDataFrmae() 함수를 이용하여, xmlfile을 데이터 프레임 형태로 변환하여 df 변수에 대입한다. 이제 df 변수는 노선 ID가 100100063인 노선의 운행 중인 버스들의 실시간 위치 정보를 담고 있다. df &lt;- xmlToDataFrame(getNodeSet(xmlfile, &quot;//itemList&quot;)) str(df) ## &#39;data.frame&#39;: 16 obs. of 23 variables: ## $ busType : chr &quot;1&quot; &quot;1&quot; &quot;1&quot; &quot;1&quot; ... ## $ congetion : chr &quot;0&quot; &quot;0&quot; &quot;3&quot; &quot;3&quot; ... ## $ dataTm : chr &quot;20201206210916&quot; &quot;20201206210912&quot; &quot;20201206210856&quot; &quot;20201206210900&quot; ... ## $ fullSectDist: chr &quot;0.576&quot; &quot;0.972&quot; &quot;2.97&quot; &quot;0.424&quot; ... ## $ gpsX : chr &quot;127.131748&quot; &quot;127.104033&quot; &quot;127.077381&quot; &quot;127.059167&quot; ... ## $ gpsY : chr &quot;37.481563&quot; &quot;37.485382&quot; &quot;37.482695&quot; &quot;37.492735&quot; ... ## $ isFullFlag : chr &quot;0&quot; &quot;0&quot; &quot;0&quot; &quot;0&quot; ... ## $ islastyn : chr &quot;0&quot; &quot;0&quot; &quot;0&quot; &quot;0&quot; ... ## $ isrunyn : chr &quot;1&quot; &quot;1&quot; &quot;1&quot; &quot;1&quot; ... ## $ lastStTm : chr &quot;10477&quot; &quot;9701&quot; &quot;9309&quot; &quot;8246&quot; ... ## $ lastStnId : chr &quot;123000372&quot; &quot;122000718&quot; &quot;122000278&quot; &quot;122000124&quot; ... ## $ nextStId : chr &quot;122000297&quot; &quot;122000297&quot; &quot;122000250&quot; &quot;122000214&quot; ... ## $ nextStTm : chr &quot;920&quot; &quot;143&quot; &quot;352&quot; &quot;402&quot; ... ## $ plainNo : chr &quot;서울70사9585&quot; &quot;서울70사9583&quot; &quot;서울70사9565&quot; &quot;서울70사9582&quot; ... ## $ posX : chr &quot;211651.24601290378&quot; &quot;209199.77741288094&quot; &quot;206843.1500228184&quot; &quot;205231.70362587066&quot; ... ## $ posY : chr &quot;442472.1744005908&quot; &quot;442892.91876124544&quot; &quot;442592.4585516141&quot; &quot;443705.47902125027&quot; ... ## $ rtDist : chr &quot;56.21&quot; &quot;56.21&quot; &quot;56.21&quot; &quot;56.21&quot; ... ## $ sectDist : chr &quot;0.04&quot; &quot;0.18&quot; &quot;0.409&quot; &quot;0.026&quot; ... ## $ sectOrd : chr &quot;3&quot; &quot;12&quot; &quot;18&quot; &quot;27&quot; ... ## $ sectionId : chr &quot;123605062&quot; &quot;122606586&quot; &quot;122606508&quot; &quot;122605652&quot; ... ## $ stopFlag : chr &quot;1&quot; &quot;0&quot; &quot;0&quot; &quot;1&quot; ... ## $ trnstnid : chr &quot;101900006&quot; &quot;101900006&quot; &quot;101900006&quot; &quot;101900006&quot; ... ## $ vehId : chr &quot;123053266&quot; &quot;123053347&quot; &quot;123053485&quot; &quot;123053346&quot; ... 100100063 노선 버스들의 실시간 위치 정보를 보여 준다. 현재 26대의 버스가 운행 중이다. 컬럼의 갯수는 26개 : 이들에 대한 자세한 내용은 “버스 노선정보조회 서비스 Open API 활용가이드 P. 13 참고” 4.1.2.5 분석용 데이터 세트 생성 다운 받은 정보 중 gpsX, gpsY, 그리고 plainNo 컬럼 만을 선택하여 data에 대입한다. plainNo : 차량 번호판 =&gt; 문자형 데이터 gpsX : 경도 =&gt; 문자형 데이터를 숫자형으로 변환 =&gt; 컬럼명을 lon으로 변경 gpsY : 위도 =&gt; 문자형 데이터를 숫자형으로 변환 =&gt; 컬럼명을 lat으로 변경 gpsX &lt;- as.numeric(df$gpsX) gpsY &lt;- as.numeric(df$gpsY) df_location &lt;- data.frame(plainNo = df$plainNo, lon = gpsX, lat = gpsY) head(df_location) ## plainNo lon lat ## 1 서울70사9585 127.1317 37.48156 ## 2 서울70사9583 127.1040 37.48538 ## 3 서울70사9565 127.0774 37.48269 ## 4 서울70사9582 127.0592 37.49274 ## 5 서울70사9580 127.0295 37.49433 ## 6 서울70사9563 127.0035 37.54158 4.1.2.6 데이터 세트의 저장 write_rds(df_location, &quot;data/df-location.rds&quot;) "],["Bus-Location-Visualization.html", "Chapter 5 실시간 버스 위치의 시각화 패키지 불러오기 5.1 실시간 위치를 Marker로 표시하기 5.2 구글 지도 그리기 5.3 지도에 차량번호를 포함시키기", " Chapter 5 실시간 버스 위치의 시각화 이제 다운받은 노선버스의 실시간 위치 정보를 이용하여 Google 지도에 시각화한다. 즉, 구글 맵에 버스 위치를 표시해 보기로 한다. 패키지 불러오기 library(XML) library(ggmap) library(tidyverse) 5.1 실시간 위치를 Marker로 표시하기 5.1.1 Google API 인증 register_google(key=&quot;API Key&quot;) # https://console.cloud.google.com 에서 확인 5.1.2 버스 위치의 중심점 찾기 data &lt;- read_rds(&quot;data/df-location.rds&quot;) gc &lt;- data[, 2:3] # lon, lat 컬럼만 추출 cen &lt;- sapply(gc, mean) # 차량위치의 중심점 5.1.3 구글 지도 정보 가져오기 get_googlemap() 함수를 이용하여 구글 지도 정보를 가져온다. 그 결과는 map에 대입한다. map &lt;- get_googlemap(center = cen, maptype = &quot;roadmap&quot;, zoom = 11, marker = gc) ## Source : https://maps.googleapis.com/maps/api/staticmap?center=37.508274,127.046774&amp;zoom=11&amp;size=640x640&amp;scale=2&amp;maptype=roadmap&amp;markers=37.481563,127.131748%7C37.485382,127.104033%7C37.482695,127.077381%7C37.492735,127.059167%7C37.494331,127.029469%7C37.541578,127.00354%7C37.548507,126.984267%7C37.56055,126.975675%7C37.557875,126.973365%7C37.539502,127.003843%7C37.512189,127.020776%7C37.495727,127.028498%7C37.492577,127.059611%7C37.482833,127.070937%7C37.485957,127.102992%7C37.478385,127.123087&amp;key=xxx 5.2 구글 지도 그리기 이제 버스의 위치를 구글 지도위에 marker로 표시한다. ggmap(map) # , extent=&quot;device&quot;) 5.3 지도에 차량번호를 포함시키기 지도 위에 현재 운행 위치에서 운행중인 차량번호를 표시해 보자. 5.3.1 데이터 세트 data 데이터 세트에 차량번호 정보가 plainNo 컬럼에 있다. head(data) ## plainNo lon lat ## 1 서울70사9585 127.1317 37.48156 ## 2 서울70사9583 127.1040 37.48538 ## 3 서울70사9565 127.0774 37.48269 ## 4 서울70사9582 127.0592 37.49274 ## 5 서울70사9580 127.0295 37.49433 ## 6 서울70사9563 127.0035 37.54158 5.3.2 차량의 중심점 확인 이미 앞에서 gc 데이터 세트를 생성하여 중심점 cen을 확인한 바 있다. gc &lt;- data[, 2:3] # lon, lat 컬럼만 추출 cen &lt;- sapply(gc, mean) # 차량위치의 중심점 5.3.3 구글 지도 정보 가져오기 이제는 마커 표기 없는 구글 지도 정보를 가져온다. map1 &lt;- get_googlemap(center = cen, maptype=&quot;roadmap&quot;, zoom=12) ## Source : https://maps.googleapis.com/maps/api/staticmap?center=37.508274,127.046774&amp;zoom=12&amp;size=640x640&amp;scale=2&amp;maptype=roadmap&amp;key=xxx 5.3.4 지도위에 버스 번호 표시하기 geom_text() 함수를 이용하여 data$plainNO 를 label 인수의 값으로 입력해 준다. ggmap(map1, extent=&quot;device&quot;) + geom_text(data = data, # 분석용 데이터 세트 aes(x = lon, y = lat), # 경도, 위도 컬럼 size = 3, # 글자 크기 label = data$plainNo) # 운행중인 버스번호 출력 5.3.5 운행 지점을 점으로 찍기 ggmap(map1, extent=&quot;device&quot;) + geom_text(data = data, # 분석용 데이터 세트 aes(x = lon, y = lat), # 경도, 위도 등의 위치 size = 3, # 글자 크기 label = data$plainNo) + geom_point(data = data, # 분석용 데이터 세트 aes(x = lon, y = lat), # 경도, 위도 등의 위치 size = 2, # 점의 크기 colour=&#39;blue&#39;) # 점의 색깔 "]]
